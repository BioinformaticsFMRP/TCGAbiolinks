{
    "contents" : "require(parmigene)\nrequire(xlsx)\nlibrary(gplots)\nrequire(gplots)\nrequire(randomForest)\nCutBarcode<-function (SampleList,start,stop)  {\n\n  SampleList<-as.matrix(SampleList)\n  SampleList_cut<-rep(0,dim(SampleList)[1])\n  SampleList_cut<-as.matrix(SampleList_cut)\n\n  for (i in 1 : dim(SampleList)[1])\n  {\n    # start<-1\n    #stop<-nchar(NewSample[1])\n    #stop<-12\n    SampleList_cut[i] <-substr(SampleList[i], start, stop)\n  }\n  return(SampleList_cut)\n}\n\nTimeUse <-function(func){\n  time1 <- proc.time() # mod1 to determine time calculation\n  result <-func\n  time2 <- proc.time()\n  show(timeelapsed <- time2-time1)\n}\n\nLatexPrintTableforPresentation <- function(Table, rowsForPage, TableTitle, LabelTitle, withrows){\n  require(xtable)\n\n  numberOfprint<-ceiling(nrow(Table)/rowsForPage)\n  vectorFirst<-matrix(0,numberOfprint,1)\n  vectorLast<-matrix(0,numberOfprint,1)\n\n  i<-0\n  for(i in 1:numberOfprint){\n    vectorFirst[i]<-rowsForPage*i\n    vectorLast[i]<-rowsForPage*i+1\n  }\n\n  i<-1\n  for(i in 1:numberOfprint){\n\n    # if (round(nrow(Table)/rowsForPage) <  numberOfprint ) {\n    if (round(nrow(Table)/rowsForPage) == 1 ) {\n\n      Table_current<-Table[i:nrow(Table),]\n      tablePrint_Table_current<-xtable(Table_current, caption = paste(TableTitle,\"(\",i,\")\"),label = gsub(\" \",\"\",paste(LabelTitle,\".\",i)) , size=small)\n      print(tablePrint_Table_current,include.rownames = withrows)\n    }\n\n    else{\n      print(i)\n      if( i == 1 ) {\n        # message<-paste(i,vectorFirst[i])\n        #  print(message)\n        Table_current<-Table[i:vectorFirst[i],]\n        tablePrint_Table_current<-xtable(Table_current, caption = paste(TableTitle,\"(\",i,\")\"),label = gsub(\" \",\"\",paste(LabelTitle,\".\",i)) , size=small)\n        print(tablePrint_Table_current,include.rownames = withrows)\n      }\n\n      else if (i==numberOfprint) {\n        #message<-paste(vectorLast[i-1],nrow(Table))\n        #print(message)\n        Table_current<-Table[vectorLast[i-1]:nrow(Table),]\n        tablePrint_Table_current<-xtable(Table_current, caption = paste(TableTitle,\"(\",i,\")\"),label = gsub(\" \",\"\",paste(LabelTitle,\".\",i)) , size=small)\n        print(tablePrint_Table_current,include.rownames = withrows)\n      }\n      else{\n        #message<-paste(vectorLast[i-1],vectorFirst[i])\n        #print(message)\n        Table_current<-Table[vectorLast[i-1]:vectorFirst[i],]\n        tablePrint_Table_current<-xtable(Table_current, caption = paste(TableTitle,\"(\",i,\")\"),label = gsub(\" \",\"\",paste(LabelTitle,\".\",i)) , size=small)\n        print(tablePrint_Table_current,include.rownames = withrows)\n      }\n    }\n  } #end for\n\n}\n\ncreateMatrixGE2<- function(refFile, namesTable,element,speciesID){\n  namesTable <- as.matrix(namesTable)\n  sampleNum <- nrow(namesTable)\n  colnames(refFile) <- c(\"Gene\",\"Signal\")\n  refFile <- refFile[-1,]\n  MatrixGE <- matrix(0, nrow=nrow(refFile), ncol=sampleNum)\n  rownames(MatrixGE) <- refFile[,speciesID]\n  colnames(MatrixGE)<-namesTable[,\"Sample\"]\n\n  for (i in 1:sampleNum){\n    FileName <- namesTable[i,\"File.Name\"]\n    sampleTable <- read.delim(as.character(FileName))\n    colnames(sampleTable) <- c(\"Gene\",\"Signal\")\n    sampleTable <- sampleTable[-1,]\n    MatrixGE[,i] <- as.numeric(as.character(sampleTable[,element]))\n    print( paste(\"File n. \",i,\" of \",sampleNum,\" \", FileName, \"...done.\" ))\n  }\n\n  return(MatrixGE)\n}\n\ncreateMatrixGE <- function(refFile, namesTable,element,speciesID) {\n\n  #refFile --> Expression File.txt from TCGA Sample Example used to find number of species\n  #namesTable --> File manifest TCGA\n\n  namesTable <- as.matrix(namesTable)\n  sampleNum <- nrow(namesTable)\n  MatrixGE <- matrix(0, nrow=nrow(refFile), ncol=sampleNum)\n  rownames(MatrixGE) <- refFile[,speciesID]\n  colnames(MatrixGE)<-namesTable[,\"Sample\"]\n\n\n\n  for (i in 1:sampleNum){\n    FileName <- namesTable[i,\"File.Name\"]\n    sampleTable <- read.delim(as.character(FileName))\n    MatrixGE[,i] <- sampleTable[,element]\n    print( paste(\"File n. \",i,\" of \",sampleNum,\" \", FileName, \"...done.\" ))\n  }\n\n  return(MatrixGE)\n}\n\nCreateMatrixMI_tf_gene <- function(TFs, normCounts,kNum) {\n\n\n\n  library(parmigene)\n  MRcandidates <- intersect(rownames(normCounts),TFs)\n\n  # Mutual information between TF and genes\n  sampleNames <- colnames(normCounts)\n  geneNames <- rownames(normCounts)\n\n  messageMI_TFgenes <- paste(\"Estimation of MI among [\", length(MRcandidates), \" TRs and \", nrow(normCounts), \" genes].....\", sep = \"\")\n  timeEstimatedMI_TFgenes1 <- length(MRcandidates)*nrow(normCounts)/1000\n  timeEstimatedMI_TFgenes <- format(timeEstimatedMI_TFgenes1*ncol(normCounts)/17000, digits = 2)\n  messageEstimation <- print(paste(\"I Need about \", timeEstimatedMI_TFgenes, \"seconds for this MI estimation. [Processing 17000k elements /s]  \"))\n\n  TimeUse(miTFGenes <- knnmi.cross(normCounts[MRcandidates, ], normCounts, k = kNum))\n\n  return(miTFGenes)\n\n}\n\nFindThreshBootstrap <- function(NumberBootstrap,NormCounts,MRcandidates){\n  library(parmigene)\n  nullDistr <- rep(0, NumberBootstrap)\n  for(b in 1:NumberBootstrap){\n    print(b)\n    MRS <- sample(rownames(NormCounts[MRcandidates, ]), 1)\n    GeneS <- sample(rownames(NormCounts), 1)\n    SampleS <- sample(1:ncol(NormCounts))\n    nullDistr[b] <- knnmi(NormCounts[MRS, SampleS], NormCounts[GeneS, ], k = 3)\n  }\n  return(nullDistr)\n}\n\nGenesCutID <- function(GeneList){\n  GeneListCutID<- as.matrix(matrix(unlist(strsplit(as.character(GeneList),\"|\",fixed=T)),nrow(GeneList),2,byrow=T))[,1]\n  return(as.matrix(GeneListCutID))\n}\n\nConvertMI_to_Cytoscape <-function(miTFGenes,thresh,normCounts){\n  cytNet <- NULL\n  for(i in 1:nrow(miTFGenes)){\n    if(length(thresh) == 1) MI <- round(miTFGenes[i, miTFGenes[i, ] > thresh, drop = FALSE], 2) else\n      MI <- round(miTFGenes[i, miTFGenes[i, ] > thresh[i], drop = FALSE], 2)\n    to <- colnames(MI)\n    if( length(to)>=1){\n      from <- rep(rownames(miTFGenes)[i], length(MI))\n      Sign <- round(cor(t(normCounts[c(from[1], to), ]))[1, -1], 2)\n      tmp <- cbind(from, to, MI = as.numeric(MI), Sign)\n      print(paste(\"TF: \", from[1], \" n. \",i,\" of \",nrow(miTFGenes),\"...Genes in regulon\",\": \", nrow(tmp), sep = \"\"))\n      cytNet <- rbind(cytNet, tmp)\n    }\n  }\n  rownames(cytNet) <- NULL\n  return (cytNet )\n}\n\nConvertMI_to_Cytoscape_onlyNet <-function(miTFGenes, thresh, outPrint = T){\n  cytNet <- NULL\n  for(i in 1:nrow(miTFGenes)){\n    #if(length(thresh) == 1) MI <- round(miTFGenes[i, miTFGenes[i, ] > thresh, drop = FALSE], 2) else\n    #  MI <- round(miTFGenes[i, miTFGenes[i, ] > thresh[i], drop = FALSE], 2)\n    if(length(thresh) == 1) MI <- miTFGenes[i, miTFGenes[i, ] >= thresh, drop = FALSE] else\n      MI <- miTFGenes[i, miTFGenes[i, ] >= thresh[i], drop = FALSE]\n    to <- colnames(MI)\n    if( length(to)>=1){\n      from <- rep(rownames(miTFGenes)[i], length(MI))\n      tmp <- cbind(from, to, MI = as.numeric(MI))\n      if(outPrint == T)\n        print(paste(\"TF: \", from[1], \" n. \",i,\" of \",nrow(miTFGenes),\"...Genes in regulon\",\": \", nrow(tmp), sep = \"\"))\n      cytNet <- rbind(cytNet, tmp)\n    }\n  }\n  rownames(cytNet) <- NULL\n  return (cytNet )\n}\n\n\nConvertCor_to_Cytoscape_onlyNet <-function(matrixADJ,outPrint = T){\n  cytNet <- NULL\n  for(i in 1:nrow(matrixADJ)){\n      MI <- matrixADJ[i, matrixADJ[i, ] !=0, drop = FALSE]\n    to <- colnames(MI)\n    if( length(to)>=1){\n      from <- rep(rownames(matrixADJ)[i], length(MI))\n      tmp <- cbind(from, to, MI = as.numeric(MI))\n      if(outPrint == T)\n        print(paste(\"TF: \", from[1], \" n. \",i,\" of \",nrow(matrixADJ),\"...Genes in regulon\",\": \", nrow(tmp), sep = \"\"))\n      cytNet <- rbind(cytNet, tmp)\n    }\n  }\n  rownames(cytNet) <- NULL\n\n\n  cytNet <- cbind(Pairs = paste( cytNet[,\"from\"], cytNet[,\"to\"], sep=\",\"),cytNet)\n\n  cytNet <- as.data.frame(cytNet)\n  return (cytNet )\n}\n\n\nCreateMatrixRnaseq <- function(refFile, namesTable,element,speciesID){\n\n\n  namesTable <- as.matrix(namesTable)\n  sampleNum <- nrow(namesTable)\n  colnames(refFile) <- c(\"Gene\",\"Signal\")\n\n  MatrixGE <- matrix(0, nrow=nrow(refFile), ncol=sampleNum)\n  rownames(MatrixGE) <- refFile[,speciesID]\n  colnames(MatrixGE)<-namesTable[,\"Sample\"]\n\n  for (i in 1:sampleNum){\n    FileName <- namesTable[i,\"File.Name\"]\n    sampleTable <- read.delim(as.character(FileName))\n    colnames(sampleTable) <- c(\"Gene\",\"Signal\")\n\n    MatrixGE[,i] <- as.numeric(as.character(sampleTable[,element]))\n    print( paste(\"File n. \",i,\" of \",sampleNum,\" \", FileName, \"...done.\" ))\n  }\n\n  return(MatrixGE)\n}\n\nCreateMatrixRnaseq_RSEM <- function(refFile, namesTable,element,speciesID){\n\n\n  namesTable <- as.matrix(namesTable)\n  sampleNum <- nrow(namesTable)\n  colnames(refFile) <- c(\"Gene\",\"Signal\",\"scaled_estimate\",\"transcript_id\")\n\n  MatrixGE <- matrix(0, nrow=nrow(refFile), ncol=sampleNum)\n  rownames(MatrixGE) <- refFile[,speciesID]\n  colnames(MatrixGE)<-namesTable[,\"Sample\"]\n\n  for (i in 1:sampleNum){\n    FileName <- namesTable[i,\"File.Name\"]\n    sampleTable <- read.delim(as.character(FileName))\n    colnames(sampleTable) <- c(\"Gene\",\"Signal\",\"scaled_estimate\",\"transcript_id\")\n\n    MatrixGE[,i] <- as.numeric(as.character(sampleTable[,element]))\n    print( paste(\"File n. \",i,\" of \",sampleNum,\" \", FileName, \"...done.\" ))\n  }\n\n  return(MatrixGE)\n}\n\nBooleanDifferenceNetwork2 <- function(Net1, Net2, Name1, Name2) {\n\n\n\n  #Net1<-cytLGG\n  #Net2<-cytGBM_newCor\n\n\n  colnames(Net1) <- c(\"from\",\"to\",\"MI\",\"Cor\")\n  colnames(Net2) <- c(\"from\",\"to\",\"MI\",\"Cor\")\n\n  #cytNET1 <- Net1 LGG\n  #cytNET2 <- Net2 gbm\n\n  Net1<-Net1[Net1[,\"from\"] %in% Net2[,\"from\"],]\n\n  rownames(Net2) <- NULL\n  Net2 <- as.data.frame(Net2)\n  Net1 <- as.data.frame(Net1)\n\n  Net1$from <- as.character(Net1$from)\n  Net1$to <- as.character(Net1$to)\n  Net1$MI <- as.numeric(as.character(Net1$MI))\n  Net1$Cor <- as.numeric(as.character(Net1$Cor))\n\n  Net2$from <- as.character(Net2$from)\n  Net2$to <- as.character(Net2$to)\n  Net2$MI <- as.numeric(as.character(Net2$MI))\n  Net2$Cor <- as.numeric(as.character(Net2$Cor))\n\n  #Net1[,\"MI\"] <- 1\n  #Net1[ Net1[,\"Cor\"] >= 0,\"Cor\"] <- 1\n  #Net1[ Net1[,\"Cor\"] < 0,\"Cor\"] <- -1\n\n  colnames(Net2)[3:4] <- c(\"MI_NET2\",\"Cor_NET2\")\n  colnames(Net1)[3:4] <- c(\"MI_NET1\",\"Cor_NET1\")\n\n  pairsNET2<- paste(Net2[,\"from\"],Net2[,\"to\"],sep=\",\")\n  pairsNET1<- paste(Net1[,\"from\"],Net1[,\"to\"],sep=\",\")\n\n  Net1<-cbind(pairsNET1,Net1)\n  Net2<-cbind(pairsNET2,Net2)\n\n  Net1 <- Net1[order(Net1[,\"MI_NET1\"],decreasing=TRUE),]\n  Net2 <- Net2[order(Net2[,\"MI_NET2\"],decreasing=TRUE),]\n\n  Net1<-Net1[!duplicated(Net1[,\"pairsNET1\"]),]\n  Net2<-Net2[!duplicated(Net2[,\"pairsNET2\"]),]\n\n\n\n\n  rownames(Net1)<-NULL\n  rownames(Net2)<-NULL\n\n  Net1[,\"pairsNET1\"] <- as.character(Net1[,\"pairsNET1\"])\n  Net2[,\"pairsNET2\"] <- as.character(Net2[,\"pairsNET2\"])\n\n  Net1 <- Net1 [order(Net1[,\"pairsNET1\"],decreasing=FALSE),]\n  Net2 <- Net2 [order(Net2[,\"pairsNET2\"],decreasing=FALSE),]\n\n\n\n\n  commonPairsNET2_NET1 <- intersect(pairsNET2,pairsNET1)\n  CommonNET2_in_NET1 <- Net2[  Net2[,\"pairsNET2\"] %in% commonPairsNET2_NET1 ,]\n  CommonNET2_in_NET1 <- CommonNET2_in_NET1 [order(CommonNET2_in_NET1[,\"pairsNET2\"],decreasing=FALSE),]\n\n  Net2_NET1<- cbind(CommonNET2_in_NET1,  Net1[  Net1[,\"pairsNET1\"] %in% commonPairsNET2_NET1 ,c(\"MI_NET1\",\"Cor_NET1\")])\n\n  tmpNET2 <-  Net2[!(Net2[,\"pairsNET2\"] %in% commonPairsNET2_NET1), ]\n  tmpNET2 <- cbind(tmpNET2, matrix(0,nrow= nrow(tmpNET2),ncol=2))\n  colnames(tmpNET2) <- colnames(Net2_NET1)\n\n  Net2_NET1 <- rbind(Net2_NET1, tmpNET2)\n\n  tmpNET1 <-  Net1[!(Net1[,\"pairsNET1\"] %in% commonPairsNET2_NET1), ]\n  tmpNET1 <- cbind(tmpNET1[, 1:3], matrix(0,nrow= nrow(tmpNET1),ncol=2), tmpNET1[, 4:5])\n  colnames(tmpNET1) <- colnames(Net2_NET1)\n\n  Net2_NET1 <- rbind(Net2_NET1, tmpNET1)\n\n  Net2_NET1 <- cbind(Net2_NET1, MIdiffNET2_NET1 = Net2_NET1[,\"MI_NET2\"] - Net2_NET1[,\"MI_NET1\"] )\n  Net2_NET1 <- cbind(Net2_NET1, CordiffNET2_NET1 = Net2_NET1[,\"Cor_NET2\"] - Net2_NET1[,\"Cor_NET1\"] )\n\n  Net2_NET1 <- cbind(Net2_NET1, DiffNet = rep(0,nrow(Net2_NET1)))\n\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) ==  1 & sign(Net2_NET1 [,\"Cor_NET1\"]) ==  1, \"DiffNet\"] <- \"=+\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) == -1 & sign(Net2_NET1 [,\"Cor_NET1\"]) == -1, \"DiffNet\"] <- \"=-\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) ==  1 & sign(Net2_NET1 [,\"Cor_NET1\"]) == -1, \"DiffNet\"] <- \"=+-\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) == -1 & sign(Net2_NET1 [,\"Cor_NET1\"]) ==  1, \"DiffNet\"] <- \"=-+\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) ==  1 & sign(Net2_NET1 [,\"Cor_NET1\"]) ==  0, \"DiffNet\"] <- \"1+\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) == -1 & sign(Net2_NET1 [,\"Cor_NET1\"]) ==  0, \"DiffNet\"] <- \"1-\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) ==  0 & sign(Net2_NET1 [,\"Cor_NET1\"]) ==  1, \"DiffNet\"] <- \"2+\"\n  Net2_NET1[sign(Net2_NET1 [,\"Cor_NET2\"]) ==  0 & sign(Net2_NET1 [,\"Cor_NET1\"]) == -1, \"DiffNet\"] <- \"2-\"\n\n\n\n  colnames(Net2_NET1)[1]<-\"pairsTFgene\"\n  colnames(Net2_NET1)[4:5] <- paste(c(\"MI_\",\"Cor_\"),Name2,sep=\"\")\n  colnames(Net2_NET1)[6:7] <- paste(c(\"MI_\",\"Cor_\"),Name1,sep=\"\")\n  colnames(Net2_NET1)[8] <- paste(\"Midiff\",Name2,\"_\",Name1,sep=\"\")\n  colnames(Net2_NET1)[9] <- paste(\"Cordiff\",Name2,\"_\",Name1,sep=\"\")\n  rownames(Net2_NET1) <- NULL\n\n  return(Net2_NET1)\n}\n\nFindTFbootMIthresh <- function(tfListCancer,normCounts,nboot,nGenesPerm,Knum) {\n\n  tfListCancer <- intersect(tfListCancer,rownames(normCounts))\n\n  #normCounts<-normCounts[,SampleS]\n\n  maxmi<-rep(0,length(tfListCancer))\n  Cancer_null_distr<-matrix(0,length(tfListCancer),nboot)\n  rownames(Cancer_null_distr)<-tfListCancer\n  #toSave <- NULL\n  for ( i in 1: nboot){\n    cat(paste( (nboot-i),\".\",sep=\"\"))\n    SampleS <- sample(1:ncol(normCounts))\n    #SampleTF <- sample(1:ncol(normCounts)) #toRemove\n    g <- sample(1:nrow(normCounts), nGenesPerm)\n    #TimeUse(mi <- knnmi.cross(normCounts[tfListCancer, ], normCounts[g, SampleS], k = Knum))\n    if(i == 1) TimeUse(mi <- knnmi.cross(normCounts[tfListCancer, ], normCounts[g, SampleS], k = Knum)) else\n    mi <- knnmi.cross(normCounts[tfListCancer, ], normCounts[g, SampleS], k = Knum)\n\n    maxmiCurr <- apply(mi,1, max)\n    Cancer_null_distr[,i]<-maxmiCurr\n    index<- maxmi < maxmiCurr\n    maxmi[index]<- maxmiCurr[index]\n\n    ####\n    #if(length(which(maxmi > 3)) > 1){\n    #  tmp <- which(maxmi > 3)[1] ok\n    #  toSave <- rbind(toSave, rbind(normCounts[tfListCancer[tmp], , drop = F], normCounts[g[tmp], SampleS, drop = F]))\n    #}\n  }\n  names(maxmi) <- rownames(Cancer_null_distr)\n  return(maxmi)\n  #return(list(maxmi = maxmi, toSave = toSave)) #toRemove\n}\n\nDEA_edge4<- function (TOC,Cond1num,Cond2num,Cond1type,Cond2type) {\n  library(edgeR)\n\n\n  # TOC_sample<-as.matrix(colnames(TOC))\n  #  TOC_sample_cutted<-CutBarcode(TOC_sample,14,15)\n  #  TumorSample<-sum(TOC_sample_cutted==Tumortype)\n  #  NormalSample<-sum(TOC_sample_cutted==Normaltype)\n\n  message1<-paste( \"there are Cond1 type\", Cond1type ,\"in \", Cond1num, \"samples\")\n  print(message1)\n\n  message2<-paste( \"there are Cond2 type\", Cond2type ,\"in \", Cond2num, \"samples\")\n  print(message2)\n\n  message3<-paste( \"there are \", nrow(TOC) ,\"species miRNA or genes \")\n  print(message3)\n\n  timeEstimated<-format(ncol(TOC)*nrow(TOC)/30000,digits=2)\n  messageEstimation<-paste(\"I Need about \", timeEstimated, \"seconds for this DEA. [Processing 30k elements /s]  \")\n  print(messageEstimation)\n\n  # Reading in the data and creating a DGEList object\n  colnames(TOC) <- paste('s',1:ncol(TOC),sep=\"\")\n  #DGE <- DGEList(TOC,group=rep(c(\"Normal\",\"Tumor\"),c(NormalSample,TumorSample)))\n  DGE <- DGEList(TOC,group=rep(c(Cond1type,Cond2type),c(Cond1num,Cond2num)))\n\n  # Analysis using common dispersion\n  disp <- estimateCommonDisp(DGE) # Estimating the common dispersion\n  #tested <- exactTest(disp,pair=c(\"Normal\",\"Tumor\")) # Testing\n  tested <- exactTest(disp,pair=c(Cond1type,Cond2type)) # Testing\n\n  # Results visualization\n  logFC_table <- tested$table\n  logFC_FDR_table <- topTags(tested,n=nrow(tested$table))$table\n  return(logFC_FDR_table)\n}\n\nUQNorm <- function(exprMat, featData){\n  exprMat <- newSeqExpressionSet(exprMat, featureData = featData)\n  message(\"newSeqExpressionSet Done!\")\n  exprMat <- withinLaneNormalization(exprMat, \"geneLength\", which = \"upper\", offset = FALSE)\n  message(\"withinLaneNormalization Done!\")\n  exprMat <- betweenLaneNormalization(exprMat, which = \"upper\", offset = FALSE)\n  message(\"betweenLaneNormalization Done!\")\n  exprMat <- exprs(exprMat)\n\n  return(exprMat)\n}\n\nDEA_edge5<- function (mat1,mat2,Cond1type,Cond2type) {\n  library(edgeR)\n\n  TOC <- cbind(mat1,mat2)\n  Cond1num <- ncol(mat1)\n  Cond2num <- ncol(mat2)\n\n  print(message1<-paste( \"there are Cond1 type\", Cond1type ,\"in \", Cond1num, \"samples\"))\n  print(message2<-paste( \"there are Cond2 type\", Cond2type ,\"in \", Cond2num, \"samples\"))\n  print(message3<-paste( \"there are \", nrow(TOC) ,\"species miRNA or genes \"))\n\n  timeEstimated<-format(ncol(TOC)*nrow(TOC)/30000,digits=2)\n  print(messageEstimation<-paste(\"I Need about \", timeEstimated, \"seconds for this DEA. [Processing 30k elements /s]  \"))\n\n  # Reading in the data and creating a DGEList object\n  colnames(TOC) <- paste('s',1:ncol(TOC),sep=\"\")\n  #DGE <- DGEList(TOC,group=rep(c(\"Normal\",\"Tumor\"),c(NormalSample,TumorSample)))\n  DGE <- DGEList(TOC,group=rep(c(Cond1type,Cond2type),c(Cond1num,Cond2num)))\n\n  # Analysis using common dispersion\n  disp <- estimateCommonDisp(DGE) # Estimating the common dispersion\n  #tested <- exactTest(disp,pair=c(\"Normal\",\"Tumor\")) # Testing\n  tested <- exactTest(disp,pair=c(Cond1type,Cond2type)) # Testing\n\n  # Results visualization\n  logFC_table <- tested$table\n  logFC_FDR_table <- topTags(tested,n=nrow(tested$table))$table\n  return(logFC_FDR_table)\n}\n\nCreateTabLevel<-function(TF_enriched,FC_FDR_table_mRNA,typeCond1,typeCond2,TableCond1,TableCond2,typeOrder) {\n\n  TableLevel<-matrix(0,nrow(TF_enriched),6)\n  TableLevel <- as.data.frame(TableLevel)\n\n  colnames(TableLevel)<-c(\"mRNA\",\"logFC\",\"FDR\",typeCond1,typeCond2,\"Delta\")\n\n\n  TableLevel[,\"mRNA\"]<-TF_enriched\n  Tabfilt<-FC_FDR_table_mRNA[which( rownames(FC_FDR_table_mRNA) %in% TF_enriched),]\n  TableLevel[,\"logFC\"]<- as.numeric(Tabfilt[TF_enriched,][,\"logFC\"])\n  TableLevel[,\"FDR\"]<- as.numeric(Tabfilt[TF_enriched,][,\"FDR\"])\n\n\n  MeanTumor<-matrix(0,nrow(TF_enriched),1)\n  MeanDiffTumorNormal<-matrix(0,nrow(TF_enriched),1)\n\n\n  for( i in 1:nrow(TF_enriched)) {\n    #print(paste(i, \"of\", nrow(TF_enriched),TF_enriched[i]))\n    TableLevel[i,typeCond1]<- mean(TableCond1[rownames(TableCond1) %in%  TF_enriched[i] , ])\n    TableLevel[i,typeCond2]<- mean(TableCond2[rownames(TableCond2) %in%  TF_enriched[i] , ])\n  }\n\n\n  TableLevel[,\"Delta\"] <- as.numeric(abs(TableLevel[,\"logFC\"]) * TableLevel[,typeCond1]  )\n\n  TableLevel<-TableLevel[order( as.numeric(TableLevel[,\"Delta\"]),decreasing=typeOrder),]\n\n  rownames(TableLevel) <-  TableLevel[,\"mRNA\"]\n\n\n  return(TableLevel)\n}\n\ncreateConsensusRegulon <- function(tfList, exprMat, nBootCons = 100, nBootThresh = 100,\n                                   nSelectedSamples, nGenesPerm, k = 3, clrMI = F, aracne = F){\n  require(parmigene)\n  consensusRegulon <- consensusMI <- matrix(0, nrow = length(tfList), ncol = nrow(exprMat))\n  for(i in 1:nBootCons){\n    print(paste(\"boot n=\", i, sep = \"\"))\n    selectedSamples <- sample(1:ncol(exprMat), nSelectedSamples)\n    tmpMI <- CreateMatrixMI_tf_gene(tfList, exprMat[, selectedSamples], kNum = k)\n    if(clrMI == T) {\n      tmpMI <- clr(tmpMI)\n      consensusRegulon <- consensusRegulon + (tmpMI > 0)\n    }else if(aracne == T){\n      tmpMI <- aracne.a(tmpMI)\n      consensusRegulon <- consensusRegulon + (tmpMI > 0)\n    }else{\n      tmpThesh <- FindTFbootMIthresh(tfList, exprMat[, selectedSamples], nboot = nBootThresh, nGenesPerm = nGenesPerm, Knum = k)\n      consensusRegulon <- consensusRegulon + (tmpMI > tmpThesh)\n    }\n    consensusMI <- consensusMI + tmpMI\n  }\n  consensusMI <- consensusMI/nBootCons\n  consensusRegulon <- consensusRegulon/nBootCons\n  ans <- list(consensusRegulon = consensusRegulon, consensusMI = consensusMI)\n}\n\nperformanceIndex <- function(testNet, gsNet){\n  require(minet)\n  ans <- validate(testNet, gsNet)\n\n  nEdges <- ans$tp + ans$fp\n  recall <- ans$tp/(ans$tp + ans$fn)\n  fpr <- ans$fp/(ans$fp + ans$tn)\n  precision <- ans$tp/(ans$tp + ans$fp)\n  precision[is.na(precision)] <- 0\n  accuracy <- (ans$tp + ans$tn)/(ans$tp + ans$fn + ans$fp + ans$tn)\n  Fscore <- 2*(precision*recall)/(precision + recall)\n  Fscore[is.na(Fscore)] <- 0\n\n  ans <- cbind(ans[, 1], nEdges, ans[, -1], recall, fpr, precision,\n               accuracy, Fscore)\n  colnames(ans) <- c(\"Thresh\", \"nEdges\", \"TP\", \"FP\", \"FN\", \"TN\",\n                     \"Recall\", \"FPR\", \"Precision\", \"Accuracy\", \"Fscore\")\n\n  return(ans)\n}\n\nconsNetMain <- function(exprMat, gsEdges, tfList, nBootCons = 100, nBootThresh = 100,\n                        nSelectedSamples, nGenesPerm, k = 3, clrMI = F, aracne = F,\n                        main = \"Net\", plotPath){\n  message(\"Calculating Consensus Net\")\n  netCons <- createConsensusRegulon(tfList, exprMat, nBootCons, nBootThresh,\n                                    nSelectedSamples, nGenesPerm, k, clrMI = clrMI, aracne = aracne)\n\n  message(\"Calculating knnmi Net\")\n  netKnn <- CreateMatrixMI_tf_gene(tfList, exprMat, kNum = k)\n\n  #netConsReg <- netCons$consensusRegulon\n  #if(ncol(netConsReg) != nrow(netConsReg)){\n  #  message(\"Adding nonTF-Genes Interactions\")\n  #  TFtoAdd <- setdiff(colnames(netConsReg), rownames(netConsReg))\n  #  toAdd <- matrix(0, nrow = length(TFtoAdd), ncol = ncol(netConsReg))\n  #  colnames(toAdd) <- colnames(netConsReg)\n  #  rownames(toAdd) <- TFtoAdd\n  #  netConsReg <- rbind(netConsReg, toAdd)\n  #}\n\n  #netKnnReg <- netKnn\n  #if(ncol(netKnnReg) != nrow(netKnnReg)){\n  #  message(\"Adding nonTF-Genes Interactions\")\n  #  TFtoAdd <- setdiff(colnames(netKnnReg), rownames(netKnnReg))\n  #  toAdd <- matrix(0, nrow = length(TFtoAdd), ncol = ncol(netKnnReg))\n  #  colnames(toAdd) <- colnames(netKnnReg)\n  #  rownames(toAdd) <- TFtoAdd\n  #  netKnnReg <- rbind(netKnnReg, toAdd)\n  #}\n\n  gsEdgesLab <- paste(gsEdges[, \"TF\"], gsEdges[, \"Gene\"], sep = \";\")\n  allEdgesLab <- paste(rep(rownames(netKnn), rep(length(colnames(netKnn)), length(rownames(netKnn)))),\n                       rep(colnames(netKnn), length(rownames(netKnn))), sep = \";\")\n  notGSEdgesLab <- setdiff(allEdgesLab, gsEdgesLab)\n  netConsReg <- netCons$consensusRegulon\n  netConsMI <- netCons$consensusMI\n  netKnnReg <- netKnn\n  if(length(notGSEdgesLab) != 0){\n    message(\"Removing non-Gold Standard Interactions\")\n    for(i in 1:length(notGSEdgesLab)){\n      tmp <- unlist(strsplit(notGSEdgesLab[i], \";\"))\n      netConsReg[tmp[1], tmp[2]] <- 0\n      netConsMI[tmp[1], tmp[2]] <- 0\n      netKnnReg[tmp[1], tmp[2]] <- 0\n    }\n  }\n\n  message(\"Create Gold Standard Net\")\n  gsNet <- matrix(0, nrow = nrow(netConsReg), ncol = ncol(netConsReg)) #controllare che ci sia sempre 1 tra le prime interazioni\n  colnames(gsNet) <- rownames(gsNet) <- colnames(netCons$consensusRegulon)\n  for(i in 1:sum(gsEdges[, \"Edge\"]))\n    gsNet[gsEdges[i, \"TF\"], gsEdges[i, \"Gene\"]] <- 1\n\n  message(\"Considering only 100000 Interaction TO DO!!!\")\n\n  message(\"Calculating Performance Index on Consensus Regulon Net\")\n  piNetConsReg <- performanceIndex(netConsReg, gsNet)\n\n  message(\"Calculating Performance Index on Consensus MI Net\")\n  piNetConsMI <- performanceIndex(netConsMI, gsNet)\n\n  message(\"Calculating Performance Index on knnmi Net\")\n  piNetKnnReg <- performanceIndex(netKnnReg, gsNet)\n\n  prName <- paste(plotPath, \"/\", main, \"PRCurve.png\", sep = \"\")\n  png(prName, width = 855, height = 543)\n  plot(piNetConsReg[, \"Recall\"], piNetConsReg[, \"Precision\"], type = \"l\",\n       xlab = \"recall\", ylab = \"precision\", main = \"PR Curve\", col = \"green\",\n       xlim = 0:1, ylim = 0:1)\n  lines(piNetConsMI[, \"Recall\"], piNetConsMI[, \"Precision\"], col = \"red\")\n  lines(piNetKnnReg[, \"Recall\"], piNetKnnReg[, \"Precision\"], col = \"blue\")\n  legend(0.8, 1, legend = c(\"ConsRegNet\", \"ConsMINet\", \"knnNet\"), col = c(\"green\", \"red\", \"blue\"),\n         text.col = c(\"green\", \"red\", \"blue\"), pch = 15)\n  dev.off()\n\n  rocName <- paste(plotPath, \"/\", main, \"ROCCurve.png\", sep = \"\")\n  png(rocName, width = 855, height = 543)\n  plot(piNetConsReg[, \"FPR\"], piNetConsReg[, \"Recall\"], type = \"l\",\n       xlab = \"FP rate\", ylab = \"TP rate\", main = \"ROC Curve\", col = \"green\",\n       xlim = 0:1, ylim = 0:1)\n  lines(piNetConsMI[, \"FPR\"], piNetConsMI[, \"Recall\"], col = \"red\")\n  lines(piNetKnnReg[, \"FPR\"], piNetKnnReg[, \"Recall\"], col = \"blue\")\n  lines(0:1, 0:1, col = \"black\")\n  legend(0.8, 0.6, legend = c(\"ConsRegNet\", \"ConsMINet\", \"knnNet\"), col = c(\"green\", \"red\", \"blue\"),\n         text.col = c(\"green\", \"red\", \"blue\"), pch = 15)\n  dev.off()\n\n  ans <- list(netCons = netCons, netKnn = netKnn, netConsReg = netConsReg,\n              netConsMI = netConsMI, netKnnReg = netKnnReg, gsNet = gsNet,\n              piNetConsReg = piNetConsReg, piNetConsMI = piNetConsMI,\n              piNetKnnReg = piNetKnnReg)\n  return(ans)\n}\n\nevalOtherMethods <- function(net, gsEdges){\n  #gsEdgesLab <- paste(gsEdges[, \"TF\"], gsEdges[, \"Gene\"], sep = \";\")\n  #allEdgesLab <- paste(rep(rownames(net), rep(length(colnames(net)), length(rownames(net)))),\n  #                     rep(colnames(net), length(rownames(net))), sep = \";\")\n  #notGSEdgesLab <- setdiff(allEdgesLab, gsEdgesLab)\n  #if(length(notGSEdgesLab) != 0){\n  #  message(\"Removing non-Gold Standard Interactions\")\n  #  for(i in 1:length(notGSEdgesLab)){\n  #    print(paste(i, \"of\", length(notGSEdgesLab)))\n  #    tmp <- unlist(strsplit(notGSEdgesLab[i], \";\"))\n  #    net[tmp[1], tmp[2]] <- 0\n  #  }\n  #}\n\n  message(\"Create Gold Standard Net\")\n  gsNet <- matrix(0, nrow = nrow(net), ncol = ncol(net)) #controllare che ci sia sempre 1 tra le prime interazioni\n  rownames(gsNet) <- rownames(net)\n  colnames(gsNet) <- colnames(net)\n  for(i in 1:sum(gsEdges[, \"Edge\"])){\n    print(paste(i, \"of\", sum(gsEdges[, \"Edge\"])))\n    gsNet[gsEdges[i, \"TF\"], gsEdges[i, \"Gene\"]] <- 1\n  }\n\n  message(\"Calculating Performance Index\")\n  piNet <- performanceIndex(net, gsNet)\n\n  message(\"Creating Result Table\")\n  GSNodes <- nrow(gsNet)\n  GSEdges <- sum(gsNet)\n  maxFscore <- piNet[which(piNet$Fscore == max(piNet$Fscore)), ]\n  AUROC <- aucDisc(piNet[, \"FPR\"], piNet[, \"Recall\"])\n  AUPR <- aucDisc(piNet[, \"Recall\"], piNet[, \"Precision\"])\n\n  resTab <- cbind(GSNodes = GSNodes, GSEdges = GSEdges, maxFscore,\n                  AUROC = AUROC, AUPR = AUPR)\n\n  ans <- list(piNet = piNet, resTab = resTab)\n  return(ans)\n}\n\nplotPR <- function(piNet, ...){\n  plot(piNet[, \"Recall\"], piNet[, \"Precision\"], type = \"l\",\n       xlab = \"recall\", ylab = \"precision\", main = \"PR Curve\",\n       xlim = 0:1, ylim = 0:1, ...)\n}\n\nplotROC <- function(piNet, ...){\n  plot(piNet[, \"FPR\"], piNet[, \"Recall\"], type = \"l\",\n       xlab = \"FP rate\", ylab = \"TP rate\", main = \"ROC Curve\",\n       xlim = 0:1, ylim = 0:1, ...)\n  lines(0:1, 0:1, col = \"black\")\n}\n\ngnwFileReader <- function(exprMatPath, gsEdgesPath){\n  exprMat <- read.table(exprMatPath, header = T, dec = \",\")\n  exprMat <- t(exprMat)\n  colnames(exprMat) <- paste(\"sample\", 1:ncol(exprMat), sep = \"\")\n\n  gsEdges <- read.table(gsEdgesPath, header = F, dec = \",\", stringsAsFactors = F)\n  colnames(gsEdges) <- c(\"TF\", \"Gene\", \"Edge\")\n\n  tfList <- unique(gsEdges[, \"TF\"])\n\n  ans <- list(exprMat = exprMat, gsEdges = gsEdges, tfList = tfList)\n  return(ans)\n}\n\n## Δx.y1 + 1/2Δx.Δy <- summation of trapezoids\naucDisc <- function(fpr, tpr){\n  f <- cbind(fpr, tpr)\n  f <- f[order(f[, 1], f[, 2]), ]\n  ans <- 0\n  fpr <- f[, 1]\n  tpr <- f[, 2]\n  ans <- sapply(2:length(fpr), function(i){\n    (fpr[i] - fpr[i-1])*tpr[i-1] + 0.5*(fpr[i] - fpr[i-1]) * (tpr[i] - tpr[i-1])})\n  ans <- sum(ans)\n  return(ans)\n}\n\nresTable <- function(exprMat, resNet, main = \"Net\"){\n  nBootSamples <- ceiling(0.8*ncol(exprMat))\n  nBootGenes <- ceiling(0.2*nrow(exprMat))\n  GSNodes <- nrow(resNet$gsNet)\n  GSEdges <- sum(resNet$gsNet)\n  consReg <- resNet$piNetConsReg[which(resNet$piNetConsReg$Fscore == max(resNet$piNetConsReg$Fscore)), ]\n  consMI <- resNet$piNetConsMI[which(resNet$piNetConsMI$Fscore == max(resNet$piNetConsMI$Fscore)), ]\n  knnMI <- resNet$piNetKnnReg[which(resNet$piNetKnnReg$Fscore == max(resNet$piNetKnnReg$Fscore)), ]\n  aurocConsReg <- aucDisc(resNet$piNetConsReg[, \"FPR\"], resNet$piNetConsReg[, \"Recall\"])\n  aurocConsMI <- aucDisc(resNet$piNetConsMI[, \"FPR\"], resNet$piNetConsMI[, \"Recall\"])\n  aurocKnnMI <- aucDisc(resNet$piNetKnnReg[, \"FPR\"], resNet$piNetKnnReg[, \"Recall\"])\n  auprConsReg <- aucDisc(resNet$piNetConsReg[, \"Recall\"], resNet$piNetConsReg[, \"Precision\"])\n  auprConsMI <- aucDisc(resNet$piNetConsMI[, \"Recall\"], resNet$piNetConsMI[, \"Precision\"])\n  auprKnnMI <- aucDisc(resNet$piNetKnnReg[, \"Recall\"], resNet$piNetKnnReg[, \"Precision\"])\n\n  ans <- rbind(consReg = consReg, consMI = consMI, knnMI = knnMI)\n  netType <- rownames(ans)\n  rownames(ans) <- NULL\n  ans <- cbind(Dataset = main, netType = netType, GSNodes = GSNodes,\n               GSEdges = GSEdges, nBootSamples = nBootSamples,\n               nBootGenes = nBootGenes, ans,\n               AUROC = c(aurocConsReg, aurocConsMI, aurocKnnMI),\n               AUPR = c(auprConsReg, auprConsMI, auprKnnMI))\n  ans <- as.data.frame(ans)\n  return(ans)\n}\n\ntoModify <- function(GSA){\n  library(GSA)\n  GSEA_TF_geneset<- GSA.read.gmt(\"/home/PUBLIC/MRA_LGG/c3.all.v4.0.symbols.gmt\")\n\n  GSEA_TF_geneset_GeneSymbol<-matrix(0,length(GSEA_TF_geneset$geneset.descriptions),4)\n  colnames(GSEA_TF_geneset_GeneSymbol)<-c(\"GSName\",\"GSdescription\",\"GSwebDescription\",\"GSgenesymbol\")\n  GSEA_TF_geneset_GeneSymbol[,\"GSName\"]<-GSEA_TF_geneset$geneset.names\n  GSEA_TF_geneset_GeneSymbol[,\"GSdescription\"]<-GSEA_TF_geneset$geneset.descriptions\n\n\n  for( i in 1: length(GSEA_TF_geneset$geneset.descriptions)){\n    Description <- as.character(GSEA_TF_geneset$geneset.descriptions[i])\n    print(Description)\n    if( length(grep(\"www\",Description)) ==1) {\n      tmp<-readLines(url( as.character(Description)))\n      tmp2 <- tmp[grep(\"Brief\",tmp)+1]\n      GSEA_TF_geneset_GeneSymbol[i,\"GSwebDescription\"]<-tmp2\n      print(tmp2)\n\n      if( length(grep(\"matches annotation for\", tmp2))==1 ){\n        tmp3 <- gsub(\":.*$\",\"\",tmp2)\n        tmp4 <- unlist(strsplit(tmp3,\"for \"))[2]\n        GSEA_TF_geneset_GeneSymbol[i,\"GSgenesymbol\"]<-tmp4\n      }\n\n      else if( length(grep(\"which\", tmp2))==1 ){\n        tmp3 <- gsub(\";.*$\", \"\", gsub(\"which\",\"\",tmp2) )\n        tmp4 <- unlist(strsplit(tmp3,\"which \"))[2]\n        GSEA_TF_geneset_GeneSymbol[i,\"GSgenesymbol\"]<-tmp4\n\n      }\n\n    }\n  }\n}\n\nmyParFisher <- function(numberTF, miTFGenes, MI_thresh, fullSign){\n  tf.go <- rownames(miTFGenes)[numberTF]\n\n  allgene <- colnames(miTFGenes)\n\n\n  if(length(MI_thresh) == 1) TFregulon <- names(miTFGenes[tf.go, which(miTFGenes[tf.go, ] > MI_thresh)]) else\n    TFregulon <- names(miTFGenes[tf.go, which(miTFGenes[tf.go, ] > MI_thresh[tf.go])])\n\n#  TFregulon <- names(miTFGenes[tf.go, which(miTFGenes[tf.go, ] > MI_thresh)])\n\n  if(length(TFregulon) > 0){\n    seta <- allgene %in% TFregulon\n    setb <- allgene %in% fullSign\n    ft <- fisher.test(seta, setb)\n    FisherpvalueTF <- ft$p.value\n  } else FisherpvalueTF <- 0\n\n  #ans <- list(TF = tf.go, RegSizeTF = length(TFregulon),\n  #            PVTFDIFF = FisherpvalueTF,\n  #            RegulonTF = paste(TFregulon, collapse = \" \"))\n\n  ans <- list(TF = tf.go, RegSizeTF = length(TFregulon),\n              PVTFDIFF = FisherpvalueTF)\n\n  return (ans)\n}\n\n\nMRAFunc <- function(TF, miTFGenes, MI_thresh, signList, regLength, FDRMRA_thresh){\n  res <- lapply(1:TF, myParFisher, miTFGenes, MI_thresh, signList)\n  Vector <- unlist(rbind(res))\n  MatrixRes <- matrix(Vector, length(Vector)/3, 3, byrow = TRUE)\n  colnames(MatrixRes) <- c(\"TF\", \"RegSizeTF\", \"PVTFDIFF\")\n  MatrixRes <- data.frame(TF = MatrixRes[, \"TF\"],\n                          RegSizeTF = as.numeric(MatrixRes[, \"RegSizeTF\"]),\n                          PVTFDIFF = as.numeric(MatrixRes[, \"PVTFDIFF\"]))\n  FDRTFDIFF <- p.adjust(MatrixRes$PVTFDIFF, method = \"fdr\")\n  MatrixRes <- cbind(MatrixRes, FDRTFDIFF)\n  MatrixRes <- MatrixRes[MatrixRes[, \"RegSizeTF\"] >= regLength, ]\n  MatrixRes <- MatrixRes[order(MatrixRes$FDRTFDIFF), ]\n  MatrixRes <- MatrixRes[MatrixRes[,\"FDRTFDIFF\"] < FDRMRA_thresh, ]\n\n  return(MatrixRes)\n}\n\n\nMasterRegulatorTFgenes<-function(pdiffTF,mi.gene,soglia.gene,regLength,FDRMRA_thresh) {\n  Table_Fisher_TF<-NULL\n  Table_Fisher_Regulon_TF<-NULL\n  tf.go<-as.matrix(rownames(mi.gene))\n  allgene<-colnames(as.matrix(mi.gene))\n  pdiff<-as.character(pdiffTF)\n  tf.go <- tf.go[tf.go %in% allgene]\n  pdiff<-pdiff[pdiff %in% allgene]\n  tf.go<-as.matrix(tf.go)\n  tf.go<-tf.go[!duplicated(tf.go),]\n  i<-1\n  TimeUse(\n    for (ti in tf.go) {\n      if (nchar(ti)!=0) {\n\n        if(length(soglia.gene) == 1) TFregulon<-names(mi.gene[ti,which(mi.gene[ti,]>soglia.gene)]) else\n          TFregulon<-names(mi.gene[ti,which ( as.numeric(mi.gene[ti,]) > soglia.gene[ti] )])\n\n        if (length(TFregulon)>0) {\n          seta<-  allgene %in% TFregulon\n          setb<-  allgene %in% pdiff\n          ft <- fisher.test(seta,setb)\n          if(ft$p.value<0.01) {\n            cat(i,ti,length(TFregulon),ft$p.value,\"\\n\")\n            Table_Fisher_TF<-rbind(Table_Fisher_TF,data.frame(TF=ti,RegSizeTF=length(TFregulon),MIthresh =soglia.gene[ti] , PVTFDIFF=ft$p.value,FDRTFDIFF= p.adjust(ft$p.value,method=\"fdr\"),DIFFSIZE=length(pdiff),INT.TF.DIFF= length(intersect(TFregulon,pdiff))))\n            Table_Fisher_Regulon_TF<-rbind(Table_Fisher_Regulon_TF,data.frame(TF=ti, RegulonTF=paste(TFregulon,collapse=\" \") ))\n          }\n        }\n        i<-i+1\n      }\n    }\n  )\n\n  if( length(Table_Fisher_TF)!=0){\n  Table_Fisher_TF[,\"FDRTFDIFF\"]<-p.adjust( as.numeric(Table_Fisher_TF[,\"PVTFDIFF\"]),method=\"fdr\")\n  Table_Fisher_TF <- Table_Fisher_TF[Table_Fisher_TF[, \"RegSizeTF\"] >= regLength, ]\n  Table_Fisher_TF <- Table_Fisher_TF[order(Table_Fisher_TF[,\"FDRTFDIFF\"], decreasing=FALSE),]\n  Table_Fisher_TF <- Table_Fisher_TF[Table_Fisher_TF[,\"FDRTFDIFF\"] < FDRMRA_thresh, ]\n  }\n  else{Table_Fisher_TF <-0 }\n\n\n  return(Table_Fisher_TF)\n}\n\nMRA_differentConditions2 <- function(MRA_Codel,MRA_Intact,MRA_Wt,LGG_filt_MutCodel,LGG_filt_MutIntact,LGG_filt_Wt,IPAGenes,NumTopMR){\n\n   TF_completeLIST <- as.matrix(as.character(unique(as.matrix(rbind(MRA_Codel[1:NumTopMR,],MRA_Intact[1:NumTopMR,],MRA_Wt[1:NumTopMR,]))[,\"TF\"])))\n\n  tmp<-c(\"TR\",\"Family\",\"RegSizeTF\", \"MIthreshmean\",\"IntTFdiffmean\",\"FDRmean\",\"MeanCodel\",\"MeanIntact\",\"MeanWt\", \"FCcodel\",\"FCintact\",\"FCwt\",\"MRcodel\",\"FDRcodel\",\"MRintact\",\"FDRintact\",\"MRwt\",\n         \"FDRwt\",\"MRsum\",\"Description\")\n  MRA_matrix<-matrix(0,nrow(TF_completeLIST),length(tmp))\n  MRA_matrix<-as.data.frame(MRA_matrix)\n\n  colnames(MRA_matrix) <- tmp\n  rm(tmp)\n\n  numcandidateTF<-nrow(MRA_matrix)\n  #numcandidateTF<-20\n\n  for ( i in 1: numcandidateTF) {\n    print(paste(i, \"of\",nrow(MRA_matrix),\"...\",TF_completeLIST[i],\"done\"))\n    MRA_matrix[i,\"TR\"] <- TF_completeLIST[i]\n    MRA_matrix[i,\"FCwt\"] <-  as.numeric( LGG_filt_Wt[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCintact\"] <-  as.numeric( LGG_filt_MutIntact[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCcodel\"] <-  as.numeric( LGG_filt_MutCodel[TF_completeLIST[i],\"logFC\"])\n\n\n\n    if( length(intersect( toupper( TF_completeLIST[i]) , toupper(rownames(IPAGenes)))!=0)) {\n      MRA_matrix[i,\"Family\"] <- as.character(IPAGenes[ toupper( TF_completeLIST[i]),\"Family\"])\n      MRA_matrix[i,\"Description\"] <- as.character(IPAGenes[ toupper( TF_completeLIST[i]),\"Description\"])}\n\n    if( length(intersect(TF_completeLIST[i], rownames(LGG_filt_MutCodel))) ) {\n      MRA_matrix[i,\"MeanCodel\"]<- mean(LGG_filt_MutCodel[toupper(TF_completeLIST[i]),])\n      MRA_matrix[i,\"MeanIntact\"] <-  mean(LGG_filt_MutIntact[toupper(TF_completeLIST[i]),])\n      MRA_matrix[i,\"MeanWt\"] <- mean(LGG_filt_Wt[toupper(TF_completeLIST[i]),])\n    }\n\n\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Intact))) ){\n      MRA_matrix[i,\"MRintact\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRintact\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRintact\"]<-0}\n\n\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel))) ){\n      MRA_matrix[i,\"MRcodel\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])\n    }\n    else{MRA_matrix[i,\"MRcodel\"]<-0}\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) ){\n      MRA_matrix[i,\"MRwt\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRwt\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n    }\n    else{MRA_matrix[i,\"MRwt\"]<-0}\n\n    MRA_matrix[i,\"MRsum\"] <- as.numeric(sum(as.numeric(MRA_matrix[i,\"MRcodel\"]),as.numeric(MRA_matrix[i,\"MRintact\"]),as.numeric(MRA_matrix[i,\"MRwt\"])))\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Codel)))    )  {\n      # print(\"MRA in 2 (wt and Codel)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])  ,as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])  ))\n      MRA_matrix[i,\"IntTFdiffmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"INT.TF.DIFF\"])  ,as.numeric(MRA_Codel[TF_completeLIST[i],\"INT.TF.DIFF\"])  ))\n      MRA_matrix[i,\"MIthreshmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"MIthresh\"])  ,as.numeric(MRA_Codel[TF_completeLIST[i],\"MIthresh\"])  ))\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Intact)))    )  {\n      # print(\"MRA in 2 (wt and Intact)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])    ))\n      MRA_matrix[i,\"IntTFdiffmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"INT.TF.DIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])    ))\n      MRA_matrix[i,\"MIthreshmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"MIthresh\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"MIthresh\"])    ))\n\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Intact)))    )  {\n      # print(\"MRA in 2 (Codel and Intact)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])  ))\n      MRA_matrix[i,\"IntTFdiffmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"INT.TF.DIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])  ))\n      MRA_matrix[i,\"MIthreshmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"MIthresh\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"MIthresh\"])  ))\n\n    }\n\n\n    if( MRA_matrix[i,\"MRsum\"]==3){\n      MRA_matrix[i,\"IntTFdiffmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],][\"INT.TF.DIFF\"]), as.numeric(MRA_Intact[TF_completeLIST[i],][\"INT.TF.DIFF\"]),as.numeric(MRA_Wt[TF_completeLIST[i],][\"INT.TF.DIFF\"])))\n      MRA_matrix[i,\"MIthreshmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],][\"MIthresh\"]), as.numeric(MRA_Intact[TF_completeLIST[i],][\"MIthresh\"]),as.numeric(MRA_Wt[TF_completeLIST[i],][\"MIthresh\"])))\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"], as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"],as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])))))\n    }\n\n\n\n\n  }\n\n  MRA_matrix[which(MRA_matrix[,\"Family\"]==0),\"Family\"] <- \"unknownFromIPA\"\n  MRA_matrix <- MRA_matrix[order( as.numeric(MRA_matrix[,\"FDRmean\"]), decreasing=F),]\n  #library(xlsx)\n  #write.xlsx2(MRA_matrix,\"MRA_matrix_FC_Ctrl1_5.xls\")\n\n  rownames(MRA_matrix) <- MRA_matrix[,\"TR\"]\n  return(MRA_matrix)\n}\n\nGeneSplitRegulon<-function(Genelist,Sep){\n  RegSplitted<-as.matrix(unlist(strsplit(as.character(Genelist), Sep)))\n\n  return(RegSplitted)\n}\n\nTFpathwaysIPA <- function(topPathways,MRAtableRes,MItfgenes,TFthreshBoot) {\n  setwd(\"/home/PUBLIC/MRA_LGG\")\n  IPAGenes <- read.delim(\"IPA_genes_dataset_summary.txt\")\n  IPAGenes<-IPAGenes[!duplicated(IPAGenes[,\"ID\"]),]\n  rownames(IPAGenes) <- IPAGenes[,\"ID\"]\n  allgene<-IPAGenes[,\"ID\"]\n  current_pathway_from_IPA<-listIPA_pathways[\"Ingenuity.Canonical.Pathways\"] # genes from IPA pathways\n\n  topPathways_tab <- matrix(0,nrow(MRAtableRes),topPathways)\n  colnames(topPathways_tab) <- paste(\"Top Pathway n. \", 1:topPathways,\" of \", topPathways, sep=\"\")\n\n  rownames(topPathways_tab)<-rownames(MRAtableRes)\n  topPathways_tab <- as.data.frame(topPathways_tab)\n\n  for( j in 1:nrow(MRAtableRes)) {\n\n    currentTF <-as.character(rownames(MRAtableRes)[j] )\n    currentTF_regulon <- names(which(MItfgenes [currentTF,] > as.numeric(TFthreshBoot[currentTF])))\n\n    table_pathway_enriched <- matrix(1, nrow(current_pathway_from_IPA),7)\n    colnames(table_pathway_enriched)<-c(\"Pathway\",\"GenesInPathway\",\"Pvalue\",\"FDR\",\"CommonGenesPathway\",\"PercentPathway\",\"PercentRegulon\")\n    table_pathway_enriched <- as.data.frame(table_pathway_enriched)\n\n    print(paste(j,\"of\", nrow(MRAtableRes), currentTF))\n    for( i in 1: nrow(current_pathway_from_IPA)) {\n\n      table_pathway_enriched[i,\"Pathway\"]<- as.character(current_pathway_from_IPA[i,])\n      genes_from_current_pathway_from_IPA<-GeneSplitRegulon(listIPA_pathways[ listIPA_pathways[\"Ingenuity.Canonical.Pathways\"] == as.character(current_pathway_from_IPA[i,]) ,][,\"Molecules\"], \",\")\n      genes_from_currentTF<-toupper(names(which(MItfgenes [currentTF,] > as.numeric(TFthreshBoot[currentTF]))))\n      genes_common_pathway_TFregulon<-as.matrix(intersect(toupper(genes_from_currentTF),toupper(genes_from_current_pathway_from_IPA)))\n\n      if(length(genes_common_pathway_TFregulon)!=0) {\n        current_pathway_commongenes_num<- length(genes_common_pathway_TFregulon)\n\n        seta<-  allgene %in% genes_from_currentTF\n        setb<-  allgene %in% genes_from_current_pathway_from_IPA\n        ft <- fisher.test(seta,setb)\n        FisherpvalueTF<-ft$p.value\n        table_pathway_enriched[i,\"Pvalue\"] <- as.numeric(FisherpvalueTF)\n\n        if(FisherpvalueTF < 0.01){\n          current_pathway_commongenes_percent<-paste(\"(\",format( (current_pathway_commongenes_num/length(genes_from_current_pathway_from_IPA)) *100,digits=2),\"%)\")\n          current_pathway_commongenes_num_with_percent<-gsub(\" \",\"\",paste(current_pathway_commongenes_num, current_pathway_commongenes_percent,\"pv=\",format(FisherpvalueTF,digits=2)))\n          #        print( paste( i, \"... \",current_pathway_from_IPA[i,],\" with\",nrow(genes_from_current_pathway_from_IPA), \"genes... done! Pathway enriched....\",current_pathway_commongenes_num_with_percent ))\n\n\n          table_pathway_enriched[i,\"CommonGenesPathway\"]<- length(genes_common_pathway_TFregulon)\n          table_pathway_enriched[i,\"GenesInPathway\"]<- length(genes_from_current_pathway_from_IPA)\n          table_pathway_enriched[i,\"PercentPathway\"]<-  as.numeric(table_pathway_enriched[i,\"CommonGenesPathway\"]) / as.numeric(table_pathway_enriched[i,\"GenesInPathway\"])  *100\n          table_pathway_enriched[i,\"PercentRegulon\"]<-  as.numeric(table_pathway_enriched[i,\"CommonGenesPathway\"]) / length(genes_from_currentTF)  *100\n\n        } }\n\n\n    }\n    table_pathway_enriched <- table_pathway_enriched[order(table_pathway_enriched[,\"Pvalue\"],decreasing=F),]\n    table_pathway_enriched <-table_pathway_enriched [table_pathway_enriched[,\"Pvalue\"] < 0.01 ,]\n    table_pathway_enriched[,\"FDR\"] <-p.adjust(table_pathway_enriched[,\"Pvalue\"],method=\"fdr\")\n    table_pathway_enriched <-table_pathway_enriched [table_pathway_enriched[,\"FDR\"] < 0.01 ,]\n    table_pathway_enriched <- table_pathway_enriched[order(table_pathway_enriched[,\"FDR\"],decreasing=F),]\n\n    tmp <- table_pathway_enriched[1:topPathways,]\n    #tmp <- paste(tmp[,\"Pathway\"],\"; FDR= \", format(tmp[,\"FDR\"],digits=3),\"; (ng=\"   ,round(tmp[,\"GenesInPathway\"]),\";\", format(tmp[,\"PercentPathway\"],digits=2), \"%;\",format(tmp[,\"PercentRegulon\"],digits=2), \"%)\",sep=\"\")\n    tmp <- paste(tmp[,\"Pathway\"],\"; FDR= \", format(tmp[,\"FDR\"],digits=3),\"; (ng=\"   ,round(tmp[,\"GenesInPathway\"]),\"); (ncommon=\", format(tmp[,\"CommonGenesPathway\"],digits=2), \")\" ,sep=\"\")\n    tmp <-as.matrix(tmp)\n\n    #\n    topPathways_tab[j,] <- tmp\n    rm(tmp)\n\n\n  }\n  return(topPathways_tab)\n}\n\nFindFamilyInGenes <- function(MRA_table,MI_matrix,MI_threshold,IPAGenes) {\n\n\n\n  rownames(MRA_table) <- toupper(rownames(MRA_table) )\n  rownames(IPAGenes) <- toupper(rownames(IPAGenes) )\n  rownames(MI_matrix) <- toupper(rownames(MI_matrix) )\n\n\n\nIPAGenes <- IPAGenes[ !duplicated(IPAGenes[, \"Gene\"]),]\nrownames(IPAGenes) <- IPAGenes[, \"Gene\"]\nIPAFamilies <- unique(IPAGenes[,\"Family\"])\n\nMatnewColumns<-   c(\"Regulon\",\"unkwownForIPA\", as.character(as.matrix(IPAFamilies)))\n\nMatnew <- matrix(0,nrow(MRA_table), length(MatnewColumns))\ncolnames(Matnew)<- MatnewColumns\nrownames(Matnew)<- rownames(MRA_table)\n\nfor( i in 1:nrow( MRA_table)) {\n\n  currentTF <-rownames(MRA_table)[i]\n  currentTF_regulon <- names(which(MI_matrix[currentTF,] > MI_threshold[currentTF]))\n  Matnew[currentTF,\"Regulon\"] <- as.numeric(length(currentTF_regulon))\n\n  tmp2 <- IPAGenes[IPAGenes[,\"ID\"] %in% currentTF_regulon,\"Family\"]\n  tmp3 <- table(tmp2)\n  Matnew[currentTF,names(tmp3)] <-tmp3\n\n  Matnew[currentTF,\"unkwownForIPA\"] <-  Matnew[currentTF,\"Regulon\"] - sum(as.numeric(table(tmp2)))\n\n  print(paste(i,\"of\",nrow(MRA_table),currentTF,\"with genes in Regulon\",length(currentTF_regulon) ))\n}\nreturn(Matnew)\n}\n\nMRA_differentConditions3 <- function(MRA_Codel,MRA_Intact,MRA_Wt,LGG_filt_MutCodel,LGG_filt_MutIntact,LGG_filt_Wt, MRA_Codel_VS_Intact, MRA_Codel_VS_WT, MRA_WT_VS_Intact,  DiffCodel_Vs_Intact,DiffCodel_Vs_WT,Diffwt_Vs_Intact,   DataCodel,DataIntact,DataWt,IPAGenes,NumTopMR){\n  TF_completeLIST <- as.matrix(as.character(unique(as.matrix(rbind(MRA_Codel[1:NumTopMR,],MRA_Intact[1:NumTopMR,],MRA_Wt[1:NumTopMR,]))[,\"TF\"])))\n\n  tmp<-c(\"TR\",\"Family\",\"RegSizeTF\", \"MIthresh\",\"IntTFdiffCodel_ot\",\"IntTFdiffWt_ot\",\"IntTFdiffIntact_ot\",\"IntTFdiffCodel_Intact\",\"IntTFdiffCodel_WT\",\"IntTFdiffWT_Intact\",\"FDRmean\",\"MeanCodel\",\"MeanIntact\",\"MeanWt\",\"FCcodel_ot\",\"FCintact_ot\",\"FCwt_ot\",\"FCcodel_wt\",\"FCcodel_intact\", \"FCwt_intact\", \"FDRcodel_ot\",\"FDRintact_ot\",\"FDRwt_ot\", \"FDRcodel_wt\",\"FDRcodel_intact\", \"FDRwt_intact\" ,\"MRcodel_ot\", \"MRwt_ot\", \"MRintact_ot\", \"MRcodel_wt\",\"MRcodel_intact\", \"MRwt_intact\", \"MRsum\",\"Description\")\n  MRA_matrix<-matrix(0,nrow(TF_completeLIST),length(tmp))\n  MRA_matrix<-as.data.frame(MRA_matrix)\n\n  colnames(MRA_matrix) <- tmp\n  rm(tmp)\n\n  numcandidateTF<-nrow(MRA_matrix)\n\n  for ( i in 1: numcandidateTF) {\n    print(paste(i, \"of\",nrow(MRA_matrix),\"...\",TF_completeLIST[i],\"done\"))\n    MRA_matrix[i,\"TR\"] <- TF_completeLIST[i]\n    MRA_matrix[i,\"FCwt_ot\"] <-  as.numeric( LGG_filt_Wt[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCintact_ot\"] <-  as.numeric( LGG_filt_MutIntact[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCcodel_ot\"] <-  as.numeric( LGG_filt_MutCodel[TF_completeLIST[i],\"logFC\"])\n\n    MRA_matrix[i,\"FCcodel_wt\"] <-  as.numeric( DiffCodel_Vs_WT[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCcodel_intact\"] <-  as.numeric( DiffCodel_Vs_Intact[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCwt_intact\"] <-  as.numeric( Diffwt_Vs_Intact[TF_completeLIST[i],\"logFC\"])\n\n\n\n\n    MRA_matrix[i,\"MeanCodel\"]<- round(mean(DataCodel[toupper(TF_completeLIST[i]),]))\n    MRA_matrix[i,\"MeanIntact\"] <-  round(mean(DataIntact[toupper(TF_completeLIST[i]),]))\n    MRA_matrix[i,\"MeanWt\"] <- round(mean(DataWt[toupper(TF_completeLIST[i]),]))\n\n\n    if( length(intersect( toupper( TF_completeLIST[i]) , toupper(rownames(IPAGenes)))!=0)) {\n      MRA_matrix[i,\"Family\"] <- as.character(IPAGenes[ toupper( TF_completeLIST[i]),\"Family\"])\n      MRA_matrix[i,\"Description\"] <- as.character(IPAGenes[ toupper( TF_completeLIST[i]),\"Description\"])}\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Intact))) ){\n      MRA_matrix[i,\"MRintact_ot\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRintact_ot\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffIntact_ot\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRintact_ot\"]<-0\n         MRA_matrix[i,\"FDRintact_ot\"] <-  1\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel))) ){\n      MRA_matrix[i,\"MRcodel_ot\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel_ot\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffCodel_ot\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"INT.TF.DIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRcodel_ot\"]<-0\n         MRA_matrix[i,\"FDRcodel_ot\"] <-  1\n    }\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) ){\n      MRA_matrix[i,\"MRwt_ot\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRwt_ot\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffWt_ot\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"INT.TF.DIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRwt_ot\"]<-0\n         MRA_matrix[i,\"FDRwt_ot\"] <-  1\n    }\n\n\n\n\n\n\n\n    ######### singolar comparison\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel_VS_Intact))) ){\n      MRA_matrix[i,\"MRcodel_intact\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel_intact\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffCodel_Intact\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])\n    }\n    else{MRA_matrix[i,\"MRcodel_intact\"]<-0\n         MRA_matrix[i,\"FDRcodel_intact\"] <-  1\n    }\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel_Vs_Wt))) ){\n      MRA_matrix[i,\"MRcodel_wt\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel_wt\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffCodel_WT\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"INT.TF.DIFF\"])\n    }\n    else{MRA_matrix[i,\"MRcodel_wt\"]<-0\n         MRA_matrix[i,\"FDRcodel_wt\"] <-  1\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_WT_VS_Intact))) ){\n      MRA_matrix[i,\"MRwt_intact\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRwt_intact\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffWT_Intact\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])\n    }\n    else{MRA_matrix[i,\"MRwt_intact\"]<-0\n         MRA_matrix[i,\"FDRwt_intact\"] <-  1\n    }\n\n    ##### end singolar comparison\n\n\n\n\n\n\n\n    MRA_matrix[i,\"MRsum\"] <- as.numeric(sum(as.numeric(MRA_matrix[i,\"MRcodel_ot\"]),as.numeric(MRA_matrix[i,\"MRintact_ot\"]),as.numeric(MRA_matrix[i,\"MRwt_ot\"]),\n                                            as.numeric(MRA_matrix[i,\"MRcodel_wt\"]),as.numeric(MRA_matrix[i,\"MRcodel_intact\"]),as.numeric(MRA_matrix[i,\"MRwt_intact\"])))\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Codel)))    )  {\n      # print(\"MRA in 2 (wt and Codel)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])  ,as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])  ))\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Intact)))    )  {\n      # print(\"MRA in 2 (wt and Intact)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])    ))\n\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Intact)))    )  {\n      # print(\"MRA in 2 (Codel and Intact)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])  ))\n\n    }\n\n\n    if( MRA_matrix[i,\"MRsum\"]==6){\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]) ))\n    }\n\n\n\n  }\n\n  MRA_matrix[which(MRA_matrix[,\"Family\"]==0),\"Family\"] <- \"unknownFromIPA\"\n  MRA_matrix[which( is.na(MRA_matrix[,\"Family\"])),\"Family\"] <- \"unknownFromIPA\"\n\n  MRA_matrix[which(MRA_matrix[,\"Description\"]==0),\"Description\"] <- \"unknownFromIPA\"\n  MRA_matrix[which( is.na(MRA_matrix[,\"Description\"])),\"Description\"] <- \"unknownFromIPA\"\n\n\n  MRA_matrix <- MRA_matrix[order( as.numeric(MRA_matrix[,\"MRsum\"]), decreasing=T),]\n  # MRA_matrix <- MRA_matrix[order( as.numeric(MRA_matrix[,\"FDRmean\"]), decreasing=F),]\n\n\n  rownames(MRA_matrix) <- MRA_matrix[,\"TR\"]\n\n  return(MRA_matrix)\n}\n\nConvertKeggXml<-function(NameFile){  tabl <- read.table(NameFile,sep=\"\\n\",as.is=T)\n  indx <- with(tabl, grepl(\"graphics\",V1))\n  tabl <- tabl[indx,]\n  tabl <- gsub(\"<graphics|name=|[fb]gcolor=#[0-9A-F]{6}| +|\\\\.\\\\.\\\\.\",\"\",tabl)\n  tabl <- unlist(strsplit(tabl,\",\"))\n  return (tabl)\n}\n\nMRATF_pathways <- function(MRA_table,Glioma_pathways, MImMatrix ,MIthreshold,listIPA_pathways,IPAGenes){\n\n  rownames(MRA_table) <- toupper(rownames(MRA_table) )\n  rownames(IPAGenes) <- toupper(rownames(IPAGenes) )\n  rownames(MImMatrix) <- toupper(rownames(MImMatrix) )\n\n  MRA_TF_in_pathways <- matrix(0,nrow(MRA_table), (length(Glioma_pathways) +3 ) )\n  colnames(MRA_TF_in_pathways)<- c(\"Family\",\"RegSizeTF\",\"Mean\" , Glioma_pathways)\n  rownames(MRA_TF_in_pathways)<- rownames(MRA_table)\n  MRA_TF_in_pathways <- as.data.frame(MRA_TF_in_pathways)\n\n  for( i in 1:nrow( MRA_table)) {\n    currentTF <-rownames(MRA_table)[i]\n    currentTF_regulon <- names(which(MImMatrix[currentTF,] > MIthreshold[currentTF]))\n    MRA_TF_in_pathways[currentTF,\"RegSizeTF\"] <- length(currentTF_regulon)\n\n    if( length(intersect( toupper( currentTF ) , toupper(rownames(IPAGenes)))!=0)) {\n      MRA_TF_in_pathways[currentTF,\"Family\"] <- as.character(IPAGenes[ toupper( currentTF),\"Family\"])\n    }\n\n    else {  MRA_TF_in_pathways[currentTF,\"Family\"] <- \"unknownFromIPA\"  }\n\n     print(paste(i,\"of\",nrow(MRA_table),currentTF,\"with genes in Regulon\",length(currentTF_regulon) ))\n\n    for( j in 1: nrow(Glioma_pathways) )   {\n      genes_from_current_pathway_from_IPA<-GeneSplitRegulon(listIPA_pathways[ listIPA_pathways[\"Ingenuity.Canonical.Pathways\"] == as.character(Glioma_pathways[j]) ,][,\"Molecules\"], \",\")\n      genes_common_pathway_TFregulon<-as.matrix(intersect(toupper(currentTF_regulon),toupper(genes_from_current_pathway_from_IPA)))\n      # MRA_TF_in_pathways[currentTF,Glioma_pathways[j]]  <- as.numeric(length(genes_common_pathway_TFregulon))\n      MRA_TF_in_pathways[currentTF,Glioma_pathways[j]]  <- round(as.numeric(  length(genes_common_pathway_TFregulon) / length(genes_from_current_pathway_from_IPA  ) ),3) *100\n    }\n    MRA_TF_in_pathways[currentTF,\"Mean\"] <- round(mean( as.numeric(MRA_TF_in_pathways[currentTF, Glioma_pathways]) ),3)\n  }\n  MRA_TF_in_pathways<-MRA_TF_in_pathways[order( as.numeric(MRA_TF_in_pathways[,\"Mean\"]),decreasing=T),]\n\n  colnamesTmp <- colnames(MRA_TF_in_pathways)\n  colnamesTmp <-   gsub(\" Signaling\",\"\",colnamesTmp)\n  colnamesTmp <-   gsub(\"Checkpoint Regulation\",\"\",colnamesTmp)\n  colnamesTmp <-   gsub(\"DNA Damage \",\"\",colnamesTmp)\n  colnames(MRA_TF_in_pathways) <- colnamesTmp\n\n\n  return( MRA_TF_in_pathways)\n}\n\nMRATF_numberTF <- function(MRA_table, MImMatrix ,MIthreshold,IPAGenes){\n\n\n\n\n  rownames(MRA_table) <- toupper(rownames(MRA_table) )\n  rownames(IPAGenes) <- toupper(rownames(IPAGenes) )\n  rownames(MImMatrix) <- toupper(rownames(MImMatrix) )\n\n  #### how many tf in TF'r regulon #####\nIPAGenes <- IPAGenes[ !duplicated(IPAGenes[, \"Gene\"]),]\nrownames(IPAGenes) <- toupper(IPAGenes[, \"Gene\"])\nIPAFamilies <- unique(IPAGenes[,\"Family\"])\n\nMatnewColumns<-   c(\"Family\",\"Regulon\",\"unkwownForIPA\", as.character(as.matrix(IPAFamilies)))\n\nMatnew <- matrix(0,nrow(MRA_table), length(MatnewColumns))\ncolnames(Matnew)<- MatnewColumns\nrownames(Matnew)<- rownames(MRA_table)\n\n  Matnew<-as.data.frame(Matnew)\n\nfor( i in 1:nrow( MRA_table)) {\n  currentTF <-rownames(MRA_table)[i]\n  currentTF_regulon <- names(which(MImMatrix[currentTF,] > MIthreshold[currentTF]))\n\n\n  if( length(intersect( toupper( currentTF ) , toupper(rownames(IPAGenes)))!=0)) {\n    Matnew[currentTF,\"Family\"] <- as.character(IPAGenes[ toupper( currentTF),\"Family\"])\n  }\n\n  else {  Matnew[currentTF,\"Family\"] <- \"unknownFromIPA\"  }\n\n\n\n  Matnew[currentTF,\"Regulon\"] <- as.numeric(length(currentTF_regulon))\n  tmp2 <- IPAGenes[IPAGenes[,\"ID\"] %in% currentTF_regulon,\"Family\"]\n  tmp3 <- table(tmp2)\n  Matnew[currentTF,names(tmp3)] <-tmp3\n  #Matnew[currentTF,\"unkwownForIPA\"] <-  Matnew[currentTF,\"Regulon\"] - sum(as.numeric(table(tmp2)))\n  print(paste(i,\"of\",nrow(MRA_table),currentTF,\"with genes in Regulon\",length(currentTF_regulon) ))\n}\n\n\nMatnew<-Matnew[order( as.numeric(Matnew[,\"transcription regulator\"]),decreasing=T),]\nreturn(Matnew)\n}\n\nMRA_differentConditions4 <- function(MRA_Codel,MRA_Intact,MRA_Wt,LGG_filt_MutCodel,LGG_filt_MutIntact,LGG_filt_Wt, MRA_Codel_VS_Intact, MRA_Codel_VS_WT, MRA_WT_VS_Intact,  DiffCodel_Vs_Intact,DiffCodel_Vs_WT,Diffwt_Vs_Intact,   DataCodel,DataIntact,DataWt,IPAGenes,NumTopMR){\n\n\n  if( NumTopMR!=0) {\n  TF_completeLIST <- as.matrix(as.character(unique(as.matrix(rbind(MRA_Codel[1:NumTopMR,],MRA_Intact[1:NumTopMR,],MRA_Wt[1:NumTopMR,]))[,\"TF\"])))\n  }\n  else{TF_completeLIST <- as.matrix(as.character(unique(as.matrix(rbind(MRA_Codel,MRA_Intact,MRA_Wt,MRA_Codel_VS_Intact,MRA_Codel_VS_WT,MRA_WT_VS_Intact))[,\"TF\"])))  }\n\n\n  tmp<-c(\"TR\",\"Family\",\"RegSizeTF\", \"MIthresh\",\"IntTFdiffCodel_ot\",\"IntTFdiffWt_ot\",\"IntTFdiffIntact_ot\",\"IntTFdiffCodel_Intact\",\"IntTFdiffCodel_WT\",\"IntTFdiffWT_Intact\",\"FDRmean\",\"MeanCodel\",\"MeanIntact\",\"MeanWt\",\"FCcodel_ot\",\"FCintact_ot\",\"FCwt_ot\",\"FCcodel_wt\",\"FCcodel_intact\", \"FCwt_intact\", \"FDRcodel_ot\",\"FDRintact_ot\",\"FDRwt_ot\", \"FDRcodel_wt\",\"FDRcodel_intact\", \"FDRwt_intact\" ,\"MRcodel_ot\", \"MRwt_ot\", \"MRintact_ot\", \"MRcodel_wt\",\"MRcodel_intact\", \"MRwt_intact\", \"MRsum\",\"Description\")\n  MRA_matrix<-matrix(0,nrow(TF_completeLIST),length(tmp))\n  MRA_matrix<-as.data.frame(MRA_matrix)\n\n  colnames(MRA_matrix) <- tmp\n  rm(tmp)\n\n  numcandidateTF<-nrow(MRA_matrix)\n\n  for ( i in 1: numcandidateTF) {\n    print(paste(i, \"of\",nrow(MRA_matrix),\"...\",TF_completeLIST[i],\"done\"))\n    MRA_matrix[i,\"TR\"] <- TF_completeLIST[i]\n    MRA_matrix[i,\"FCwt_ot\"] <-  as.numeric( LGG_filt_Wt[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCintact_ot\"] <-  as.numeric( LGG_filt_MutIntact[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCcodel_ot\"] <-  as.numeric( LGG_filt_MutCodel[TF_completeLIST[i],\"logFC\"])\n\n    MRA_matrix[i,\"FCcodel_wt\"] <-  as.numeric( DiffCodel_Vs_WT[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCcodel_intact\"] <-  as.numeric( DiffCodel_Vs_Intact[TF_completeLIST[i],\"logFC\"])\n    MRA_matrix[i,\"FCwt_intact\"] <-  as.numeric( Diffwt_Vs_Intact[TF_completeLIST[i],\"logFC\"])\n\n\n\n\n    MRA_matrix[i,\"MeanCodel\"]<- round(mean(DataCodel[toupper(TF_completeLIST[i]),]))\n    MRA_matrix[i,\"MeanIntact\"] <-  round(mean(DataIntact[toupper(TF_completeLIST[i]),]))\n    MRA_matrix[i,\"MeanWt\"] <- round(mean(DataWt[toupper(TF_completeLIST[i]),]))\n\n\n    if( length(intersect( toupper( TF_completeLIST[i]) , toupper(rownames(IPAGenes)))!=0)) {\n      MRA_matrix[i,\"Family\"] <- as.character(IPAGenes[ toupper( TF_completeLIST[i]),\"Family\"])\n      MRA_matrix[i,\"Description\"] <- as.character(IPAGenes[ toupper( TF_completeLIST[i]),\"Description\"])}\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Intact))) ){\n      MRA_matrix[i,\"MRintact_ot\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRintact_ot\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffIntact_ot\"] <-  as.numeric(MRA_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRintact_ot\"]<-0\n         MRA_matrix[i,\"FDRintact_ot\"] <-  1\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel))) ){\n      MRA_matrix[i,\"MRcodel_ot\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel_ot\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffCodel_ot\"] <-  as.numeric(MRA_Codel[TF_completeLIST[i],\"INT.TF.DIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRcodel_ot\"]<-0\n         MRA_matrix[i,\"FDRcodel_ot\"] <-  1\n    }\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) ){\n      MRA_matrix[i,\"MRwt_ot\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRwt_ot\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffWt_ot\"] <-  as.numeric(MRA_Wt[TF_completeLIST[i],\"INT.TF.DIFF\"])\n\n    }\n    else{MRA_matrix[i,\"MRwt_ot\"]<-0\n         MRA_matrix[i,\"FDRwt_ot\"] <-  1\n    }\n\n\n\n\n\n\n\n    ######### singolar comparison\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel_VS_Intact))) ){\n      MRA_matrix[i,\"MRcodel_intact\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel_intact\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffCodel_Intact\"] <-  as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])\n    }\n    else{MRA_matrix[i,\"MRcodel_intact\"]<-0\n         MRA_matrix[i,\"FDRcodel_intact\"] <-  1\n    }\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel_Vs_Wt))) ){\n      MRA_matrix[i,\"MRcodel_wt\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRcodel_wt\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffCodel_WT\"] <-  as.numeric(MRA_Codel_Vs_Wt[TF_completeLIST[i],\"INT.TF.DIFF\"])\n    }\n    else{MRA_matrix[i,\"MRcodel_wt\"]<-0\n         MRA_matrix[i,\"FDRcodel_wt\"] <-  1\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_WT_VS_Intact))) ){\n      MRA_matrix[i,\"MRwt_intact\"]<-1\n      MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"RegSizeTF\"])\n      MRA_matrix[i,\"FDRwt_intact\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"FDRmean\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])\n      MRA_matrix[i,\"MIthresh\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"MIthresh\"])\n      MRA_matrix[i,\"IntTFdiffWT_Intact\"] <-  as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"INT.TF.DIFF\"])\n    }\n    else{MRA_matrix[i,\"MRwt_intact\"]<-0\n         MRA_matrix[i,\"FDRwt_intact\"] <-  1\n    }\n\n    ##### end singolar comparison\n\n\n\n\n\n\n\n    MRA_matrix[i,\"MRsum\"] <- as.numeric(sum(as.numeric(MRA_matrix[i,\"MRcodel_ot\"]),as.numeric(MRA_matrix[i,\"MRintact_ot\"]),as.numeric(MRA_matrix[i,\"MRwt_ot\"]),\n                                            as.numeric(MRA_matrix[i,\"MRcodel_wt\"]),as.numeric(MRA_matrix[i,\"MRcodel_intact\"]),as.numeric(MRA_matrix[i,\"MRwt_intact\"])))\n\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Codel)))    )  {\n      # print(\"MRA in 2 (wt and Codel)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"])  ,as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"])  ))\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Wt))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Intact)))    )  {\n      # print(\"MRA in 2 (wt and Intact)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])    ))\n\n    }\n\n    if( length(intersect(TF_completeLIST[i], rownames(MRA_Codel))) &  length(intersect(TF_completeLIST[i], rownames(MRA_Intact)))    )  {\n      # print(\"MRA in 2 (Codel and Intact)\")\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"]),  as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"])  ))\n\n    }\n\n\n    if( MRA_matrix[i,\"MRsum\"]==6){\n      MRA_matrix[i,\"FDRmean\"] <- mean( c( as.numeric(MRA_Codel[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_Wt[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_Codel_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]),\n                                          as.numeric(MRA_WT_VS_Intact[TF_completeLIST[i],\"FDRTFDIFF\"]) ))\n    }\n\n\n\n  }\n\n  MRA_matrix[which(MRA_matrix[,\"Family\"]==0),\"Family\"] <- \"unknownFromIPA\"\n  MRA_matrix[which( is.na(MRA_matrix[,\"Family\"])),\"Family\"] <- \"unknownFromIPA\"\n\n  MRA_matrix[which(MRA_matrix[,\"Description\"]==0),\"Description\"] <- \"unknownFromIPA\"\n  MRA_matrix[which( is.na(MRA_matrix[,\"Description\"])),\"Description\"] <- \"unknownFromIPA\"\n\n\n  MRA_matrix <- MRA_matrix[order( as.numeric(MRA_matrix[,\"MRsum\"]), decreasing=T),]\n  # MRA_matrix <- MRA_matrix[order( as.numeric(MRA_matrix[,\"FDRmean\"]), decreasing=F),]\n\n\n  rownames(MRA_matrix) <- MRA_matrix[,\"TR\"]\n\n  return(MRA_matrix)\n}\n\nMRATF_DadidBP <- function(MRA_table,listGO, MImMatrix ,MIthreshold,DAVID_BP_matrix,IPAGenes){\n\n\n  rownames(MRA_table) <- toupper(rownames(MRA_table) )\n  rownames(IPAGenes) <- toupper(rownames(IPAGenes) )\n  rownames(MImMatrix) <- toupper(rownames(MImMatrix) )\n  allgene <- rownames(MImMatrix)\n\n  MRA_TF_in_GO <- matrix(0,nrow(MRA_table), (length(listGO) +3 ) )\n  colnames(MRA_TF_in_GO)<- c(\"Family\",\"RegSizeTF\",\"Mean\" , listGO)\n  rownames(MRA_TF_in_GO)<- rownames(MRA_table)\n  MRA_TF_in_GO <- as.data.frame(MRA_TF_in_GO)\n\n  for( i in 1:nrow( MRA_table)) {\n    currentTF <-rownames(MRA_table)[i]\n    currentTF_regulon <- names(which(MImMatrix[currentTF,] > MIthreshold[currentTF]))\n    MRA_TF_in_GO[currentTF,\"RegSizeTF\"] <- length(currentTF_regulon)\n\n    if( length(intersect( toupper( currentTF ) , toupper(rownames(IPAGenes)))!=0)) {\n      MRA_TF_in_GO[currentTF,\"Family\"] <- as.character(IPAGenes[ toupper( currentTF),\"Family\"])\n    }\n\n    else {  MRA_TF_in_GO[currentTF,\"Family\"] <- \"unknownFromIPA\"  }\n\n    print(paste(i,\"of\",nrow(MRA_table),currentTF,\"with genes in Regulon\",length(currentTF_regulon) ))\n\n    for( j in 1: nrow(listGO) )   {\n    #  genes_from_currentTF<-toupper(names(which(MImMatrix [currentTF,] > as.numeric(MIthreshold[currentTF]))))\n      genes_from_current_GO_from_IPA<-GeneSplitRegulon(DAVID_BP_matrix[ DAVID_BP_matrix[\"DavidBP\"] == as.character(listGO[j]) ,][,\"Molecules\"], \", \")\n      genes_common_GO_TFregulon<-as.matrix(intersect(toupper(currentTF_regulon),toupper(genes_from_current_GO_from_IPA)))\n\n\n    if(length(genes_common_GO_TFregulon)!=0) {\n      current_GO_commongenes_num<- length(genes_common_GO_TFregulon)\n      seta<-  allgene %in% currentTF_regulon\n      setb<-  allgene %in% genes_from_current_GO_from_IPA\n      ft <- fisher.test(seta,setb)\n      FisherpvalueTF<-ft$p.value\n      #table_GO_enriched[i,\"Pvalue\"] <- as.numeric(FisherpvalueTF)\n\n      if(FisherpvalueTF < 0.01){\n        #current_GO_commongenes_percent<-paste(\"(\",format( (current_GO_commongenes_num/length(genes_from_current_GO_from_IPA)) *100,digits=2),\"%)\")\n        MRA_TF_in_GO[currentTF,listGO[j]]  <- paste(\"Ng=\",as.numeric(length(genes_common_GO_TFregulon)), \"pval=\", FisherpvalueTF)\n      }\n    # MRA_TF_in_GO[currentTF,listGO[j]]  <- round(as.numeric(  length(genes_common_GO_TFregulon) / length(genes_from_current_GO_from_IPA  ) ),3) *100\n    }\n    }\n\n\n    MRA_TF_in_GO[currentTF,\"Mean\"] <- round(mean( as.numeric(MRA_TF_in_GO[currentTF, listGO]) ),3)\n  }\n  MRA_TF_in_GO<-MRA_TF_in_GO[order( as.numeric(MRA_TF_in_GO[,\"Mean\"]),decreasing=T),]\n\n  #colnamesTmp <- colnames(MRA_TF_in_GO)\n  #colnamesTmp <-   gsub(\" Signaling\",\"\",colnamesTmp)\n  #colnamesTmp <-   gsub(\"Checkpoint Regulation\",\"\",colnamesTmp)\n  #colnamesTmp <-   gsub(\"DNA Damage \",\"\",colnamesTmp)\n  #colnames(MRA_TF_in_GO) <- colnamesTmp\n  return( MRA_TF_in_GO)\n}\n\nTFGO_David2 <- function(topPathways,MRAtableRes,MItfgenes,TFthreshBoot, DAVID_BP_matrix,IPAGenes,GOtype) {\n\n  rownames(MRAtableRes) <- toupper(rownames(MRAtableRes) )\n  rownames(IPAGenes) <- toupper(rownames(IPAGenes) )\n  rownames(MItfgenes) <- toupper(rownames(MItfgenes) )\n\n  IPAGenes<-IPAGenes[!duplicated(IPAGenes[,\"ID\"]),]\n  rownames(IPAGenes) <- IPAGenes[,\"ID\"]\n  allgene<-IPAGenes[,\"ID\"]\n  current_pathway_from_IPA<- as.matrix(DAVID_BP_matrix[,GOtype]) # genes from IPA pathways\n\n\n  topPathways_tab <- matrix(0,nrow(MRAtableRes),topPathways)\n  TableNames <- gsub(\"David\",\"\",paste(\"Top \", GOtype, \" n. \", 1:topPathways,\" of \", topPathways, sep=\"\"))\n\n  colnames(topPathways_tab) <- TableNames\n\n  rownames(topPathways_tab)<-rownames(MRAtableRes)\n  topPathways_tab <- as.data.frame(topPathways_tab)\n\n  for( j in 1:nrow(MRAtableRes)) {\n\n    currentTF <-as.character(rownames(MRAtableRes)[j] )\n    currentTF_regulon <- names(which(MItfgenes [currentTF,] > as.numeric(TFthreshBoot[currentTF])))\n\n    table_pathway_enriched <- matrix(1, nrow(current_pathway_from_IPA),7)\n    colnames(table_pathway_enriched)<-c(\"Pathway\",\"GenesInPathway\",\"Pvalue\",\"FDR\",\"CommonGenesPathway\",\"PercentPathway\",\"PercentRegulon\")\n    table_pathway_enriched <- as.data.frame(table_pathway_enriched)\n\n    print(paste(j,\"of\", nrow(MRAtableRes), currentTF))\n    for( i in 1: nrow(current_pathway_from_IPA)) {\n\n      table_pathway_enriched[i,\"Pathway\"]<- as.character(current_pathway_from_IPA[i,])\n\n      #     genes_from_current_GO_from_IPA<-GeneSplitRegulon(DAVID_BP_matrix[ DAVID_BP_matrix[,GOtype] == as.character(current_pathway_from_IPA[j]) ,][,\"Molecules\"], \", \")\n      genes_from_current_pathway_from_IPA<-GeneSplitRegulon(DAVID_BP_matrix[ DAVID_BP_matrix[,GOtype] == as.character(current_pathway_from_IPA[i,]) ,][,\"Molecules\"], \", \")\n\n\n      genes_from_currentTF<-toupper(names(which(MItfgenes [currentTF,] > as.numeric(TFthreshBoot[currentTF]))))\n      genes_common_pathway_TFregulon<-as.matrix(intersect(toupper(genes_from_currentTF),toupper(genes_from_current_pathway_from_IPA)))\n\n      if(length(genes_common_pathway_TFregulon)!=0) {\n        current_pathway_commongenes_num<- length(genes_common_pathway_TFregulon)\n\n        seta<-  allgene %in% genes_from_currentTF\n        setb<-  allgene %in% genes_from_current_pathway_from_IPA\n        ft <- fisher.test(seta,setb)\n        FisherpvalueTF<-ft$p.value\n        table_pathway_enriched[i,\"Pvalue\"] <- as.numeric(FisherpvalueTF)\n\n        if(FisherpvalueTF < 0.01){\n          current_pathway_commongenes_percent<-paste(\"(\",format( (current_pathway_commongenes_num/length(genes_from_current_pathway_from_IPA)) *100,digits=2),\"%)\")\n          current_pathway_commongenes_num_with_percent<-gsub(\" \",\"\",paste(current_pathway_commongenes_num, current_pathway_commongenes_percent,\"pv=\",format(FisherpvalueTF,digits=2)))\n          #        print( paste( i, \"... \",current_pathway_from_IPA[i,],\" with\",nrow(genes_from_current_pathway_from_IPA), \"genes... done! Pathway enriched....\",current_pathway_commongenes_num_with_percent ))\n\n\n          table_pathway_enriched[i,\"CommonGenesPathway\"]<- length(genes_common_pathway_TFregulon)\n          table_pathway_enriched[i,\"GenesInPathway\"]<- length(genes_from_current_pathway_from_IPA)\n          table_pathway_enriched[i,\"PercentPathway\"]<-  as.numeric(table_pathway_enriched[i,\"CommonGenesPathway\"]) / as.numeric(table_pathway_enriched[i,\"GenesInPathway\"])  *100\n          table_pathway_enriched[i,\"PercentRegulon\"]<-  as.numeric(table_pathway_enriched[i,\"CommonGenesPathway\"]) / length(genes_from_currentTF)  *100\n\n        } }\n\n\n    }\n    table_pathway_enriched <- table_pathway_enriched[order(table_pathway_enriched[,\"Pvalue\"],decreasing=F),]\n    table_pathway_enriched <-table_pathway_enriched [table_pathway_enriched[,\"Pvalue\"] < 0.01 ,]\n    table_pathway_enriched[,\"FDR\"] <-p.adjust(table_pathway_enriched[,\"Pvalue\"],method=\"fdr\")\n    table_pathway_enriched <-table_pathway_enriched [table_pathway_enriched[,\"FDR\"] < 0.01 ,]\n    table_pathway_enriched <- table_pathway_enriched[order(table_pathway_enriched[,\"FDR\"],decreasing=F),]\n\n    tmp <- table_pathway_enriched[1:topPathways,]\n    #tmp <- paste(tmp[,\"Pathway\"],\"; FDR= \", format(tmp[,\"FDR\"],digits=3),\"; (ng=\"   ,round(tmp[,\"GenesInPathway\"]),\";\", format(tmp[,\"PercentPathway\"],digits=2), \"%;\",format(tmp[,\"PercentRegulon\"],digits=2), \"%)\",sep=\"\")\n    tmp <- paste(tmp[,\"Pathway\"],\"; FDR= \", format(tmp[,\"FDR\"],digits=3),\"; (ng=\"   ,round(tmp[,\"GenesInPathway\"]),\"); (ncommon=\", format(tmp[,\"CommonGenesPathway\"],digits=2), \")\" ,sep=\"\")\n    tmp <-as.matrix(tmp)\n\n    #\n    topPathways_tab[j,] <- tmp\n    rm(tmp)\n\n\n  }\n  return(topPathways_tab)\n}\n\nSelectSampleData<-function(StageSel){\n  if (StageSel ==\"AllTumorStages\" )\n  {\n    Cancer_clinicalDATA_stageCsample<-paste(Cancer_clinicalDATA[,\"Barcode\"],\"-01\",sep=\"\")\n  }\n\n  else {\n    Cancer_clinicalDATA_stageCsample<-paste(Cancer_clinicalDATA[Cancer_clinicalDATA[,\"Stage_tumor\"]==StageSel,][,\"Barcode\"],\"-01\",sep=\"\")\n  }\n  return(Cancer_clinicalDATA_stageCsample)\n}\n\nFind_miRNA_sample_values2<-function(TCGAdata,miRselected,FC_FDR_table_miR,Table_Cancer_miR_normal_sample,Table_Cancer_miR_stageI,Table_Cancer_miR_stageII,Table_Cancer_miR_stageIII,typePlot){\n\n  #miRselected<-\"hsa-mir-1269\"\n  miRselected_values_normal<-sort(Table_Cancer_miR_normal_sample[rownames(Table_Cancer_miR_normal_sample) == miRselected,])\n  miRselected_values_stageI<-Table_Cancer_miR_stageI[rownames(Table_Cancer_miR_stageI) == miRselected,]\n  miRselected_values_stageII<-Table_Cancer_miR_stageII[rownames(Table_Cancer_miR_stageII) == miRselected,]\n  miRselected_values_stageIII<-Table_Cancer_miR_stageIII[rownames(Table_Cancer_miR_stageIII) == miRselected,]\n\n  miRselected_logFC<-format( as.numeric(FC_FDR_table_miR[rownames(FC_FDR_table_miR) == miRselected,][,\"logFC\"]),digits=3)\n  miRselected_FDR<-format( as.numeric(FC_FDR_table_miR[rownames(FC_FDR_table_miR) == miRselected,][,\"FDR\"]),digits=3)\n\n\n  mir_colors_normal<-rep(\"blue\", length(miRselected_values_normal))\n  mir_colors_stageI<-rep(\"red\", length(miRselected_values_stageI))\n  mir_colors_stageII<-rep(\"red\", length(miRselected_values_stageII))\n  mir_colors_stageIII<-rep(\"red\", length(miRselected_values_stageIII))\n\n  label_axis_y<-paste(\"Expression (Log2)\")\n\n  TitlePlot<-paste(TCGAdata,\" \",miRselected, \", logFC=\",miRselected_logFC,\", FDR =\",miRselected_FDR,sep=\"\")\n\n  if( typePlot==\"log2density\")\n  {\n    ccol <- c( mir_normal_colors, mir_colors_stageI, mir_colors_stageII, mir_colors_stageIII)\n    plot(  c( rep (0, length(miRselected_values_normal)), rep (1, length(miRselected_values_stageI)),rep (2, length(miRselected_values_stageII)), rep (3, length(miRselected_values_stageIII)) ) ,c( log2(as.numeric(miRselected_values_normal)),log2(as.numeric(miRselected_values_stageI)),log2(as.numeric(miRselected_values_stageII)), log2(as.numeric(miRselected_values_stageIII))) , col = ccol, xlab=\"Tumor Stages\", ylab=\"log2 (level) rpkm\", main = TitlePlot)\n  }\n\n  if( typePlot==\"density\")\n  {\n    ccol <- c( mir_normal_colors, mir_colors_stageI, mir_colors_stageII, mir_colors_stageIII)\n    plot(  c( rep (0, length(miRselected_values_normal)), rep (1, length(miRselected_values_stageI)),rep (2, length(miRselected_values_stageII)), rep (3, length(miRselected_values_stageIII)) ) ,c( (as.numeric(miRselected_values_normal)),(as.numeric(miRselected_values_stageI)),(as.numeric(miRselected_values_stageII)), log2(as.numeric(miRselected_values_stageIII))) , col = ccol, xlab=\"Tumor Stages\", ylab=\"(level) rpkm\", main = TitlePlot)\n  }\n\n\n\n  if( typePlot==\"boxplot\")\n  {\n    boxplot(miRselected_values_normal,miRselected_values_stageI,miRselected_values_stageII,miRselected_values_stageIII)\n  }\n\n  #main = miRselected\n  plotnames<-c(paste(\"N (n=\",nrow(as.matrix(miRselected_values_normal)),\")\",sep=\"\"), paste(\"I (n=\",nrow(as.matrix(miRselected_values_stageI)),\")\",sep=\"\"),paste(\"II (n=\",nrow(as.matrix(miRselected_values_stageII)),\")\",sep=\"\"),paste(\"III (n=\",nrow(as.matrix(miRselected_values_stageIII)),\")\",sep=\"\"))\n  #plotnames<-paste(c(\"N\", \"I\", \"II\", \"III\"), \" (n=\", c(nrow(miRselected_values_normal), nrow(as.matrix(miRselected_values_stageI)), nrow(as.matrix(miRselected_values_stageII)), nrow(as.matrix(miRselected_values_stageIII))), \")\", sep =\"\")\n\n  paste(\"miRselected_values_stage\",c(\"I\",\"II\",\"III\"),sep=\"\")\n\n  if( typePlot==\"LOG2boxplot\")\n  {\n    boxplot(log2(miRselected_values_normal+1), log2(miRselected_values_stageI+1),log2(miRselected_values_stageII+1),log2(miRselected_values_stageIII+1), main= TitlePlot, names =plotnames,ylab=label_axis_y, xlab =\"Stages\",col =c(\"white\", \"pink\", \"plum\",\"powderblue\"))\n  }\n\n\n\n}\n\nFind_miRNA_sample_values3<-function(TCGAdata,miRselected,FC_FDR_table_miR,Table_Cancer_miR_normal_sample,Table_Cancer_miR_stageI,Table_Cancer_miR_stageII,Table_Cancer_miR_stageIII,Table_Cancer_miR_stageIV,typePlot){\n  miRselected_values_normal<-sort(Table_Cancer_miR_normal_sample[rownames(Table_Cancer_miR_normal_sample) == miRselected,])\n  miRselected_values_stageI<-Table_Cancer_miR_stageI[rownames(Table_Cancer_miR_stageI) == miRselected,]\n  miRselected_values_stageII<-Table_Cancer_miR_stageII[rownames(Table_Cancer_miR_stageII) == miRselected,]\n  miRselected_values_stageIII<-Table_Cancer_miR_stageIII[rownames(Table_Cancer_miR_stageIII) == miRselected,]\n  miRselected_values_stageIV<-Table_Cancer_miR_stageIV[rownames(Table_Cancer_miR_stageIV) == miRselected,]\n\n\n  miRselected_logFC<-format( as.numeric(FC_FDR_table_miR[rownames(FC_FDR_table_miR) == miRselected,][,\"logFC\"]),digits=3)\n  miRselected_FDR<-format( as.numeric(FC_FDR_table_miR[rownames(FC_FDR_table_miR) == miRselected,][,\"FDR\"]),digits=3)\n\n  label_axis_y<-paste(\"Expression (Log2)\")\n\n  TitlePlot<-paste(TCGAdata,\" \",miRselected, \", logFC=\",miRselected_logFC,\", FDR =\",miRselected_FDR,sep=\"\")\n\n  plotnames<-c(paste(\"N (n=\",nrow(as.matrix(miRselected_values_normal)),\")\",sep=\"\"), paste(\"I (n=\",nrow(as.matrix(miRselected_values_stageI)),\")\",sep=\"\"),paste(\"II (n=\",nrow(as.matrix(miRselected_values_stageII)),\")\",sep=\"\"),paste(\"III (n=\",nrow(as.matrix(miRselected_values_stageIII)),\")\",sep=\"\"),paste(\"IV (n=\",nrow(as.matrix(miRselected_values_stageIV)),\")\",sep=\"\"))\n\n  paste(\"miRselected_values_stage\",c(\"I\",\"II\",\"III\",\"IV\"),sep=\"\")\n\n  if( typePlot==\"LOG2boxplot\")\n  {\n    boxplot(log2(miRselected_values_normal+1), log2(miRselected_values_stageI+1),log2(miRselected_values_stageII+1),log2(miRselected_values_stageIII+1),log2(miRselected_values_stageIV+1), main= TitlePlot, names =plotnames,ylab=label_axis_y, xlab =\"Stages\",col =c(\"white\", \"pink\", \"plum\",\"powderblue\",\"tomato\"))\n  }\n\n\n\n}\n\nCreateTableTFLevelStages_high_expressed <- function(TF_enriched,FC_FDR_table_mRNA,typeOrder) {\n\n  TableLevelStages_mRNA_TFup<-matrix(0,nrow(TF_enriched),8)\n  colnames(TableLevelStages_mRNA_TFup)<-c(\"mRNA\",\"logFC\",\"FDR\",\"Normal\",\"StageI\",\"StageII\",\"StageIII\",\"StageIV\")\n\n  TableLevelStages_mRNA_TFup[,\"mRNA\"]<-TF_enriched\n  #TableLevelStages_mRNA_TFup[,\"logFC\"]<- format(FC_FDR_table_mRNA[ rownames(FC_FDR_table_mRNA) %in% TF_enriched,][,\"logFC\"],digits=2)\n\n  Table_Level_Stages_pathwaysFC<-FC_FDR_table_mRNA[which( rownames(FC_FDR_table_mRNA) %in% TF_enriched),]\n  #TableLevelStages_mRNA_TFup[,\"logFC\"]<- format(Table_Level_Stages_pathwaysFC[TF_enriched,][,\"logFC\"],digits=2)\n  #TableLevelStages_mRNA_TFup[,\"FDR\"]<- format(Table_Level_Stages_pathwaysFC[TF_enriched,][,\"FDR\"],digits=2)\n\n\n  MeanTumor<-matrix(0,nrow(TF_enriched),1)\n  MeanDiffTumorNormal<-matrix(0,nrow(TF_enriched),1)\n\n\n  for( i in 1:nrow(TF_enriched)) {\n    TableLevelStages_mRNA_TFup[i,\"logFC\"]<-  format(Table_Level_Stages_pathwaysFC[TF_enriched,][,\"logFC\"],digits=2)\n    TableLevelStages_mRNA_TFup[i,\"FDR\"]<-  format(Table_Level_Stages_pathwaysFC[TF_enriched,][,\"FDR\"],digits=2)\n    TableLevelStages_mRNA_TFup[i,\"Normal\"]<- format(mean(Table_Cancer_mRNA_normal_sample[rownames(Table_Cancer_mRNA_normal_sample) %in%  TF_enriched[i] , ]),digits=3)\n    TableLevelStages_mRNA_TFup[i,\"StageI\"]<- format(mean(Table_Cancer_mRNA_stageI[rownames(Table_Cancer_mRNA_stageI) %in%  TF_enriched[i] , ]),digits=3)\n    TableLevelStages_mRNA_TFup[i,\"StageII\"]<- format(mean(Table_Cancer_mRNA_stageII[rownames(Table_Cancer_mRNA_stageII) %in%  TF_enriched[i] , ]),digits=3)\n    TableLevelStages_mRNA_TFup[i,\"StageIII\"]<- format(mean(Table_Cancer_mRNA_stageIII[rownames(Table_Cancer_mRNA_stageIII) %in%  TF_enriched[i] , ]),digits=3)\n    TableLevelStages_mRNA_TFup[i,\"StageIV\"]<- format(mean(Table_Cancer_mRNA_stageIV[rownames(Table_Cancer_mRNA_stageIV) %in%  TF_enriched[i] , ]),digits=3)\n  }\n\n  for(k in 1:nrow(TableLevelStages_mRNA_TFup)) {\n    MeanTumor[k]<-mean(as.numeric(TableLevelStages_mRNA_TFup[k,5:8]))\n    MeanDiffTumorNormal[k]<-MeanTumor[k]-as.numeric(TableLevelStages_mRNA_TFup[k,4])\n  }\n  #print(Mean)\n  TableLevelStages_mRNA_TFup<-cbind(MeanTumor,TableLevelStages_mRNA_TFup)\n  colnames(TableLevelStages_mRNA_TFup)[1]<-\"MeanTumor\"\n\n  TableLevelStages_mRNA_TFup<-cbind(MeanDiffTumorNormal,TableLevelStages_mRNA_TFup)\n  colnames(TableLevelStages_mRNA_TFup)[1]<-\"MeanDiffTumorNormal\"\n\n\n  TableLevelStages_mRNA_TFup<-TableLevelStages_mRNA_TFup[order( as.numeric(TableLevelStages_mRNA_TFup[,\"MeanDiffTumorNormal\"]),decreasing=typeOrder),]\n\n\n\n\n  return(TableLevelStages_mRNA_TFup)\n}\n\nFindGOfromGeneCardSite <- function (MRA_tableGO,NameFile,token) {\n\n  for( i in token:nrow(MRA_tableGO)){\n    #i<-28\n    currentTF <- rownames(MRA_tableGO)[i]\n    siteGeneCard <-\"http://www.genecards.org/cgi-bin/carddisp.pl?gene=\"\n    Description <- paste(siteGeneCard, toupper(currentTF), \"&search=\", tolower(currentTF),sep=\"\")\n    tmp<-readLines(url( as.character(Description)))\n\n    if( length(grep(\"GO annotations related to this gene include\",tmp))!=0)\n    {  tmp2 <- tmp[grep(\"GO annotations related to this gene include\",tmp)]\n       tmp2_1 <-unlist(strsplit(tmp2,\"GO annotations related to this gene include <i>\"))[2]\n       if(length(grep(\"</i> and\",tmp2_1))!=0){\n         tmp2_1a <-unlist(strsplit(tmp2_1,\"</i> and\"))[1]\n         tmp2_1b <-unlist(strsplit(tmp2_1,\"</i> and\"))[2]\n         tmp2_1c <-gsub(\" <i>\",\"\",unlist(strsplit(tmp2_1b,\"</i>.\"))[1])\n         print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"with Go annotation..\", tmp2_1a,\"AND\", tmp2_1c, sep=\" \"))\n         MRA_tableGO[i,\"GOannotations1\"]<-as.character(tmp2_1a)\n         MRA_tableGO[i,\"GOannotations2\"]<-as.character(tmp2_1c)\n         token<-i\n       }\n\n       else{\n         tmp2_1a <-unlist(strsplit(tmp2_1,\"</i>.\"))[1]\n         print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"with Go annotation..\", tmp2_1a,sep=\" \"))\n         MRA_tableGO[i,\"GOannotations1\"]<-as.character(tmp2_1a)\n         MRA_tableGO[i,\"GOannotations2\"]<-\"\"\n         token<-i\n       }\n\n\n    }\n    else {   if( length(grep(\"GO annotations\",tmp)) !=0){\n      tmp2 <- tmp[grep(\"GO annotations\",tmp)]\n      tmp2_1 <- unlist(strsplit(tmp2,\"<i>\"))[2]\n      if( grep(\"</i> and \", tmp2_1)==1){\n        tmp2_1a <- gsub(\"</i> and \", \"\", tmp2_1)\n      }\n      print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"with Go annotation..\", tmp2_1a,sep=\" \"))\n      MRA_tableGO[i,\"GOannotations1\"]<-as.character(tmp2_1a)\n      MRA_tableGO[i,\"GOannotations2\"]<-\"\"\n      token<-i\n    }}\n\n\n    #else{\n    #  print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"notfound on GeneCardSite\",sep=\" \"))\n    #}\n    save(MRA_tableGO, file=NameFile)\n  }\n\n}\n\n#tfList <- read.table(\"GeneCardsTMP/others_nucleus.txt\", header = T, stringsAsFactors = F)[, 1]\n#TFGeneCards <- FindGOfromDownloadedGeneCardSite(tfList, NameFile = \"GeneCardsTMP/TFListGeneCard.RData\", token = 1)\n#save(TFGeneCards, file = \"TFGeneCards.RData\")\n\nFindGOfromDownloadedGeneCardSite <- function(tfList, NameFile, token) {\n  MRA_tableGO <- matrix(\"\", ncol = 3, nrow = length(tfList))\n  colnames(MRA_tableGO) <- c(\"GeneName\", \"GOannotations1\", \"GOannotations2\")\n  MRA_tableGO[, \"GeneName\"] <- tfList\n\n  for( i in token:length(tfList)){\n    #i<-28\n    currentTF <- tfList[i]\n    #siteGeneCard <-\"http://www.genecards.org/cgi-bin/carddisp.pl?gene=\"\n    #Description <- paste(siteGeneCard, toupper(currentTF), \"&search=\", tolower(currentTF),sep=\"\")\n    #tmp<-readLines(url( as.character(Description)))\n    lf <- list.files(\"/home/PUBLIC/MRA_LGG/GeneCards/\")\n    toGrep <- paste(toupper(currentTF), \"_GeneCard.RData\", sep = \"\")\n    toLoad <- lf[lf == toGrep]\n    if(length(toLoad) == 0) next\n    toLoad <- paste(\"/home/PUBLIC/MRA_LGG/GeneCards/\", toGrep, sep = \"\")\n    load(toLoad)\n\n    if( length(grep(\"GO annotations related to this gene include\",tmp))!=0)\n    {  tmp2 <- tmp[grep(\"GO annotations related to this gene include\",tmp)]\n       tmp2_1 <-unlist(strsplit(tmp2,\"GO annotations related to this gene include <i>\"))[2]\n       if(length(grep(\"</i> and\",tmp2_1))!=0){\n         tmp2_1a <-unlist(strsplit(tmp2_1,\"</i> and\"))[1]\n         tmp2_1b <-unlist(strsplit(tmp2_1,\"</i> and\"))[2]\n         tmp2_1c <-gsub(\" <i>\",\"\",unlist(strsplit(tmp2_1b,\"</i>.\"))[1])\n         print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"with Go annotation..\", tmp2_1a,\"AND\", tmp2_1c, sep=\" \"))\n         MRA_tableGO[i,\"GOannotations1\"]<-as.character(tmp2_1a)\n         MRA_tableGO[i,\"GOannotations2\"]<-as.character(tmp2_1c)\n         token<-i\n       }else{\n         tmp2_1a <-unlist(strsplit(tmp2_1,\"</i>.\"))[1]\n         print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"with Go annotation..\", tmp2_1a,sep=\" \"))\n         MRA_tableGO[i,\"GOannotations1\"]<-as.character(tmp2_1a)\n         MRA_tableGO[i,\"GOannotations2\"]<-\"\"\n         token<-i\n       }\n\n\n    }else {   if( length(grep(\"GO annotations\",tmp)) !=0){\n      tmp2 <- tmp[grep(\"GO annotations\",tmp)]\n      tmp2_1 <- unlist(strsplit(tmp2,\"<i>\"))[2]\n      if( grep(\"</i> and \", tmp2_1)==1){\n        tmp2_1a <- gsub(\"</i> and \", \"\", tmp2_1)\n      }\n      print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"with Go annotation..\", tmp2_1a,sep=\" \"))\n      MRA_tableGO[i,\"GOannotations1\"]<-as.character(tmp2_1a)\n      MRA_tableGO[i,\"GOannotations2\"]<-\"\"\n      token<-i\n    }}\n\n\n    #else{\n    #  print( paste(\"TF...\",currentTF, i,\"of \",nrow(MRA_tableGO), \"notfound on GeneCardSite\",sep=\" \"))\n    #}\n    #save(MRA_tableGO, file=NameFile)\n  }\n  return(MRA_tableGO)\n}\n\nmostEnrichedFunction <- function(listPathGO, PathGOTab, MRA_LGG_results_UQ_allgene_short){\n  mostEnrichedPathways <- matrix(0, nrow = length(listPathGO), ncol = 7)\n  colnames(mostEnrichedPathways) <- c(\"Pathways\", \"nGenes\", \"times\", \"geomMeanFDR\", \"nCommonGenes\", \"MaxMR\", \"AllMR\")\n  mostEnrichedPathways <- as.data.frame(mostEnrichedPathways)\n\n  mostEnrichedPathways[, \"Pathways\"] <- listPathGO\n  mostEnrichedPathways[, \"geomMeanFDR\"] <- 1\n  mostEnrichedPathways[, \"AllMR\"] <- mostEnrichedPathways[, \"MaxMR\"] <- \"\"\n\n  for(i in 1:nrow(PathGOTab)){\n    tmp <- lapply(PathGOTab[i, ], function(x) strsplit(x, \";\"))\n    names(tmp) <- NULL\n    tmp <- matrix(unlist(tmp), ncol = 4, byrow = T)\n    if(nrow(tmp) == 0 | tmp[1, 1] == \"NA\") next\n    tmp <- tmp[tmp[, 1] != \"NA\", , drop = F]\n    tmp <- as.data.frame(tmp, stringsAsFactors = F)\n    tmp[, 2] <- as.numeric(sub(\" FDR= \", \"\", tmp[, 2]))\n    tmp[, 3] <- as.numeric(unlist(strsplit(matrix(unlist(strsplit(tmp[, 3], \"=\")), nrow = 2)[2, ], \")\")))\n    tmp[, 4] <- as.numeric(unlist(strsplit(matrix(unlist(strsplit(tmp[, 4], \"=\")), nrow = 2)[2, ], \")\")))\n\n    idx <- rep(0, nrow(tmp))\n    for(j in 1:nrow(tmp)) idx[j] <- which(mostEnrichedPathways[, \"Pathways\"] == tmp[j, 1])\n    mostEnrichedPathways[idx, \"nGenes\"] <- tmp[, 3]\n    mostEnrichedPathways[idx, \"times\"] <- mostEnrichedPathways[idx, \"times\"] + 1\n    mostEnrichedPathways[idx, \"geomMeanFDR\"] <- mostEnrichedPathways[idx, \"geomMeanFDR\"]*tmp[, 2]\n    mostEnrichedPathways[idx, \"AllMR\"] <- paste(mostEnrichedPathways[idx, \"AllMR\"], rownames(PathGOTab[i, ]), sep = \",\")\n\n    #per i nCommonGenes uguale, aggiungere a MaxMR\n    idxMaxTmp <- which(mostEnrichedPathways[idx, \"nCommonGenes\"] == tmp[, 4])\n    if(length(idxMaxTmp) != 0){\n      idxMax <- idx[idxMaxTmp]\n      nRG <- which(rownames(PathGOTab[i, ]) == rownames(MRA_LGG_results_UQ_allgene_short))\n      nRG <- MRA_LGG_results_UQ_allgene_short[nRG, \"RegSizeTF\"]\n      mostEnrichedPathways[idxMax, \"MaxMR\"] <- paste(mostEnrichedPathways[idxMax, \"MaxMR\"], \",\", rownames(PathGOTab[i, ]), \"(nRG=\", nRG, \")\",  sep = \"\")\n    }\n\n    #per i nCommonGenes minori, creare la lista dei MaxMR daccapo\n    idxMaxTmp <- which(mostEnrichedPathways[idx, \"nCommonGenes\"] < tmp[, 4])\n    if(length(idxMaxTmp) != 0){\n      idxMax <- idx[idxMaxTmp]\n      mostEnrichedPathways[idxMax, \"nCommonGenes\"] <- tmp[idxMaxTmp, 4]\n      nRG <- which(rownames(PathGOTab[i, ]) == rownames(MRA_LGG_results_UQ_allgene_short))\n      nRG <- MRA_LGG_results_UQ_allgene_short[nRG, \"RegSizeTF\"]\n      mostEnrichedPathways[idxMax, \"MaxMR\"] <- paste(rownames(PathGOTab[i, ]), \"(nRG=\", nRG, \")\",  sep = \"\")\n    }\n\n    print(paste(i, \"of\", nrow(PathGOTab)))\n  }\n  mostEnrichedPathways <- mostEnrichedPathways[mostEnrichedPathways[, \"times\"] != 0, ]\n  mostEnrichedPathways[, \"geomMeanFDR\"] <- mostEnrichedPathways[, \"geomMeanFDR\"]^(1/mostEnrichedPathways[, \"times\"])\n  #mostEnrichedPathways <- mostEnrichedPathways[order(mostEnrichedPathways[, \"times\"], decreasing = T), ]\n  mostEnrichedPathways <- mostEnrichedPathways[order(mostEnrichedPathways[, \"nCommonGenes\"], decreasing = T), ]\n  mostEnrichedPathways[, \"AllMR\"] <- substr(mostEnrichedPathways[, \"AllMR\"], 2, nchar(mostEnrichedPathways[, \"AllMR\"]))\n  rownames(mostEnrichedPathways) <- NULL\n\n  return(mostEnrichedPathways)\n}\n\nRnaSeqFilt<- function(TableRnaseq,QuantileThresh ){\n  GeneThresh <- as.numeric(quantile(rowMeans(TableRnaseq), QuantileThresh))\n  geneFiltered <- names(which(rowMeans(TableRnaseq) > GeneThresh))\n  TCGA_GBM_Rnaseq_Rawcount_Filt <- TableRnaseq[geneFiltered, ]\n  return( TCGA_GBM_Rnaseq_Rawcount_Filt)\n}\n\nRnaSeqNormalization <- function(TCGA_RnaseqTable,geneInfo){\n  require(EDASeq)\n\n  rownames(TCGA_RnaseqTable) <- GenesCutID(as.matrix(rownames(TCGA_RnaseqTable)))\n  TCGA_RnaseqTable <- TCGA_RnaseqTable[rownames(TCGA_RnaseqTable) != \"?\", ]\n  TCGA_RnaseqTable<-TCGA_RnaseqTable[!duplicated(rownames(TCGA_RnaseqTable)), !duplicated(colnames(TCGA_RnaseqTable))]\n  TCGA_RnaseqTable <- TCGA_RnaseqTable[, which(substr(colnames(TCGA_RnaseqTable), 14, 15) != \"02\")]\n  geneInfo <- geneInfo[rownames(geneInfo) %in% rownames(TCGA_RnaseqTable), ]\n  geneInfo <- geneInfo[!duplicated(rownames(geneInfo)), ]\n  toKeep <- which(geneInfo[, \"geneLength\"] != 0)\n  geneInfo <- geneInfo[toKeep, ]\n  TCGA_RnaseqTable <- TCGA_RnaseqTable[toKeep, ]\n  geneInfo <- as.data.frame(geneInfo)\n  TCGA_RnaseqTable<-round(TCGA_RnaseqTable)\n\n  timeEstimated<-format(ncol(TCGA_RnaseqTable)*nrow(TCGA_RnaseqTable)/80000,digits=2)\n  print(messageEstimation<-paste(\"I Need about \", timeEstimated, \"seconds for this Complete Normalization Upper Quantile [Processing 80k elements /s]  \"))\n\n  print(\"Step 1 of 4: newSeqExpressionSet ...\")\n  TimeUse(TCGA_RnaseqTable_norm <- newSeqExpressionSet(TCGA_RnaseqTable, featureData = geneInfo))\n  print(\"Step 2 of 4: withinLaneNormalization ...\")\n  TimeUse(TCGA_RnaseqTable_norm <- withinLaneNormalization(TCGA_RnaseqTable_norm, \"geneLength\", which = \"upper\", offset = FALSE))\n  print(\"Step 3 of 4: betweenLaneNormalization ...\")\n  TimeUse(TCGA_RnaseqTable_norm <- betweenLaneNormalization(TCGA_RnaseqTable_norm, which = \"upper\", offset = FALSE))\n  print(\"Step 4 of 4: exprs ...\")\n  TimeUse(TCGA_RnaseqTable_norm <- exprs(TCGA_RnaseqTable_norm))\n\n  return(TCGA_RnaseqTable_norm)\n}\n\nenrichmentBarplot <- function(tf, GOBPTab, GOMFTab, GOCCTab, PathTab, nBar, nRGTab, orderType = c(\"CommonGenes\", \"PathGenes\", \"FDR\")){\n  orderType <- match.arg(orderType)\n  splitFun <- function(tf, Tab, nBar, orderType = orderType){\n    tmp <- lapply(Tab[tf, ], function(x) strsplit(x, \";\"))\n    names(tmp) <- NULL\n    tmp <- matrix(unlist(tmp), ncol = 4, byrow = T)\n    if(nrow(tmp) == 0 | tmp[1, 1] == \"NA\") return(matrix(0, ncol = 2))\n    tmp <- tmp[tmp[, 1] != \"NA\", , drop = F]\n    tmp <- as.data.frame(tmp, stringsAsFactors = F)\n    tmp[, 2] <- as.numeric(sub(\" FDR= \", \"\", tmp[, 2]))\n    tmp[, 3] <- as.numeric(unlist(strsplit(matrix(unlist(strsplit(tmp[, 3], \"=\")), nrow = 2)[2, ], \")\")))\n    tmp[, 4] <- as.numeric(unlist(strsplit(matrix(unlist(strsplit(tmp[, 4], \"=\")), nrow = 2)[2, ], \")\")))\n\n    if(nrow(tmp) < nBar) nBar <- nrow(tmp)\n\n    if(orderType == \"CommonGenes\"){\n      o <- order(tmp[, 4], decreasing=T)\n      toPlot <- tmp[o[nBar:1], c(1, 4)]\n    }else if(orderType == \"PathGenes\"){\n      o <- order(tmp[, 3], decreasing=T)\n      toPlot <- tmp[o[nBar:1], c(1, 3)]\n    } else if(orderType == \"FDR\"){\n      o <- order(tmp[, 2])\n      toPlot <- tmp[o[nBar:1], c(1, 2)]\n    } else\n      stop(\"Unknown Ordering Type\")\n\n    toPlot[, 1] <- paste(toPlot[, 1], \" (n=\", tmp[o[nBar:1], 4], \")\", sep =\"\")\n    return(toPlot)\n  }\n\n  par(mfrow=c(2, 2))\n\n  toPlot <- splitFun(tf, GOBPTab, nBar, orderType)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"orange\", main = \"GO:Biological Process\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  toPlot <- splitFun(tf, GOCCTab, nBar, orderType)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"cyan\", main = \"GO:Cellular Component\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  toPlot <- splitFun(tf, GOMFTab, nBar, orderType)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"green\", main = \"GO:Molecular Function\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  toPlot <- splitFun(tf, PathTab, nBar, orderType)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"yellow\", main = \"Pathways\")\n  labs <- toPlot[, 1]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  nRG <- nRGTab[tf, \"RegSizeTF\"]\n  mainLab <- paste(tf, \" (nRG=\", nRG, \") by \", orderType, sep = \"\")\n  mtext(mainLab, side = 3, line = -1, outer = TRUE, font = 2)\n}\n\nIPAbarplot <- function(tf, GOBPTab, GOMFTab, GOCCTab, PathTab, nBar, nRGTab){\n  splitFun <- function(tf, Tab, nBar){\n    tmp <- lapply(Tab[tf, ], function(x) strsplit(x, \";\"))\n    names(tmp) <- NULL\n    tmp <- matrix(unlist(tmp), ncol = 4, byrow = T)\n    if(nrow(tmp) == 0 | tmp[1, 1] == \"NA\") return(matrix(0, ncol = 2))\n    tmp <- tmp[tmp[, 1] != \"NA\", , drop = F]\n    tmp <- as.data.frame(tmp, stringsAsFactors = F)\n    tmp[, 2] <- as.numeric(sub(\" FDR= \", \"\", tmp[, 2]))\n    tmp[, 3] <- as.numeric(unlist(strsplit(matrix(unlist(strsplit(tmp[, 3], \"=\")), nrow = 2)[2, ], \")\")))\n    tmp[, 4] <- as.numeric(unlist(strsplit(matrix(unlist(strsplit(tmp[, 4], \"=\")), nrow = 2)[2, ], \")\")))\n\n    if(nrow(tmp) < nBar) nBar <- nrow(tmp)\n\n    tmp[, 2] <- -log10(tmp[, 2])\n    o <- order(tmp[, 2], decreasing = T)\n    toPlot <- tmp[o[nBar:1], 1:2]\n    toPlot[, 1] <- paste(toPlot[, 1], \" (n=\", tmp[o[nBar:1], 4], \")\", sep =\"\")\n    toPlot[, 3] <- tmp[o[nBar:1], 4]/tmp[o[nBar:1], 3]\n\n    return(toPlot)\n  }\n\n  par(mfrow=c(2, 2))\n\n  toPlot <- splitFun(tf, GOBPTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"orange\", main = \"GO:Biological Process\", xlab = \"-log10(FDR)\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n  lines(x = toPlot[, 3], y = xAxis, col = \"red\")\n  points(x = toPlot[, 3], y = xAxis, col = \"red\")\n  axis(side = 3, at = pretty(range(0:1)), col = \"red\")\n\n  toPlot <- splitFun(tf, GOCCTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"cyan\", main = \"GO:Cellular Component\", xlab = \"-log10(FDR)\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n  lines(x = toPlot[, 3], y = xAxis, col = \"red\")\n  points(x = toPlot[, 3], y = xAxis, col = \"red\")\n  axis(side = 3, at = pretty(range(0:1)), col = \"red\")\n\n  toPlot <- splitFun(tf, GOMFTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"green\", main = \"GO:Molecular Function\", xlab = \"-log10(FDR)\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n  lines(x = toPlot[, 3], y = xAxis, col = \"red\")\n  points(x = toPlot[, 3], y = xAxis, col = \"red\")\n  axis(side = 3, at = pretty(range(0:1)), col = \"red\")\n\n  toPlot <- splitFun(tf, PathTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"yellow\", main = \"Pathways\", xlab = \"-log10(FDR)\")\n  labs <- toPlot[, 1]\n  text(x = 1, y = xAxis, labs, pos = 4)\n  lines(x = toPlot[, 3], y = xAxis, col = \"red\")\n  points(x = toPlot[, 3], y = xAxis, col = \"red\")\n  #axis(side = 1, at = pretty(range(0:1)), col = \"red\", line = 2.5)\n  axis(side = 3, at = pretty(range(0:1)), col = \"red\")\n\n  #par(new = TRUE)\n  #plot(toPlot[, 3], xAxis, axes = FALSE, bty = \"n\", xlab = \"\", ylab = \"\", col = \"blue\")\n  #par(new = TRUE)\n  #plot(toPlot[, 3], xAxis, type = \"l\", axes = FALSE, bty = \"n\", xlab = \"\", ylab = \"\", col = \"blue\")\n  #axis(side = 2, at = pretty(range(xAxis)))\n  #axis(side = 1, at = pretty(range(toPlot[, 3])), col = \"red\", line=2.5)\n  #axis(side = 3, at = pretty(range(toPlot[, 3])), col = \"red\")\n\n    if( is.character( nRGTab)){\n    nRG<-length(nRGTab)\n    } else {    nRG <- nRGTab[tf, \"RegSizeTF\"] }\n\n\n\n  mainLab <- paste(tf, \" (nRG = \", nRG, \")\", sep = \"\")\n  mtext(mainLab, side = 3, line = -1, outer = TRUE, font = 2)\n}\n\nmostEnrichedBarplot <- function(GOBPTab, GOMFTab, GOCCTab, PathTab, nBar, nRGTab){\n  toPlotFun <- function(Tab, nBar){\n    o <- order(Tab[, \"nCommonGenes\"], decreasing = T)\n    toPlot <- Tab[o[nBar:1], c(1, 5)]\n    toPlot[, 1] <- paste(toPlot[, 1], \" (n=\", Tab[o[nBar:1], 2], \") \", sep =\"\")\n    #toPlot[, 1] <- paste(toPlot[, 1], \" (n=\", Tab[o[nBar:1], 2], \") \", Tab[o[nBar:1], 6], sep =\"\")\n\n    return(toPlot)\n  }\n\n  par(mfrow=c(2, 2))\n\n  toPlot <- toPlotFun(GOBPTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"orange\", main = \"GO:Biological Process\", xlab = \"nMR\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  toPlot <- toPlotFun(GOCCTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"cyan\", main = \"GO:Cellular Component\", xlab = \"nMR\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  toPlot <- toPlotFun(GOMFTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"green\", main = \"GO:Molecular Function\", xlab = \"nMR\")\n  labs <- matrix(unlist(strsplit(toPlot[, 1], \"~\")), nrow = 2)[2, ]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  toPlot <- toPlotFun(PathTab, nBar)\n  xAxis <- barplot(toPlot[, 2], horiz = T, col = \"yellow\", main = \"Pathways\", xlab = \"nMR\")\n  labs <- toPlot[, 1]\n  text(x = 1, y = xAxis, labs, pos = 4)\n\n  nRG <- nRGTab[tf, \"RegSizeTF\"]\n  mainLab <- paste(\"Most Enrichment of\", sep = \"\")\n  mtext(mainLab, side = 3, line = -1, outer = TRUE, font = 2)\n}\n\nEnrichmentAnalysis <- function(GeneName,RegulonList,TableEnrichment,IPAGenes,GOtype,topPathways=nrow(TableEnrichment),FDRThresh=0.01) {\n  topPathways_tab <- matrix(0,1,topPathways)\n  topPathways_tab<-as.matrix(topPathways_tab)\n  rownames(topPathways_tab)<-GeneName\n\n  rownames(IPAGenes) <- toupper(rownames(IPAGenes) )\n  IPAGenes<-IPAGenes[!duplicated(IPAGenes[,\"ID\"]),]\n  rownames(IPAGenes) <- IPAGenes[,\"ID\"]\n  allgene<-IPAGenes[,\"ID\"]\n  current_pathway_from_IPA<- as.matrix(TableEnrichment[,GOtype]) # genes from IPA pathways\n\n  TableNames <- gsub(\"David\",\"\",paste(\"Top \", GOtype, \" n. \", 1:topPathways,\" of \", topPathways, sep=\"\"))\n  colnames(topPathways_tab) <- TableNames\n  topPathways_tab <- as.data.frame(topPathways_tab)\n\n  table_pathway_enriched <- matrix(1, nrow(current_pathway_from_IPA),7)\n  colnames(table_pathway_enriched)<-c(\"Pathway\",\"GenesInPathway\",\"Pvalue\",\"FDR\",\"CommonGenesPathway\",\"PercentPathway\",\"PercentRegulon\")\n  table_pathway_enriched <- as.data.frame(table_pathway_enriched)\n\n  for( i in 1: nrow(current_pathway_from_IPA)) {\n    table_pathway_enriched[i,\"Pathway\"]<- as.character(current_pathway_from_IPA[i,])\n\n    if( nrow(TableEnrichment) == 589){\n      genes_from_current_pathway_from_IPA<-GeneSplitRegulon(TableEnrichment[ TableEnrichment[GOtype] == as.character(current_pathway_from_IPA[i,]) ,][,\"Molecules\"], \",\")\n    }\n    else {\n      genes_from_current_pathway_from_IPA<-GeneSplitRegulon(TableEnrichment[ TableEnrichment[GOtype] == as.character(current_pathway_from_IPA[i,]) ,][,\"Molecules\"], \", \")\n    }\n\n    genes_common_pathway_TFregulon<-as.matrix(intersect(toupper(RegulonList),toupper(genes_from_current_pathway_from_IPA)))\n\n\n\n    if(length(genes_common_pathway_TFregulon)!=0) {\n      current_pathway_commongenes_num<- length(genes_common_pathway_TFregulon)\n      seta<-  allgene %in% RegulonList\n      setb<-  allgene %in% genes_from_current_pathway_from_IPA\n      ft <- fisher.test(seta,setb)\n      FisherpvalueTF<-ft$p.value\n      table_pathway_enriched[i,\"Pvalue\"] <- as.numeric(FisherpvalueTF)\n      if(FisherpvalueTF < 0.01){\n        current_pathway_commongenes_percent<-paste(\"(\",format( (current_pathway_commongenes_num/length(genes_from_current_pathway_from_IPA)) *100,digits=2),\"%)\")\n        current_pathway_commongenes_num_with_percent<-gsub(\" \",\"\",paste(current_pathway_commongenes_num, current_pathway_commongenes_percent,\"pv=\",format(FisherpvalueTF,digits=2)))\n        table_pathway_enriched[i,\"CommonGenesPathway\"]<- length(genes_common_pathway_TFregulon)\n        table_pathway_enriched[i,\"GenesInPathway\"]<- length(genes_from_current_pathway_from_IPA)\n        table_pathway_enriched[i,\"PercentPathway\"]<-  as.numeric(table_pathway_enriched[i,\"CommonGenesPathway\"]) / as.numeric(table_pathway_enriched[i,\"GenesInPathway\"])  *100\n        table_pathway_enriched[i,\"PercentRegulon\"]<-  as.numeric(table_pathway_enriched[i,\"CommonGenesPathway\"]) / length(RegulonList)  *100\n      } }\n  }\n  table_pathway_enriched <- table_pathway_enriched[order(table_pathway_enriched[,\"Pvalue\"],decreasing=F),]\n  table_pathway_enriched <-table_pathway_enriched [table_pathway_enriched[,\"Pvalue\"] < 0.01 ,]\n  table_pathway_enriched[,\"FDR\"] <-p.adjust(table_pathway_enriched[,\"Pvalue\"],method=\"fdr\")\n  table_pathway_enriched <- table_pathway_enriched [table_pathway_enriched[,\"FDR\"] < FDRThresh ,]\n  table_pathway_enriched <- table_pathway_enriched[order(table_pathway_enriched[,\"FDR\"],decreasing=F),]\n\n  tmp <- table_pathway_enriched[1:topPathways,]\n  tmp <- paste(tmp[,\"Pathway\"],\"; FDR= \", format(tmp[,\"FDR\"],digits=3),\"; (ng=\"   ,round(tmp[,\"GenesInPathway\"]),\"); (ncommon=\", format(tmp[,\"CommonGenesPathway\"],digits=2), \")\" ,sep=\"\")\n  tmp <-as.matrix(tmp)\n  topPathways_tab[1,] <- tmp\n  rm(tmp)\n\n  return(topPathways_tab)\n}\n\nEAcomplete <- function (TFname,RegulonList){\n\n  print(paste(\"I need about \", \"1 minute to finish complete Enrichment analysis GO[BP,MF,CC] and Pathways... \"))\n\n  #load(\"EnrichmentAnalyis.RData\")\n  ResBP <- EnrichmentAnalysis(TFname,RegulonList,DAVID_BP_matrix,IPAGenes,GOtype= \"DavidBP\")\n  print(\"GO Enrichment Analysis BP completed....done\")\n  ResMF <- EnrichmentAnalysis(TFname,RegulonList,DAVID_MF_matrix,IPAGenes,GOtype= \"DavidMF\")\n  print(\"GO Enrichment Analysis MF completed....done\")\n  ResCC <- EnrichmentAnalysis(TFname,RegulonList,DAVID_CC_matrix,IPAGenes,GOtype= \"DavidCC\")\n  print(\"GO Enrichment Analysis CC completed....done\")\n  ResPat <- EnrichmentAnalysis(TFname,RegulonList,listIPA_pathways,IPAGenes,GOtype= \"Pathway\")\n  print(\"Pathway Enrichment Analysis completed....done\")\n\n  ans <- list(ResBP = ResBP, ResMF = ResMF, ResCC = ResCC, ResPat = ResPat)\n  return(ans)\n}\n\nFindMRA_diffConditions<-function(groupsCond, color,TCGAdata, MiMtfgenes, TFthreshVector){\n\n  sampleCond <- groupsCond[which(groupsCond$cluster == color), \"barcode\"]\n  sampleOther <- groupsCond[-which(groupsCond$cluster == color), \"barcode\"]\n  print(paste(\"Founded n.\", length(sampleCond), \"of color\", color, \"and n.\",length(sampleOther), \"of other.\" ))\n\n  LGG_GBM_cond_ot <- DEA_edge5(TCGAdata[, sampleOther], TCGAdata[, sampleCond], \"Other\", color)\n  LGG_GBM_cond_ot_DEGs <- LGG_GBM_cond_ot[LGG_GBM_cond_ot$FDR < 0.01 & abs(LGG_GBM_cond_ot$logFC) >= 1, ]\n\n  print(paste(\"Founded n.\", length(rownames(LGG_GBM_cond_ot_DEGs)), \"genes diff.expr with FDR < 0.01 and |logFC|> = 1 \"))\n\n  MRA_Cond_ot <- MasterRegulatorTFgenes(rownames(LGG_GBM_cond_ot_DEGs), MiMtfgenes, TFthreshVector, regLength = 20, FDRMRA_thresh = 0.01)\n\n  ans <- list( LGG_GBM_cond_ot = LGG_GBM_cond_ot, MRA_Cond_ot = MRA_Cond_ot)\n  return(ans)\n}\n\nCreateFileForIPA <- function(TFlist,MimMatrix,ThreshMI,CancerDEA,PathDIR,CancerType){\n\n  for ( i in 1: nrow(TFlist)){\n    setwd(PathDIR)\n    TFcurrent<-TFlist[i]\n    FileNameof_TFcurrent<-paste(CancerType,\"_\",TFlist[i],\"_GenesDiff_in_regulon_complete\")\n    FileNameof_TFcurrent_withoutspace<-gsub(\" \",\"\",FileNameof_TFcurrent, fixed=TRUE)\n\n    if(length(ThreshMI) == 1) TFregulon<-names(MimMatrix[TFcurrent,which(MimMatrix[TFcurrent,]>ThreshMI)]) else\n      TFregulon<-names(MimMatrix[TFcurrent,which ( as.numeric(MimMatrix[TFcurrent,]) > ThreshMI[TFcurrent] )])\n\n    CancerDEA_inregulon <- CancerDEA[rownames(CancerDEA) %in% as.character(TFregulon),]\n    b<-as.matrix(CancerDEA_inregulon)\n    Log_Ratio<-b[,\"logFC\"]\n    c<-cbind(rownames(CancerDEA_inregulon),Log_Ratio)\n    colnames(c)<-c(\"Genes\",\"Log Ratio\")\n    library(xlsx)\n    write.xlsx2(c, paste(FileNameof_TFcurrent_withoutspace,\".xls\", sep=\"\"),row.names=FALSE)\n\n  }\n}\n\nMRA_differentConditions6 <- function(DataCount,IPAGenes,groupsLGG_GBM){\n\n\n  commonSamples <- intersect(paste(groupsLGG_GBM$sample, \"-01\", sep = \"\"), colnames(DataCount))\n  groupsLGG_GBM <- groupsLGG_GBM[paste(groupsLGG_GBM$sample, \"-01\", sep = \"\") %in% commonSamples, ]\n  groups <- names(table(groupsLGG_GBM$cluster))\n  NumberofConditions <- length(groups)\n  cond <- groupsLGG_GBM$cluster\n  names(cond) <- paste(groupsLGG_GBM$sample,\"-01\",sep=\"\")\n\n  tmp1 <- c(\"TR\",\"Family\",\"RegSizeTF\", \"MIthresh\")\n  tmp2 <- paste(\"Mean_\", groups,sep=\"\")\n  tmp3 <- paste(\"IntTF\", groups,\"_ot\",sep=\"\")\n  tmp4 <- paste(\"FC\", groups,\"_ot\",sep=\"\")\n  tmp5 <- paste(\"FDR\", groups,\"_ot\",sep=\"\")\n  tmp6 <- paste(\"MR\", groups,\"_ot\",sep=\"\")\n  tmp7 <- c(\"MRsum\", \"Description\")\n  tmpAll <- c(tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7)\n\n\n  names(TF_completeLIST) <- c(\"MRA_LGG_GBM_blue_other\", \"MRA_LGG_GBM_cyan_other\", \"MRA_LGG_GBM_gray_other\" ,\"MRA_LGG_GBM_green3_other\", \"MRA_LGG_GBM_magenta_other\" , \"MRA_LGG_GBM_red_other\" , \"MRA_LGG_GBM_yellow_other\")\n  tmpAcomplete <- NULL\n\n  for( i in 1:length(TF_completeLIST)){\n    tmpAcomplete <- rbind(tmpAcomplete,TF_completeLIST[[i]][[2]])\n  }\n\n  tmpAcompleteLIST <- unique(as.character(tmpAcomplete[,\"TF\"]))\n\n\n\n  # if( NumTopMR!=0) {\n  #    tmpAcompleteLIST <- as.matrix(as.character(unique(as.matrix(rbind(MRA_Codel[1:NumTopMR,],MRA_Intact[1:NumTopMR,],MRA_Wt[1:NumTopMR,]))[,\"TF\"])))\n  #  }\n  #  else{tmpAcompleteLIST <- as.matrix(as.character(unique(as.matrix(rbind(MRA_Codel,MRA_Intact,MRA_Wt,MRA_Codel_VS_Intact,MRA_Codel_VS_WT,MRA_WT_VS_Intact))[,\"TF\"])))  }\n\n\n  MRA_matrix<-matrix(0,length(tmpAcompleteLIST),length(tmpAll))\n  MRA_matrix<-as.data.frame(MRA_matrix)\n\n  colnames(MRA_matrix) <- tmpAll\n  numcandidateTF<-nrow(MRA_matrix)\n\n\n  for ( i in 1: numcandidateTF) {\n    print(paste(i, \"of\",nrow(MRA_matrix),\"...\",tmpAcompleteLIST[i],\"done\"))\n    MRA_matrix[i,\"TR\"] <- tmpAcompleteLIST[i]\n\n    # MRA_matrix[i,\"RegSizeTF\"] <-  as.numeric(MRA_Intact[tmpAcompleteLIST[i],\"RegSizeTF\"])\n\n\n    if( length(intersect( toupper( tmpAcompleteLIST[i]) , toupper(rownames(IPAGenes)))!=0)) {\n      MRA_matrix[i,\"Family\"] <- as.character(IPAGenes[ toupper( tmpAcompleteLIST[i]),\"Family\"])\n      MRA_matrix[i,\"Description\"] <- as.character(IPAGenes[ toupper( tmpAcompleteLIST[i]),\"Description\"])}\n\n    for( j in 1: length(TF_completeLIST)){\n      if(!is.na(TF_completeLIST[[j]][[2]][ tmpAcompleteLIST[i],\"RegSizeTF\"])) MRA_matrix[i,\"RegSizeTF\"] <- TF_completeLIST[[j]][[2]][ tmpAcompleteLIST[i],\"RegSizeTF\"]\n      if(!is.na(TF_completeLIST[[j]][[2]][ tmpAcompleteLIST[i],\"MIthresh\"])) MRA_matrix[i,\"MIthresh\"] <- TF_completeLIST[[j]][[2]][ tmpAcompleteLIST[i],\"MIthresh\"]\n      MRA_matrix[i,4 + j ] <-  mean(DataCount[ tmpAcompleteLIST[i] , names(cond[cond == groups[j]])  ])\n      MRA_matrix[i,4+ length(groups) + j ] <-  TF_completeLIST[[j]][[2]][ tmpAcompleteLIST[i],\"INT.TF.DIFF\"]\n      MRA_matrix[i,4+ 2*length(groups) + j ] <-  TF_completeLIST[[j]][[1]][ tmpAcompleteLIST[i],\"logFC\"]\n      MRA_matrix[i,4+ 3*length(groups) + j ] <-  TF_completeLIST[[j]][[2]][ tmpAcompleteLIST[i],\"FDRTFDIFF\"]\n      MRA_matrix[i,4+ 4*length(groups) + j ] <- length(intersect(rownames(TF_completeLIST[[j]][[2]]), tmpAcompleteLIST[i]))\n      MRA_matrix[i,4+ 4*length(groups) + j ] <- length(intersect(rownames(TF_completeLIST[[j]][[2]]), tmpAcompleteLIST[i]))\n    }\n    MRA_matrix[i, \"MRsum\"] <- sum(MRA_matrix[i, 4+ 4*length(groups) + 1:length(groups)])\n  }\n\n  MRA_matrix[which(MRA_matrix[,\"Family\"]==0),\"Family\"] <- \"unknownFromIPA\"\n  MRA_matrix[which( is.na(MRA_matrix[,\"Family\"])),\"Family\"] <- \"unknownFromIPA\"\n  MRA_matrix[which(MRA_matrix[,\"Description\"]==0),\"Description\"] <- \"unknownFromIPA\"\n  MRA_matrix[which( is.na(MRA_matrix[,\"Description\"])),\"Description\"] <- \"unknownFromIPA\"\n  MRA_matrix <- MRA_matrix[order( as.numeric(MRA_matrix[,\"MRsum\"]), decreasing=F),]\n  rownames(MRA_matrix) <- MRA_matrix[,\"TR\"]\n\n  return(MRA_matrix)\n\n}\n\nboxplotGroups <- function(counts, resList, cond, MR, tumor){\n  tmp <- log2(counts[MR, ])\n  tmp[is.infinite(tmp)] <- 0\n\n  ccol <- names(table(cond))\n  logFC <- round(unlist(lapply(resList, function(x) x$LGG_GBM_cond_ot[MR, \"logFC\"])), 2)\n  MRFDR <- unlist(lapply(resList, function(x) x$MRA_Cond_ot[MR, \"FDRTFDIFF\"]))\n  FDRLab <- rep(\"\", length(MRFDR))\n  FDRLab[!is.na(MRFDR)] <- paste(\"\\nMR FDR = \", format(MRFDR[!is.na(MRFDR)], digits=3), sep = \"\")\n\n  main <- paste(tumor, \" expression of \", MR, sep = \"\")\n  yLab <- \"log2 expression\"\n  #xLab <- \"Groups\"\n  Names <- paste(ccol, \" N=\", table(cond), sep = \"\")\n  #Names <- paste(\"N=\", table(cond) , \" logFC=\", logFC, FDRLab, sep = \"\")\n  x <- boxplot(tmp ~ cond, col = ccol, main = main, ylab = yLab, names = Names)#, xlab = xLab)\n  textLab <- paste(\"logFC = \", logFC, FDRLab, sep = \"\")\n  yLim <- colMeans(x$stats[1:2, ])\n  text(1:length(ccol), yLim, textLab)\n}\n\n\n###GSEA Functions\n\ninput4GSEA <- function(counts, cond, MInet, MIthresh, MRADEAList, group){\n  counts <- cbind(counts[, cond == group], counts[, cond != group])\n  groupLab <- as.factor(c(rep(1, sum(cond == group)), rep(0, sum(cond != group))))\n\n  MRList <- as.character(MRADEAList$MRA_Cond_ot$TF)\n\n  geneSet <- lapply(MRList, function(MR) which(MInet[MR, ] > MIthresh[MR]))\n  names(geneSet) <- MRList\n\n  ans <- list(counts = counts, groupLab = groupLab, MRList = MRList, geneSet = geneSet)\n\n  return(ans)\n}\n\ninput4GSEA2 <- function(counts, cond, MInet, MIthresh, MRADEAList, corMat, group){\n  counts <- cbind(counts[, cond == group], counts[, cond != group])\n  groupLab <- as.factor(c(rep(1, sum(cond == group)), rep(0, sum(cond != group))))\n\n  MRList <- as.character(MRADEAList$MRA_Cond_ot$TF)\n\n  geneSet <- lapply(MRList, function(MR){\n    tmp <- which(MInet[MR, ] > MIthresh[MR])\n    PosReg <- tmp[corMat[MR, names(tmp)] >= 0]\n    NegReg <- tmp[corMat[MR, names(tmp)] < 0]\n\n    ans <- list(PosReg = PosReg, NegReg = NegReg)\n    return(ans)\n  })\n  names(geneSet) <- MRList\n\n  ans <- list(counts = counts, groupLab = groupLab, MRList = MRList, geneSet = geneSet)\n\n  return(ans)\n}\n\ninput4GSEA2edgeR <- function(counts, cond, MInet, MIthresh, MRADEAList, corMat, group){\n  cond[cond != group] <- \"other\"\n  cond <- as.factor(cond)\n\n  MRList <- as.character(MRADEAList$MRA_Cond_ot$TF)\n\n  geneSet <- lapply(MRList, function(MR){\n    tmp <- which(MInet[MR, ] > MIthresh[MR])\n    PosReg <- tmp[corMat[MR, names(tmp)] >= 0]\n    NegReg <- tmp[corMat[MR, names(tmp)] < 0]\n\n    ans <- list(PosReg = PosReg, NegReg = NegReg)\n    return(ans)\n  })\n  names(geneSet) <- MRList\n\n  ans <- list(counts = counts, groupLab = cond, MRList = MRList, geneSet = geneSet)\n\n  return(ans)\n}\n\nmainGSEA <- function(counts, cond, geneSet, numPerm, pWeight, minRegSize = 20, ncpu){\n\n  message(\"Differential Expression Analysis\")\n  TimeUse(DEG <- runDESeq(counts, cond))\n  DEGres <- DENBStat4GSEA(DEG)\n  corrVec <- DEGres$NBstat\n  names(corrVec) <- rownames(counts)\n\n  cl <- makeCluster(ncpu) # specify ncpu cores to be used in computing\n  registerDoParallel(cl) # parallel backend registration\n\n  message(\"Differential Expression Analysis on Permutations\")\n  permuteMat <- genpermuteMat(cond, times = numPerm)\n  TimeUse(DEGPerm <- DENBStatPermut4GSEA(DEG, permuteMat)) # permutation\n\n  save(cond, DEGres, corrVec, DEGPerm, file = \"tmpGSEA.RData\")\n  rm(counts, cond, DEG, DEGres, permuteMat)\n\n  # Step 2: score normalization\n\n  # DE score normalization\n  message(\"Computing Score normalizations\")\n  geneScoreNorm <- rowMeans(DEGPerm) # normalization factor\n  geneScore <- scoreNormalization(corrVec, geneScoreNorm) # score normalized\n  geneScorePerm <- scoreNormalization(DEGPerm, geneScoreNorm) # scorePerm normalized\n\n  load(\"tmpGSEA.RData\")\n  save(cond, DEGres, corrVec, DEGPerm, geneScore, geneScorePerm, file = \"tmpGSEA.RData\")\n  rm(cond, DEGres, corrVec, geneScoreNorm)\n\n  # Step 3: main GSEA\n\n  #minRegSize filtering\n  regSize <- unlist(lapply(geneSet, length))\n  geneSet <- geneSet[which(regSize >= minRegSize)]\n\n  message(\"Main GSEA Enrichment Analysis\")\n  TimeUse(GSEAres <- GSEAES(geneSet, geneScore, geneScorePerm, pWeight = pWeight))\n  TimeUse(GSEAresTable <- GSEATable(GSEAres, geneSet))\n\n  stopCluster(cl)\n\n  load(\"tmpGSEA.RData\")\n\n  DETORlogRatioRes <- DETORlogRatio(geneScore, geneSet, GSEAres, GSEAresTable)\n\n  GSEAresTable <- cbind(GSEAresTable, DETOR = DETORlogRatioRes$DETOR, logRatio = DETORlogRatioRes$logRatio)\n\n  ans <- list(DEA = DEGres, DEAPerm = DEGPerm, geneScore = geneScore,\n              geneScorePerm = geneScorePerm, ES = GSEAres$ES, ESperm = GSEAres$ESPerm,\n              NESperm = GSEAres$NESperm, NES = GSEAres$NES, Cumsum = GSEAres$Cumsum,\n              LeadingEdge = GSEAres$LeadingEdge, pvalue = GSEAres$pvalue, FDR = GSEAres$FDR,\n              results = GSEAresTable)\n  #rm(\"tmpGSEA.RData\")\n\n  return(ans)\n}\n\nmainGSEA2RTN <- function(counts, cond, geneSet, numPerm, pWeight, minRegSize = 20, ncpu){\n\n  message(\"Differential Expression Analysis\")\n  TimeUse(DEG <- runDESeq(counts, cond))\n  DEGres <- DENBStat4GSEA(DEG)\n  corrVec <- DEGres$NBstat\n  names(corrVec) <- rownames(counts)\n\n  cl <- makeCluster(ncpu) # specify ncpu cores to be used in computing\n  registerDoParallel(cl) # parallel backend registration\n\n  message(\"Differential Expression Analysis on Permutations\")\n  permuteMat <- genpermuteMat(cond, times = numPerm)\n  TimeUse(DEGPerm <- DENBStatPermut4GSEA(DEG, permuteMat)) # permutation\n\n\n  # Step 2: score normalization\n\n  # DE score normalization\n  message(\"Computing Score normalizations\")\n  geneScoreNorm <- rowMeans(DEGPerm) # normalization factor\n  geneScore <- scoreNormalization(corrVec, geneScoreNorm) # score normalized\n  geneScorePerm <- scoreNormalization(DEGPerm, geneScoreNorm) # scorePerm normalized\n\n\n  # Step 3: main GSEA2\n\n  #minRegSize filtering\n  regSize <- unlist(lapply(geneSet, function(MR) length(MR$PosReg) + length(MR$NegReg)))\n  geneSet <- geneSet[which(regSize >= minRegSize)]\n  regSize <- regSize[which(regSize >= minRegSize)]\n\n  message(\"Main GSEA2 Enrichment Analysis\")\n  geneSetUp <- lapply(geneSet, function(MR) MR$PosReg)\n  geneSetDown <- lapply(geneSet, function(MR) MR$NegReg)\n\n  message(\"Main GSEA Enrichment Analysis on GeneSet Up\")\n  TimeUse(GSEAresUp <- GSEAES(geneSetUp, geneScore, geneScorePerm, pWeight = pWeight))\n  TimeUse(GSEAresTableUp <- GSEATable(GSEAresUp, geneSetUp))\n  GSEAresTableUp <- GSEAresTableUp[names(geneSet), ]\n  GSEAresTableUp[, c(\"pvalue\", \"FDR\")] <- empPval(GSEAresUp$ES, GSEAresUp$ESPerm, nTests = length(geneSetUp)*2, correction = GSEAresTableUp$RegSize)\n\n  message(\"Main GSEA Enrichment Analysis on GeneSet Down\")\n  TimeUse(GSEAresDown <- GSEAES(geneSetDown, geneScore, geneScorePerm, pWeight = pWeight))\n  TimeUse(GSEAresTableDown <- GSEATable(GSEAresDown, geneSetDown))\n  GSEAresTableDown <- GSEAresTableDown[names(geneSet), ]\n  GSEAresTableDown[, c(\"pvalue\", \"FDR\")] <- empPval(GSEAresDown$ES, GSEAresDown$ESPerm, nTests = length(geneSetDown)*2, correction = GSEAresTableDown$RegSize)\n\n  stopCluster(cl)\n\n  ESUpDown <- GSEAresTableUp$ES - GSEAresTableDown$ES\n  NESUpDown <- GSEAresTableUp$NES - GSEAresTableDown$NES\n  ESPermUpDown <- GSEAresUp$ESPerm - GSEAresDown$ESPerm\n  GSEAresBoth <- list(ES = ESUpDown, NES = NESUpDown, ESPerm = ESPermUpDown)\n\n  GSEAresTableBoth <- data.frame(TF = names(geneSet), RegSize = regSize, ES = ESUpDown, NES = NESUpDown)\n  GSEAresTableBoth[, c(\"pvalue\", \"FDR\")] <- empPval(ESUpDown, ESPermUpDown)\n\n  GSEAresTableUp <- GSEAresTableUp[order(GSEAresTableBoth$FDR), ]\n  GSEAresTableDown <- GSEAresTableDown[order(GSEAresTableBoth$FDR), ]\n  GSEAresTableBoth <- GSEAresTableBoth[order(GSEAresTableBoth$FDR), ]\n\n  ans <- list(DEA = DEGres, DEAPerm = DEGPerm, geneScore = geneScore, geneScorePerm = geneScorePerm,\n              GSEAresUp = GSEAresUp, GSEAresDown = GSEAresDown, GSEAresBoth = GSEAresBoth,\n              resultsUp = GSEAresTableUp, resultsDown = GSEAresTableDown, resultsBoth = GSEAresTableBoth)\n  #rm(\"tmpGSEA.RData\")\n\n  return(ans)\n}\n\nedgeRDEA4GSEA <- function(geneCounts, offset, groups, baseLine){\n  design <- model.matrix(~ 0 + groups)\n  colnames(design) <- levels(groups)\n\n  DEA <- DGEList(geneCounts, group = groups)\n  message(\"Estimating GLM Common Dispersion\")\n  TimeUse(DEA <- estimateGLMCommonDisp(DEA, design = design, offset = offset))\n  message(\"Estimating GLM Tagwise Dispersion\")\n  TimeUse(DEA <- estimateGLMTagwiseDisp(DEA, design = design, offset = offset))\n\n  message(\"Fitting the GLM Model\")\n  TimeUse(fit <- glmFit(DEA, design = design, offset = offset))\n\n  #condA <- colnames(design)[colnames(design) != baseLine]\n  #contrasts <- makeContrasts(condAvscondB = condA - baseLine, levels = design)\n  contrast <- rep(1, 2)\n  blId <- which(colnames(design) == baseLine)\n  contrast[blId] <- -1\n\n  message(\"Maximum Likelihood Estimate\")\n  TimeUse(test <- glmLRT(fit, contrast = contrast))\n  ans <- topTags(test, n = nrow(DEA$counts))\n  ans <- ans$table\n  #diffGenes <- abs(ans[, \"logFC\"]) >= 1 & ans[, \"FDR\"] <= 0.01\n  #sum(diffGenes)\n\n  return(ans)\n}\n\nedgeRDEAPerm4GSEA <- function(geneCounts, offset, cond, baseLine, numPerm){\n  edgeRDEAapply <- function(i){\n    condPerm <- sample(cond)\n    ans <- edgeRDEA4GSEA(geneCounts, offset = -offset, groups = condPerm, baseLine = baseLine)$LR\n\n    return(ans)\n  }\n\n  ans <- matrix(unlist(lapply(1:numPerm, edgeRDEAapply)), ncol = numPerm)\n  rownames(ans) <- rownames(geneCounts)\n  colnames(ans) <- paste(\"Perm\", 1:numPerm, sep = \"\")\n\n  return(ans)\n}\n\nedgeRDEAPerm4GSEAPar <- function(geneCounts, offset, cond, baseLine, numPerm){\n  edgeRDEAapply <- function(i){\n    condPerm <- sample(cond)\n    ans <- edgeRDEA4GSEA(geneCounts, offset = -offset, groups = condPerm, baseLine = baseLine)$LR\n\n    return(ans)\n  }\n\n  ans <- foreach(i = 1:numPerm, .combine = \"cbind\", .packages = c(\"edgeR\",\"Biobase\"), .export = c(\"edgeRDEA4GSEA\")) %dopar% {\n    edgeRDEAapply(i)\n  }\n  rownames(ans) <- rownames(geneCounts)\n  colnames(ans) <- paste(\"Perm\", 1:numPerm, sep = \"\")\n\n  return(ans)\n}\n\nedgeRDEAPerm4GSEA2 <- function(geneCounts, corrVec, numPerm){\n  ans <- replicate(numPerm, sample(corrVec))\n  rownames(ans) <- rownames(geneCounts)\n  colnames(ans) <- paste(\"Perm\", 1:numPerm, sep = \"\")\n\n  return(ans)\n}\n\nscoreNormalization <- function(scores, normFactor){\n  scores <- scores/normFactor\n  scores[is.na(scores) | is.infinite(scores)] <- 0\n\n  return(scores)\n}\n\nEScumsum <- function(geneSet, geneScore, pWeight = 1){\n  ngene <- length(geneScore) #N\n  nset <- length(geneSet) #nTF\n  geneSetSize <- unlist(lapply(1:nset, function(i) length(geneSet[[i]])))\n  names(geneSetSize) <- names(geneSet) #nGenes in TF regulon\n\n  orderedIdx <- order(geneScore, decreasing = TRUE)\n  geneScoreSorted <- geneScore[orderedIdx]\n  names(orderedIdx) <- names(geneScoreSorted)\n\n  EScore <- matrix(0, nrow = ngene, ncol = nset)\n  for(i in 1:nset){\n    ngeneHit <- geneSetSize[i] #Nh TFi\n    ngeneMiss <- ngene - ngeneHit #(N - Nh)\n    sortIdxHit <- match(geneSet[[i]], orderedIdx)\n    EScore[, i] <- - 1/ngeneMiss # -1/(N - Nh)\n    if(pWeight == 0){\n      EScore[sortIdxHit, i] <- 1/ngeneHit # 1/N\n    } else {\n      geneScoreSortedHit <- geneScoreSorted[sortIdxHit]^pWeight\n      EScore[sortIdxHit, i] <- geneScoreSortedHit/sum(geneScoreSortedHit)\n    }\n  }\n  EScore <- t(apply(EScore, 2, cumsum))\n  rownames(EScore) <- names(geneSet)\n  colnames(EScore) <- names(geneScoreSorted)\n\n  return(EScore)\n}\n\nESPerm <- function (geneSet, geneScorePerm, pWeight = 1) {\n  ngene <- length(geneScore) #N\n  nperm <- ncol(geneScorePerm)\n  nset <- length(geneSet) #nTF\n  geneSetSize <- unlist(lapply(1:nset, function(i) length(geneSet[[i]])))\n  names(geneSetSize) <- names(geneSet) #nGenes in TF regulon\n\n  ans <- foreach(i = 1:nperm, .combine = \"cbind\", .export = c(\"EScumsum\")) %dopar% {\n    orderedIdx <- order(geneScorePerm[, i], decreasing = TRUE)\n    geneScoreSorted <- geneScorePerm[orderedIdx, i]\n    GSEA_cumsum <- EScumsum(geneSet, geneScoreSorted, pWeight)\n    #apply(GSEA_cumsum, 1, max) #geneId maxES (leading edge)\n    apply(GSEA_cumsum, 1, function(i) ifelse(max(i) > - min(i), max(i), min(i)))\n  }\n\n  return(ans)\n}\n\nGSEAES <- function(geneSet, geneScore, geneScorePerm, pWeight = 1){\n  nset <- length(geneSet) #nTF\n  ngenes <- length(geneScore)\n\n  message(\"Computing Enrichment Score\")\n  TimeUse(GSEA_cumsum <- EScumsum(geneSet, geneScore, pWeight = pWeight)) #Phit - Pmiss\n  #GSEA_ES <- apply(GSEA_cumsum, 1, max) #ES(S)\n  GSEA_ES <- apply(GSEA_cumsum, 1, function(i) ifelse(max(i) > - min(i), max(i), min(i)))\n\n  #The leading edge subset of a gene set is the subset of members that contribute most to the ES.\n  #For a positive ES, the leading edge subset is the set of members that appear in the ranked list prior to the peak score.\n  #For a negative ES, it is the set of members that appear subsequent to the peak score.\n\n  message(\"Computing Leading Edge\")\n  #GSEA_leadingEdge <- apply(GSEA_cumsum, 1, which.max) #geneId maxES (leading edge)\n  TimeUse(GSEA_leadingEdge <- unlist(lapply(1:length(GSEA_ES), function(i) which(GSEA_cumsum[i, ] == GSEA_ES[i]))))\n  #GSEA_leadingEdge[GSEA_ES < 0] <- ngenes - GSEA_leadingEdge[GSEA_ES < 0] + 1 tolto per visualizzazione\n  names(GSEA_leadingEdge) <- names(geneSet)\n\n  #tf <- \"CHI3L1\"\n  #lab <- paste(\"Enrichment Score of\", tf)\n  #plot(GSEA_cumsum[tf, ], type = \"l\", main = lab, ylab = \"Enrichment Score\", xlab = \"\")\n  #lines(x = rep(GSEA_leadingEdge[tf], 2), y = c(0, GSEA_ES[tf]))\n  #lines(x = c(0, length(geneScore)), y = rep(0, 2))\n\n  message(\"Computing Enrichment Score on Permutations\")\n  TimeUse(GSEA_ESPerm <- ESPerm(geneSet, geneScorePerm, pWeight = pWeight)) #ES(S) on permutation\n\n  #### toAsk\n  regSize <- unlist(lapply(geneSet, length))\n  GSEA_ES[which(regSize == 0)] <- 0\n  GSEA_ESPerm[which(regSize == 0), ] <- 0\n\n  nperm <- ncol(GSEA_ESPerm)\n\n  #pv <- rep(0, nset)\n  #for(i in 1:nset){\n  #  if(GSEA_ES[i] >= 0){\n  #    posES <- GSEA_ESPerm[i, GSEA_ESPerm[i, ] >= 0]\n  #    pv[i] <- sum(posES >= GSEA_ES[i])/length(posES)\n  #  } else {\n  #    negES <- GSEA_ESPerm[i, GSEA_ESPerm[i, ] < 0]\n  #    pv[i] <- sum(negES <= GSEA_ES[i])/length(negES)\n  #  }\n  #  print(i)\n  #}\n\n\n  #if(GSEA_ES < 0) pv <- rowSums(GSEA_ES >= GSEA_ESPerm)/nperm else\n  #  pv <- rowSums(GSEA_ES <= GSEA_ESPerm)/nperm\n\n  pseudoCount <- nperm/1000\n\n  message(\"Computing Nominal p-values\")\n  pv <- rep(0, nset)\n  ESmean <- rep(0, nset)\n  for(i in 1:nset){\n    if(GSEA_ES[i] < 0){\n      pv[i] <- (sum(GSEA_ESPerm[i, ] < GSEA_ES[i])+pseudoCount)/(nperm+pseudoCount) #removed =\n      #nes[i] = GSEA_ES[i]/abs(mean(GSEA_ESPerm[i, GSEA_ESPerm[i, ] <= 0],na.rm = T))\n      negES <- GSEA_ESPerm[i, GSEA_ESPerm[i, ] <= 0]\n      if(length(negES) == 0){\n        ESmean[i] <- 1\n      } else {\n        ESmean[i] <- abs(mean(negES))\n      }\n    } else {\n      pv[i] <- (sum(GSEA_ESPerm[i, ] > GSEA_ES[i])+pseudoCount)/(nperm+pseudoCount) #removed =\n      #nes[i] = GSEA_ES[i]/abs(mean(GSEA_ESPerm[i, GSEA_ESPerm[i, ] >= 0], na.rm = T))\n      posES <- GSEA_ESPerm[i, GSEA_ESPerm[i, ] >= 0]\n      if(length(posES) == 0){\n        ESmean[i] <- 1\n      } else {\n        ESmean[i] <- abs(mean(posES))\n      }\n    }\n  }\n  names(pv) <- names(geneSet)\n  pv[which(regSize == 0)] <- 1 ###\n  FDR <- p.adjust(pv, method = \"BH\")\n\n  message(\"Computing Normalized Enrichment Score\")\n  #ESmean <- rowMeans(GSEA_ESPerm)\n  GSEA_NES <- GSEA_ES/ESmean\n  GSEA_NESPerm <- GSEA_ESPerm/ESmean\n  GSEA_NES[is.na(GSEA_NES)] <- 0 ###\n  GSEA_NESPerm[is.na(GSEA_NESPerm)] <- 0 ###\n\n  ans <- list(ES = GSEA_ES, ESPerm = GSEA_ESPerm, NESperm = GSEA_NESPerm, NES = GSEA_NES, Cumsum = GSEA_cumsum, LeadingEdge = GSEA_leadingEdge, pvalue = pv, FDR = FDR)\n\n  return(ans)\n}\n\nempPval <- function(GSEA_ES, GSEA_ESPerm, nTests = NULL, correction = NULL){\n  nset <- length(GSEA_ES)\n  nperm <- ncol(GSEA_ESPerm)\n\n  pseudoCount <- nperm/1000\n\n  pv <- rep(0, nset)\n  for(i in 1:nset){\n    if(GSEA_ES[i] < 0) pv[i] <- (sum(GSEA_ESPerm[i, ] < GSEA_ES[i])+pseudoCount)/(nperm+pseudoCount) else\n      pv[i] <- (sum(GSEA_ESPerm[i, ] > GSEA_ES[i])+pseudoCount)/(nperm+pseudoCount) #removed =\n  }\n  names(pv) <- names(GSEA_ES)\n  if(!is.null(correction)) pv[which(correction == 0)] <- 1 ###\n  if(is.null(nTests)) nTests <- length(pv)\n  FDR <- p.adjust(pv, method = \"BH\", n = nTests)\n\n  ans <- cbind(pvalue = pv, FDR = FDR)\n  return(ans)\n}\n\nGSEATable <- function(GSEAres, geneSet){\n  nset <- length(geneSet)\n  nperm <- ncol(GSEAres$ESperm)\n\n  TFs <- names(geneSet)\n  geneSetSize <- unlist(lapply(1:nset, function(i) length(geneSet[[i]])))\n\n  ans <- data.frame(TF = TFs, RegSize = geneSetSize, ES = GSEAres$ES, NES = GSEAres$NES,\n                    pvalue = GSEAres$pvalue, FDR = GSEAres$FDR, LeadingEDGE = GSEAres$LeadingEdge)\n  ans <- ans[order(ans$FDR), ]\n\n  return(ans)\n}\n\nGSEATableOld <- function(GSEA_res, geneSet){\n  nset <- length(geneSet) #nTF\n  #compute p-value and FDR\n  nperm <- ncol(GSEA_res$ESperm)\n  pval <- rowSums(GSEA_res$ES <= GSEA_res$ESperm)/nperm\n  #FDR <- sapply(GSEA_ES, function(x) median( colSums( x <= GSEA_ESPerm)/sum(x <= GSEA_ES)))\n  #FDR <- ifelse(FDR > 1, 1, FDR)\n  FDR <- p.adjust(pval,method=\"BH\")\n\n  TFs <- names(geneSet)\n  geneSetSize <- unlist(lapply(1:nset, function(i) length(geneSet[[i]] )))\n  ans<- data.frame(TF = TFs, RegSize = geneSetSize, ES = GSEA_res$ES  , pvalue = pval, FDR = FDR, LeadingEDGE = GSEA_res$LeadingEdge)\n\n  return(ans)\n}\n\nDETORlogRatio <- function(geneScore, geneSet, GSEAres, GSEAresTable){\n  geneScoreSorted <- names(sort(geneScore, decreasing = TRUE))\n\n  GS <- unlist(lapply(geneSet, function(x) length(x)))\n  GS <- GS[rownames(GSEAresTable)]\n  RS <- length(geneScoreSorted)\n  GSle <- RSle <- rep(0, length(GS))\n  for(i in 1:length(GS)){\n    MR <- names(GS)[i]\n    if(GSEAres$ES[MR] >= 0) LEgenes <- geneScoreSorted[1:GSEAres$LeadingEdge[MR]] else\n      LEgenes <- geneScoreSorted[GSEAres$LeadingEdge[MR]:length(geneScoreSorted)]\n    idx <- which(names(geneSet) == MR)\n    GSle[i] <- length(intersect(names(geneSet[[idx]]), LEgenes))\n    RSle[i] <- length(LEgenes)\n  }\n  DETOR <- (GSle/RSle)/(GS/RS)\n  #ngenes - blueGSEA$LeadingEdge[blueGSEA$ES < 0] + 1\n\n  logRatio <- rep(0, nrow(GSEAresTable))\n  names(logRatio) <- rownames(GSEAresTable)\n  for(i in 1:length(logRatio)){\n    MR <- names(logRatio)[i]\n    bLEgenes <- geneScoreSorted[1:GSEAres$LeadingEdge[MR]]\n    aLEgenes <- geneScoreSorted[GSEAres$LeadingEdge[MR]:length(geneScoreSorted)]\n    idx <- which(names(geneSet) == MR)\n    GSble <- length(intersect(names(geneSet[[idx]]), bLEgenes))\n    GSale <- length(intersect(names(geneSet[[idx]]), aLEgenes))\n    RSble <- length(bLEgenes)\n    RSale <- length(aLEgenes)\n    logRatio[i] <- (GSble/RSble)/(GSale/RSale)\n  }\n\n  ans <- list(DETOR = DETOR, logRatio = logRatio)\n  return(ans)\n}\n\nGSEADensity <- function(GSEAres, geneSet, from, to){\n  #from <- 0\n  #to <- 3.5\n  adjustParam <- 0.5\n\n  NESDensity <- density(GSEAres$NES, adjust = adjustParam, from = from, to = to)\n  xAxis <- NESDensity$x\n  NESDensity <- NESDensity$y/sum(NESDensity$y)\n\n  ESPermDensity <- apply(GSEAres$ESperm, 2, function(perm) {\n    d <- density(perm, adjust = adjustParam, from = from, to = to)\n    d$y/sum(d$y)\n  })\n  ESPermDensityMean <- rowMeans(ESPermDensity)\n\n  xAxisRange <- range(xAxis)\n  yAxisRange <- max(ESPermDensity, NESDensity)\n  yAxisRange <- c(- 0.3 * yAxisRange, yAxisRange)\n\n  ccol <- c(\"gray\", \"red\", \"blue\", \"black\")\n  plot(xAxis, NESDensity, xlim = xAxisRange, ylim = 1.2 * yAxisRange,\n       type = \"l\", lwd = 2, col = ccol[3], xlab = \"NES\", ylab = \"P(NES)\",\n       main = \"Observed and Null Densities\")\n  lines(xAxis, ESPermDensityMean, lwd = 2, col = ccol[2])\n  tmp <- apply(ESPermDensity, 2, function(perm) lines(xAxis, perm, lwd = 1, col = ccol[1]))\n\n  nset <- length(geneSet)\n  tmp <- lapply(1:nset, function(i) lines(c(GSEAres$NES[i], GSEAres$NES[i]),\n                                          c(-0.2 * max(NESDensity, ESPermDensity), 0), lwd = 1, lty = 1, col = ccol[4]))\n\n\n  legendLab <- c(\"Null Densities\", \"Null Density Avg\", \"Observed Density\", \"Observed NES\")\n\n  lty <- rep(1, 4)\n  lwd <- rep(2, 4)\n  legend(x = 2, y = 1.2 * yAxisRange[2], legend = legendLab, lty = lty, lwd = lwd, col = ccol, cex = 0.9)\n\n  ans <- list(NESDensity = NESDensity, ESPermDensity = ESPermDensity, ESPermDensityMean = ESPermDensityMean, xAxis = xAxis)\n\n  return(ans)\n}\n\nNESplot <- function(GSEAres, MR, geneSet, geneScore){\n  ngenes <- length(geneScore)\n  geneScoreIdx <- order(geneScore, decreasing = TRUE)\n  geneScoreSorted <- sort(geneScore, decreasing = TRUE)\n\n  RES <- GSEAres$Cumsum[MR, ]\n  minRES <- min(RES)\n  maxRES <- max(RES)\n  if(maxRES < 0.3) maxRES <- 0.3\n  if(minRES > -0.3) minRES <- -0.3\n  delta <- (maxRES - minRES) * 0.5\n\n  minPlot <- minRES - 2 * delta\n  maxPlot <- maxRES\n  maxGeneScore <- max(geneScore)\n  minGeneScore <- 0#min(geneScore)\n\n  geneScoreLine <- (geneScoreSorted - minGeneScore)/(maxGeneScore - minGeneScore) * 1.25 * delta + minPlot\n  zeroGeneScoreLine <- (-minGeneScore/(maxGeneScore - minGeneScore)) * 1.25 * delta + minPlot\n\n  mainLab <- paste(\"Enrichment Score of\", MR)\n  xLab <- paste(\"Number of genes: \", ngenes, \", \", length(geneSet[[MR]]), \" in gene set\", sep = \"\")\n  plot(1:ngenes, RES, main = mainLab, sub = xLab,\n       xlab = \"Gene List Index\", ylab = \"Running Enrichment Score (RES)\",\n       xlim = c(1, ngenes), ylim = c(minPlot, maxPlot), type = \"l\",\n       lwd = 2, cex = 1, col = 2)\n  lines(c(1, ngenes), c(0, 0), lwd = 1, lty = 2, cex = 1, col = 1)\n\n  lines(c(GSEAres$LeadingEdge[MR], GSEAres$LeadingEdge[MR]), c(minPlot, maxPlot),\n        lwd = 1, lty = 3, cex = 1, col = 2)\n\n  temp <- sapply(match(geneSet[[MR]], geneScoreIdx), function(x) {\n    lines(c(x, x), c(minPlot + 1.25 * delta, minPlot + 1.75 * delta), lwd = 1, lty = 1, cex = 1, col = 1)\n  })\n\n  for(k in seq(1, ngenes, ceiling(ngenes/500))) {\n    lines(c(k, k), c(zeroGeneScoreLine, geneScoreLine[k]),\n          lwd = 1, cex = 1, col = colors()[12])\n  }\n  lines(1:ngenes, geneScoreLine, type = \"l\", lwd = 1, cex = 1, col = 1)\n  lines(c(1, ngenes), c(zeroGeneScoreLine, zeroGeneScoreLine), lwd = 1, lty = 1, cex = 1, col = 1)\n  legTxt <- paste(\"Leading Edge at \", GSEAres$LeadingEdge[MR], \" - NES: \",\n                  signif(GSEAres$NES[MR], digits = 3), \"\\n p-val=\", signif(GSEAres$pvalue[MR], digits = 3),\n                  \" - FDR=\", signif(GSEAres$FDR[MR], digits = 3),\n                  sep = \"\", collapse = \"\")\n  text(x = GSEAres$LeadingEdge[MR], y = -0.1 * delta, adj = c(0, 1), labels = legTxt, cex = 1)\n}\n\n\n###GSEA2 Functions\n\ncheckOverlap <- function(geneSet, MR, rsc){\n  # check overlap of gene sets and ranked list\n  isgs <- rep(0, length(rsc))\n  #b1 <- which(pn == 1)\n  zeroStat <- which(rsc == 0)\n  b1 <- which(rsc > 0)\n  if(length(zeroStat) != 0) b1 <- c(b1, zeroStat[1:(length(zeroStat)/2)])\n  a <- intersect(names(rsc)[b1], names(geneSet[[MR]]$PosReg))\n  b11 <- which(names(rsc)[b1] %in% a)\n\n  #b2 <- which(pn == -1)\n  b2 <- which(rsc < 0)\n  if(length(zeroStat) != 0) b2 <- c(b2, zeroStat[(length(zeroStat)/2+1):length(zeroStat)])\n  a <- intersect(names(rsc)[b2], names(geneSet[[MR]]$NegReg))\n  b22 <- which(names(rsc)[b2] %in% a)\n\n  isgs[c(b1[b11], b2[b22])] <- 1\n  #sum(isgs[MR])\n\n  return(isgs)\n}\n\nGSEAcumsum2 <- function(geneSet, rsc, pWeight = pWeight){\n  nSet <- length(geneSet)\n\n  ans <- foreach(i = 1:nSet, .export = c(\"checkOverlap\")) %dopar% {\n    isgs <- checkOverlap(geneSet, names(geneSet)[i], rsc)\n\n    score_hit <- cumsum((abs(rsc*isgs))^pWeight)\n    score_hit <- score_hit/score_hit[length(score_hit)]\n    score_miss <- cumsum(1 - isgs)\n    score_miss <- score_miss/score_miss[length(score_miss)]\n    EScumsum <- score_hit - score_miss\n    ES <- max(EScumsum) + min(EScumsum)\n\n    isen <- rep(0, length(EScumsum))\n    if(ES < 0){\n      ixpk <- which(EScumsum == min(EScumsum))\n      isen[ixpk:length(isen)] <- 1\n      ledge <- names(rsc)[(isen == 1) & (isgs == 1)]\n      ledge <- ledge[length(ledge):1]\n    } else {\n      ixpk <- which(EScumsum == max(EScumsum))\n      isen[1:ixpk] <- 1\n      ledge <- names(rsc)[(isen == 1) & (isgs == 1)]\n    }\n\n    ans <- list(EScumsum = EScumsum, ES = ES, LeadingEdge = ledge, LEPos = ixpk)\n    return(ans)\n  }\n  EScumsum <- matrix(unlist(lapply(ans, function(x) x$EScumsum)), nrow = nSet, byrow = TRUE)\n  ES <- unlist(lapply(ans, function(x) x$ES))\n  LeadingEdge <- lapply(ans, function(x) x$LeadingEdge)\n  LEPos <- unlist(lapply(ans, function(x) x$LEPos))\n  rownames(EScumsum) <- names(ES) <- names(LeadingEdge) <- names(LeadingEdge) <- names(geneSet)\n  colnames(EScumsum) <- names(rsc)\n\n  ans <- list(EScumsum = EScumsum, ES = ES, LeadingEdge = LeadingEdge, LEPos = LEPos)\n  return(ans)\n}\n\nGSEAPerm2 <- function(geneSet, nSet, regSize, rsc, numPerm, pWeight = pWeight){\n\n  ans <- foreach(i = 1:nSet, .combine = \"rbind\", .export = c(\"checkOverlap\")) %dopar% {\n    bg_ESPerm <- rep(0, numPerm)\n\n    for(np in 1:numPerm){\n      bg_isgs <- rep(0, length(rsc))\n      bg_isgs[sample(1:length(bg_isgs), size = regSize[i])] <- 1\n\n      bg_hit <- cumsum((abs(rsc*bg_isgs))^pWeight)\n      bg_hit <- bg_hit/bg_hit[length(bg_hit)]\n      bg_miss <- cumsum(1 - bg_isgs)\n      bg_miss <- bg_miss/bg_miss[length(bg_miss)]\n      bg_cumsum <- bg_hit - bg_miss\n      bg_ESPerm[np] <- max(bg_cumsum) + min(bg_cumsum)\n    }\n\n    return(bg_ESPerm)\n  }\n  rownames(ans) <- names(geneSet)\n  colnames(ans) <- paste(\"Perm\", 1:numPerm, sep =\"\")\n\n  return(ans)\n}\n\nGSEAES2 <- function(geneSet, rs, rsc, numPerm, pWeight = pWeight){\n  nSet <- length(geneSet)\n  regSize <- unlist(lapply(geneSet, function(x) length(x$PosReg) + length(x$NegReg)))\n\n  message(\"Computing Enrichment Score\")\n  # compute ES\n  TimeUse(GSEA_ES <- GSEAcumsum2(geneSet, rsc, pWeight = pWeight))\n\n  message(\"Computing Enrichment Score on Permutations\")\n  TimeUse(GSEA_ESPerm <- GSEAPerm2(geneSet, nSet, regSize, rsc, numPerm, pWeight = pWeight))\n\n  message(\"Computing Nominal p-values\")\n  pseudoCount <- numPerm/1000\n\n  pv <- rep(0, nSet)\n  NES <- rep(0, nSet)\n  for(i in 1:nSet){\n    if(GSEA_ES$ES[i] < 0){\n      pv[i] <- (sum(GSEA_ESPerm[i, ] < GSEA_ES$ES[i])+pseudoCount)/(numPerm+pseudoCount) #removed =\n      #nes = es/abs(mean(bg.es[bg.es <= 0],na.rm=T))\n      den <- GSEA_ESPerm[i, GSEA_ESPerm[i, ] <= 0]\n      if(length(den) == 0) den <- 1 else\n        den <- abs(mean(den, na.rm = T))\n      NES[i] <- GSEA_ES$ES[i]/den\n    } else {\n      pv[i] <- (sum(GSEA_ESPerm[i, ] > GSEA_ES$ES[i])+pseudoCount)/(numPerm+pseudoCount) #removed =\n      den <- GSEA_ESPerm[i, GSEA_ESPerm[i, ] >= 0]\n      if(length(den) == 0) den <- 1 else\n        den <- abs(mean(den, na.rm = T))\n      NES[i] = GSEA_ES$ES[i]/den\n    }\n  }\n  names(pv) <- names(NES) <- names(geneSet)\n  FDR <- p.adjust(pv, method = \"BH\")\n\n  oddratiopos <- rep(0, nSet)\n  total_hits <- unlist(lapply(geneSet, function(MR) length(intersect(names(rs), names(c(MR$PosReg, MR$NegReg))))))\n  nGenesLE <- unlist(lapply(GSEA_ES$LeadingEdge, length))\n  rest <- total_hits - nGenesLE\n  for(i in 1:nSet){\n    if(total_hits[i] == 0){\n      oddratiopos[i] <- 0\n    }else{\n      if(GSEA_ES$ES[i] > 0){\n        oddratiopos[i] <- (nGenesLE[i]/GSEA_ES$LEPos[i])/(rest[i]/(length(rsc) - GSEA_ES$LEPos[i]))\n      }else{\n        oddratiopos[i] <- (nGenesLE[i]/(length(rsc) - GSEA_ES$LEPos[i])/(rest[i]/GSEA_ES$LEPos[i]))\n      }\n    }\n  }\n  names(oddratiopos) <- names(geneSet)\n\n  ans <- list(ES = GSEA_ES$ES, ESPerm = GSEA_ESPerm, NES = NES, Cumsum = GSEA_ES$EScumsum, LeadingEdge = GSEA_ES$LeadingEdge,\n              LEPos = GSEA_ES$LEPos, pvalue = pv, FDR = FDR, oddratiopos = oddratiopos)\n\n  return(ans)\n}\n\nGSEATable2 <- function(GSEAres, geneSet){\n  nset <- length(geneSet)\n\n  TFs <- names(geneSet)\n  geneSetSizeUp <- unlist(lapply(1:nset, function(i) length(geneSet[[i]][[1]])))\n  geneSetSizeDown <- unlist(lapply(1:nset, function(i) length(geneSet[[i]][[2]])))\n  regSizeTot <- geneSetSizeUp + geneSetSizeDown\n\n  ans <- data.frame(TF = TFs, RegSizeUp = geneSetSizeUp, RegSizeDown = geneSetSizeDown, RegSize = regSizeTot,\n                    ES = GSEAres$ES, NES = GSEAres$NES, pvalue = GSEAres$pvalue, FDR = GSEAres$FDR,\n                    LeadingEDGE = GSEAres$LEPos, oddratiopos = GSEAres$oddratiopos)\n  ans <- ans[order(ans$FDR), ]\n\n  return(ans)\n}\n\nmainGSEA2 <- function(counts, cond, geneSet, numPerm, pWeight = 1, ncpu){\n\n  message(\"Differential Expression Analysis\")\n  #TimeUse(DEG <- edgeRDEA4GSEA(counts, offset = NULL, groups = cond, baseLine = \"other\"))\n  #corrVec <- DEG$LR\n  #names(corrVec) <- rownames(counts)\n\n  TimeUse(DEG <- runDESeq(counts, cond))\n  DEGres <- DENBStat4GSEA(DEG)\n  rs <- DEGres$NBstat\n  names(rs) <- rownames(counts)\n\n  # combine ranked list and score\n  #rkc <- c(rk,rk) #sono i names di rsc\n  rsc <- c(rs, -rs)\n  #pn <- c(rep(1, length(rs)), rep(-1,length(rs)))\n  tmp <- order(rsc, decreasing = T)\n  #rkc <- rkc[tmp]\n  rsc <- rsc[tmp]\n  #pn <- pn[tmp]\n\n  cl <- makeCluster(ncpu) # specify ncpu cores to be used in computing\n  registerDoParallel(cl) # parallel backend registration\n\n  message(\"Main GSEA2 Enrichment Analysis\")\n  TimeUse(GSEAres <- GSEAES2(geneSet, rs, rsc, numPerm, pWeight = pWeight))\n  TimeUse(GSEAresTable <- GSEATable2(GSEAres, geneSet))\n\n  stopCluster(cl)\n\n  ans <- list(DEA = DEGres, ES = GSEAres$ES, ESperm = GSEAres$ESPerm, NES = GSEAres$NES, Cumsum = GSEAres$Cumsum,\n              LeadingEdge = GSEAres$LeadingEdge, results = GSEAresTable)\n  return(ans)\n}\n\n\nCreateMatrixRnaseqV2 <- function(PathFile,TumorName,Tecnology,FileManifest){\n\n  PathDestination <-paste(PathFile, TumorName,\"_\", Tecnology,sep=\"\")\n  setwd(PathDestination)\n\n  lf <- as.matrix(list.files(PathDestination))\n  lf <- lf [grep(\"rsem\",lf),]\n  refFile <- read.delim(lf[1],stringsAsFactors = F)\n\n  FileManifest <- as.matrix(FileManifest)\n  MatrixGE <- matrix(0, nrow=nrow(refFile), ncol = nrow(FileManifest))\n  rownames(MatrixGE) <- refFile[,1]\n  colnames(MatrixGE) <- substr(FileManifest[,\"Barcode\"],1,16)\n\n  for (i in 1:nrow(FileManifest)){\n    FileName <- FileManifest[i,\"FileName\"]\n    sampleTable <-  read.delim(FileName,stringsAsFactors = F)\n    MatrixGE[,i] <- sampleTable$raw_count\n    #print( paste(\"File n. \",i,\" of \",nrow(FileManifest),\" \", FileName, \"...done.\" ))\n  }\n  MatrixGE <- round(MatrixGE)\n  return( MatrixGE)\n}\n\n\n\nCreateFileManifest <- function(PathFile,TumorName,Tecnology, newSamples=F , PathFileManifest = NULL ){\n\n  PathDestination <-paste(PathFile, TumorName,\"_\", Tecnology,sep=\"\")\n  lf <- as.matrix(list.files(PathDestination))\n  lf <- lf [grep(\"rsem\",lf),]\n  FileManifest <- matrix(0,length(lf),3)\n  colnames(FileManifest) <- c(\"FileName\",\"uuid\",\"Barcode\")\n  FileManifest <- as.data.frame(FileManifest)\n\n  FileManifest$FileName <- lf\n  FileManifest$uuid <- unlist(lapply(strsplit(lf,\".\",fixed = T), function (x) x[3] ))\n\n\n  if (newSamples == F){\n  for ( j in 1:nrow(FileManifest)){\n    site <- \"https://tcga-data.nci.nih.gov/uuid/uuidws/metadata/xml/uuid/\"\n    site2 <- paste(site,FileManifest[j,\"uuid\"],sep=\"\")\n    x<- as.character(getURL(site2))\n    x2 <- unlist(strsplit(x,\"<barcode>\"))[2]\n    x3 <- unlist(strsplit(x2,\"</barcode>\"))[1]\n    FileManifest[j,\"Barcode\"] <- as.character(x3)\n    print( paste( \"sample \",  FileManifest[j,\"uuid\"], \" n. \", j, \"of \",nrow(FileManifest), \"with barcode \", as.character(x3), \"done.\"  ))\n  }\n  }\n\n  else {\n    FileManifest_new <- FileManifest\n    PathFileManifest <- gsub(\"/TCGA_data/\",\"\",PathFile)\n    setwd(PathFileManifest)\n    fileToLoad <- paste(TumorName, \"_FileManifest.RData\",sep=\"\")\n    load(fileToLoad)\n    uuidNew <- setdiff(FileManifest_new$uuid, FileManifest$uuid)\n\n    if ( length(uuidNew)!=0){\n      FileManifest_new <- FileManifest_new[FileManifest_new$uuid %in% as.character(uuidNew),]\n\n\n\n      for ( j in 1:nrow(FileManifest_new)){\n        site <- \"https://tcga-data.nci.nih.gov/uuid/uuidws/metadata/xml/uuid/\"\n        site2 <- paste(site,FileManifest_new[j,\"uuid\"],sep=\"\")\n        x<- as.character(getURL(site2))\n        x2 <- unlist(strsplit(x,\"<barcode>\"))[2]\n        x3 <- unlist(strsplit(x2,\"</barcode>\"))[1]\n        FileManifest_new[j,\"Barcode\"] <- as.character(x3)\n        print( paste( \"sample \",  FileManifest_new[j,\"uuid\"], \" n. \", j, \"of \",nrow(FileManifest_new), \"with barcode \", as.character(x3), \"done.\"  ))\n      }\n      FileManifest <- rbind(FileManifest,FileManifest_new)\n    }\n\n   else { print( paste(\"File Manifest of \", TumorName, \" complete.\",sep =\"\")) }\n  }\n\n\n  return( FileManifest)\n}\n\n\nDownloadTumor_fromTCGA <- function(TCGA_tumor_data,PathFile, TumorName, Tecnology, newSamples=F){\n\n  TCGA_tumor_data_rnaSeqV2 <- TCGA_tumor_data[ TCGA_tumor_data[,\"Platform\"] == Tecnology,]\n  TCGA_tumor_data_rnaSeqV2 <- TCGA_tumor_data_rnaSeqV2[ TCGA_tumor_data_rnaSeqV2[,\"Tumor\"] == TumorName,]\n  TCGA_tumor_data_rnaSeqV2 <- TCGA_tumor_data_rnaSeqV2[ TCGA_tumor_data_rnaSeqV2[,\"Tumor\"] == TumorName,]\n\n  PathDestination <-paste(PathFile, TumorName,\"_\", Tecnology,sep=\"\")\n  dir.create(PathDestination)\n  setwd(PathDestination)\n\nif (newSamples == F){\n  for( i in 1: nrow(TCGA_tumor_data_rnaSeqV2)){\n    url1 <- TCGA_tumor_data_rnaSeqV2[i,\"URL\"]\n    x<-getURL(url1)\n    filename <- unlist(strsplit(url1,\"/\"))\n    filename <- filename[length(filename)]\n    names(filename) <-NULL\n    filename <- paste(filename,\".txt\",sep=\"\")\n    writeLines(x, filename)\n    print( paste(TCGA_tumor_data_rnaSeqV2[i,\"Tumor\"],\"...sample n.\",i, \" of \", nrow(TCGA_tumor_data_rnaSeqV2), \" in file..\", filename,sep=\"\"))\n  }\n}\n\nelse {\n\n  TCGA_tumor_data_rnaSeqV2_new <- TCGA_tumor_data_rnaSeqV2\n\n  Sample_downloaded <- as.matrix(gsub(\".txt\",\"\",list.files(path = PathDestination)))\n  FileTodownload <- TCGA_tumor_data_rnaSeqV2[,\"URL\"]\n  tmp<-strsplit2(FileTodownload,\"/\")\n  tmp <- tmp[,ncol(tmp)]\n  TCGA_tumor_data_rnaSeqV2_new <- cbind(tmp,TCGA_tumor_data_rnaSeqV2_new)\n  rownames(TCGA_tumor_data_rnaSeqV2_new)<-TCGA_tumor_data_rnaSeqV2_new[,\"tmp\"]\n\n  Sample_to_download <- as.matrix(setdiff(tmp,Sample_downloaded))\n  if( length(Sample_to_download)!=0){\n\n    TCGA_tumor_data_rnaSeqV2_new <- TCGA_tumor_data_rnaSeqV2_new[Sample_to_download,]\n\n  for( i in 1: nrow(TCGA_tumor_data_rnaSeqV2_new)){\n    url1 <- TCGA_tumor_data_rnaSeqV2_new[i,\"URL\"]\n    x<-getURL(url1)\n    filename <- unlist(strsplit(url1,\"/\"))\n    filename <- filename[length(filename)]\n    names(filename) <-NULL\n    filename <- paste(filename,\".txt\",sep=\"\")\n    writeLines(x, filename)\n    print( paste(TCGA_tumor_data_rnaSeqV2_new[i,\"Tumor\"],\"...sample n.\",i, \" of \", nrow(TCGA_tumor_data_rnaSeqV2_new), \" in file..\", filename,sep=\"\"))\n  } }\n  else{\n    print( paste(TCGA_tumor_data_rnaSeqV2_new[1,\"Tumor\"], \" with n \", nrow(TCGA_tumor_data_rnaSeqV2) ,\"...sample...complete\",sep=\"\"))\n  }\n\n}\n\n}\n\n\n\n\n\n\nFindingTCGAData <- function(ListofTumor, tmpDir = getwd(),verboseType = FALSE){\n  require(\"RCurl\")\n\n  siteTCGA <- \"https://tcga-data.nci.nih.gov/tcgafiles/ftp_auth/distro_ftpusers/anonymous/tumor/\"\n  TCGA_tumor_data <- NULL\n\n  for(i in 1:length(ListofTumor)){\n    tumor <- ListofTumor[i]\n    setwd(tmpDir)\n    #Description <- paste(siteTCGA, tolower(tumor), platform, sep=\"\")\n    Description <- paste(siteTCGA, tolower(tumor), \"/cgcc/unc.edu/\", sep=\"\")\n\n\n    if(interactive() && (\"ssl\" %in% names(curlVersion()$features)) && url.exists(Description)) {\n      tmp = tryCatch(getURL(Description, verbose = verboseType, ftp.use.epsv = TRUE, dirlistonly = TRUE,ssl.verifypeer = FALSE ), error = function(e) {\n        getURL(Description, verbose = verboseType, ftp.use.epsv = TRUE, dirlistonly = TRUE,ssl.verifypeer = FALSE) })\n    }\n\n\n\n   # tmp <- getURL(Description, verbose = verboseType, ftp.use.epsv = TRUE, dirlistonly = TRUE)\n\n\n\n\n    write.csv(tmp, \"tmp.csv\")\n\n    tmp2 <- read.csv(\"tmp.csv\", sep = \";\", stringsAsFactors = F)\n    tmp3 <- tmp2[grep(\"rnaseq\", apply(tmp2, 1, tolower)), ]\n    tmp3 <- lapply(strsplit(tmp3, \"href=\"), function(x) x[2])\n    platform <- unlist(lapply(lapply(tmp3, strsplit, \">\"), function(x) x[[1]][1]))\n    platform <- platform[platform != \"RNASeq/\"]\n\n    for(j in 1:length(platform)){\n      Description_i <- paste(Description, platform[j], unlist(strsplit(platform[j], \"_\"))[2], sep = \"\")\n      Description_i_ord <- paste(Description_i, \"?C=M;O=D\", sep = \"\")\n      tmp <- getURL(Description_i_ord, verbose = verboseType, ftp.use.epsv = TRUE, dirlistonly = TRUE)\n      write.csv(tmp, \"tmp.csv\")\n      tmp2 <- read.csv(\"tmp.csv\", sep = \";\", stringsAsFactors = F)\n\n      tmp3 <- tmp2[grep(\"level_3\", apply(tmp2, 1, tolower)), ]\n      tmp3 <- unlist(lapply(strsplit(tmp3, \"href=\"), function(x) x[2]))\n      tmp3 <- unlist(lapply(strsplit(tmp3, \">\"), function(x) x[1]))\n      tmp4 <- tmp3[grep(\"/\", tmp3)[1]]\n\n      Description_i <- paste(Description_i, tmp4, sep = \"\")\n      tmp <- getURL(Description_i, verbose = verboseType, ftp.use.epsv = TRUE, dirlistonly = TRUE)\n      write.csv(tmp, \"tmp.csv\")\n      tmp2 <- read.csv(\"tmp.csv\", sep = \";\", stringsAsFactors = F)\n\n      check <- sub(\"/\", \"\", unlist(strsplit(platform[j], \"_\"))[2])\n      if(check == \"rnaseq\") tmp3 <- tmp2[grep(\"gene.quantification\", apply(tmp2, 1, tolower)), ] else\n        tmp3 <- tmp2[grep(\"rsem.genes.results\", apply(tmp2, 1, tolower)), ]\n\n      tmp3 <- unlist(lapply(strsplit(tmp3, \"href=\"), function(x) x[2]))\n      tmp4 <- matrix(unlist(lapply(strsplit(tmp3, \">\"), function(x) x[c(1, 3)])), ncol = 2, byrow = T)\n      tmp5 <- lapply(strsplit(tmp4[, 2], \" \"), function(x) x[x != \"\"])\n\n      toAdd <- matrix(\"\", nrow = length(tmp5), ncol = 5)\n      toAdd[, 1] <- tumor\n      toAdd[, 2] <- check\n      toAdd[, 3] <- unlist(lapply(tmp5, function(x) paste(x[1], x[2])))\n      toAdd[, 4] <- unlist(lapply(tmp5, function(x) x[3]))\n      toAdd[, 5] <- paste(Description_i, tmp4[, 1], sep = \"\")\n\n      TCGA_tumor_data <- rbind(TCGA_tumor_data, toAdd)\n      print( paste( \"Tumor n. \", i, \" of \",length(ListofTumor), \" ... \",  tumor, \"with platform \", check, \" completed.\"))\n    }\n\n  }\n\n  colnames(TCGA_tumor_data) <- c(\"Tumor\", \"Platform\", \"Date\", \"Size\", \"URL\")\n\n  TCGA_tumor_data <- as.data.frame(TCGA_tumor_data, stringsAsFactors= F)\n  return(TCGA_tumor_data)\n}\n\nSelectedSample <- function(Dataset,typesample){\n  if( typesample ==\"tumor\"){\n  Dataset <- Dataset[,which( as.numeric(substr(colnames(Dataset), 14, 15)) < 10) ]\n  }\n\n  if( typesample ==\"normal\"){\n    Dataset <- Dataset[,which( as.numeric(substr(colnames(Dataset), 14, 15)) >=10) ]\n  }\n\n  return(Dataset)\n\n}\n\nFindPubmedTFgene <- function(tumor,CANCER_diff_normUQ_level_tf,topgenes){\n  site <- \"http://www.ncbi.nlm.nih.gov/pubmed/?term=\"\n\n  CANCER_diff_normUQ_level_tf <- CANCER_diff_normUQ_level_tf[1:topgenes,]\n  Pubmed <- matrix(0, nrow(CANCER_diff_normUQ_level_tf), 1)\n\n  for (k in 1:nrow( CANCER_diff_normUQ_level_tf)){\n    CurrentGene <- CANCER_diff_normUQ_level_tf$mRNA[k]\n    site2 <- paste(site,CurrentGene, \"+\", tumor,sep=\"\")\n\n    if(interactive() && (\"ssl\" %in% names(curlVersion()$features)) && url.exists(site2)) {\n      x = tryCatch(getURL(site2), error = function(e) {\n        getURL(site2, ssl.verifypeer = FALSE) })\n    }\n\n    if ( length(grep(\"No items found.\",x))!=1){\n\n      if (length(grep(\"Display Settings\",x))==1){\n        x6 <- 1\n      }\n\n\n      if (length(grep(\"result_count\",x))==1){\n        x2a <- unlist(strsplit(x,\"result_count\"))[2]\n        x3a <-  unlist(strsplit(x2a,\"</h2>\"))[1]\n\n        if( length(grep(\"of\",x3a))!=1){\n          x6 <- as.numeric(unlist(strsplit(x3a,\": \"))[2])\n        } else { x6 <- as.numeric(unlist(strsplit(x3a,\"of \"))[2]) }\n      }\n\n\n      if (length(grep(\"following term was not found\",x))==1){       x6 <- 0     }\n\n      if (length(grep(\"Search instead for\",x))==1){       x6 <- 1     }\n\n      if (CurrentGene ==\"JUN\"){       x6 <- 0     }\n\n      if (CurrentGene ==\"HR\"){       x6 <- 0     }\n\n      if (CurrentGene ==\"HOMEZ\"){       x6 <- 0     }\n\n      if (CurrentGene ==\"ANKAR\"){       x6 <- 0     }\n\n      if (CurrentGene ==\"REST\"){       x6 <- 0     }\n\n      # HR, HOMEZ, ANKAR, REST\n\n      CANCER_diff_normUQ_level_tf[k,\"Pubmed\"]<-x6\n      print(paste(\"Cancer \", tumor, \"with TF n. \",k, \"of \" ,nrow( CANCER_diff_normUQ_level_tf),\" : \", CurrentGene, \"found n. \", x6, \"pubmed.\"))\n\n    }\n\n    else{\n      print(paste(\"Cancer \", tumor, \"with TF n. \",k, \"of \" ,nrow( CANCER_diff_normUQ_level_tf),\" : \", CurrentGene, \"no item found in pubmed.\"))\n      CANCER_diff_normUQ_level_tf[k,\"Pubmed\"]<- 0\n    }\n\n  }\n  return(CANCER_diff_normUQ_level_tf)\n}\n\nFindPubmedTFgene2<- function(tumor,CANCER_diff_normUQ_level_tf,topgenes){\n  site <- \"http://www.ncbi.nlm.nih.gov/pubmed/?term=\"\n\n\n\n  CANCER_diff_normUQ_level_tf <- CANCER_diff_normUQ_level_tf[1:topgenes,]\n  Pubmed <- matrix(0, nrow(CANCER_diff_normUQ_level_tf), 1)\n  PMID <- matrix(0, nrow(CANCER_diff_normUQ_level_tf), 1)\n\n\n  CANCER_diff_normUQ_level_tf <- cbind(CANCER_diff_normUQ_level_tf,Pubmed,PMID)\n  CANCER_diff_normUQ_level_tf<-as.data.frame(CANCER_diff_normUQ_level_tf)\n\n  for (k in 1:nrow( CANCER_diff_normUQ_level_tf)){\n    CurrentGene <- CANCER_diff_normUQ_level_tf$Gene[k]\n    site2 <- paste(site,CurrentGene, \"+\", tumor,sep=\"\")\n\n    if(interactive() && (\"ssl\" %in% names(curlVersion()$features)) && url.exists(site2)) {\n      x = tryCatch(getURL(site2), error = function(e) {\n        getURL(site2, ssl.verifypeer = FALSE) })\n    }\n\n\n\n    if ( length(grep(\"No items found.\",x))!=1){\n\n      if (length(grep(\"Display Settings\",x))==1){\n        x6 <- 1\n        CANCER_diff_normUQ_level_tf[k,\"PMID\"] <- substr(gsub(\"</dt> <dd>\",\"\",unlist(strsplit(x,\"PMID:\"))[2]),1,8)\n\n      }\n\n\n      if (length(grep(\"result_count\",x))==1){\n        x2a <- unlist(strsplit(x,\"result_count\"))[2]\n\n        tmpPMID2 <- unlist(strsplit(x2a,\"UidCheckBox\"))\n        tmpPMID3 <- tmpPMID2[grep(\"<span>\",tmpPMID2)]\n        CANCER_diff_normUQ_level_tf[k,\"PMID\"]<- as.character(paste(substr(tmpPMID3,1,8),collapse=\"; \"))\n\n\n        x3a <-  unlist(strsplit(x2a,\"</h2>\"))[1]\n\n        if( length(grep(\"of\",x3a))!=1){\n          x6 <- as.numeric(unlist(strsplit(x3a,\": \"))[2])\n        } else { x6 <- as.numeric(unlist(strsplit(x3a,\"of \"))[2]) }\n      }\n\n\n      if (length(grep(\"following term was not found\",x))==1){       x6 <- 0     }\n\n      if (length(grep(\"Search instead for\",x))==1){       x6 <- 1     }\n\n      if (CurrentGene ==\"JUN\"){       x6 <- 0     }\n      if (CurrentGene ==\"HR\"){       x6 <- 0     }\n      if (CurrentGene ==\"HOMEZ\"){       x6 <- 0     }\n      if (CurrentGene ==\"ANKAR\"){       x6 <- 0     }\n      if (CurrentGene ==\"REST\"){       x6 <- 0     }\n      if (CurrentGene ==\"BATF\"){       x6 <- 0     }\n      if (CurrentGene ==\"MAX\"){       x6 <- 0     }\n     # if (CurrentGene ==\"FOS\"){       x6 <- 0     }\n      if (CurrentGene ==\"ECD\"){       x6 <- 0     }\n      # HR, HOMEZ, ANKAR, REST\n\n      CANCER_diff_normUQ_level_tf[k,\"Pubmed\"]<-x6\n      print(paste(\"Cancer \", tumor, \"with TF n. \",k, \"of \" ,nrow( CANCER_diff_normUQ_level_tf),\" : \", CurrentGene, \"found n. \", x6, \"pubmed.\"))\n\n    }\n\n    else{\n      print(paste(\"Cancer \", tumor, \"with TF n. \",k, \"of \" ,nrow( CANCER_diff_normUQ_level_tf),\" : \", CurrentGene, \"no item found in pubmed.\"))\n      CANCER_diff_normUQ_level_tf[k,\"Pubmed\"]<- 0\n    }\n\n  }\n\n  CANCER_diff_normUQ_level_tf <- CANCER_diff_normUQ_level_tf[order(CANCER_diff_normUQ_level_tf$Pubmed,decreasing=T),]\n  CANCER_diff_normUQ_level_tf[CANCER_diff_normUQ_level_tf$Pubmed == 1,][ which( nchar(CANCER_diff_normUQ_level_tf[CANCER_diff_normUQ_level_tf$Pubmed == 1,]$PMID) > 8),\"PMID\"] <- substr(CANCER_diff_normUQ_level_tf[CANCER_diff_normUQ_level_tf$Pubmed == 1,][ which( nchar(CANCER_diff_normUQ_level_tf[CANCER_diff_normUQ_level_tf$Pubmed == 1,]$PMID) > 8),\"PMID\"],1,8)\n  CANCER_diff_normUQ_level_tf[CANCER_diff_normUQ_level_tf$Pubmed == 0,\"PMID\"]<-0\n\n\n\n  return(CANCER_diff_normUQ_level_tf)\n}\n\n\n\nCancerAnalysisTCGA <- function(PathFileTumor,CancerName,Platform_type,FileManifest,tumorPubmed,IPA_transcription_factors){\nlibrary(RCurl)\n\nData_CANCER <- CreateMatrixRnaseqV2(PathFileTumor,CancerName,Platform_type,FileManifest)\nprint(paste(\"STEP1..Matrix RnaseqV2 for \", CancerName, \" with n. \", nrow(Data_CANCER), \" genes and \", ncol(Data_CANCER),\"samples...OK\" ))\n\nData_CANCER_normUQ <- RnaSeqNormalization(Data_CANCER,geneInfo)\nprint(paste(\"STEP2..Normalization for \", CancerName, \" with n. \", nrow(Data_CANCER_normUQ), \" genes and \", ncol(Data_CANCER_normUQ),\"samples...OK\" ))\n\nData_CANCER_normUQ_filt <- RnaSeqFilt(Data_CANCER_normUQ,0.25)\nprint(paste(\"STEP3..Filter quantile for \", CancerName, \" with n. \", nrow(Data_CANCER_normUQ_filt), \" genes and \", ncol(Data_CANCER_normUQ_filt),\"samples...OK\" ))\n\nData_CANCER_normUQ_filt_tumor <- SelectedSample(Data_CANCER_normUQ_filt,\"tumor\")\nData_CANCER_normUQ_filt_normal <- SelectedSample(Data_CANCER_normUQ_filt,\"normal\")\n\nprint(paste(\"STEP4..Sample found for \", CancerName, \" with n. \", ncol(Data_CANCER_normUQ_filt_tumor), \" tumor and \", ncol(Data_CANCER_normUQ_filt_normal),\"normal samples...OK\" ))\n\nif ( length(Data_CANCER_normUQ_filt_normal)!=0){\nperc <- ncol(Data_CANCER_normUQ_filt_normal)/ncol(Data_CANCER_normUQ_filt_tumor)\n} else { perc <- 0}\n\n\nif( perc >= 0.05 ){\nprint(paste(\"Finding TR candidate with DEA with perc \", perc, sep =\"\"))\nCANCER_diff_normUQ <- DEA_edge5(Data_CANCER_normUQ_filt_normal,Data_CANCER_normUQ_filt_tumor, \"Normal\", \"Tumor\")\nprint(paste(\"STEP5.. DEA for \", CancerName, \" completed.\"))\n\nCANCER_diff_normUQ_level <- CreateTabLevel( as.matrix(rownames(CANCER_diff_normUQ)),CANCER_diff_normUQ,\"Tumor\",\"Normal\",Data_CANCER_normUQ_filt_tumor,Data_CANCER_normUQ_filt_normal,typeOrder=T)\nCANCER_diff_normUQ_level_tf <- CANCER_diff_normUQ_level[rownames(CANCER_diff_normUQ_level) %in% IPA_transcription_factors$Gene,]\nCANCER_diff_normUQ_level_tf <- CANCER_diff_normUQ_level_tf[order(CANCER_diff_normUQ_level_tf$Delta,decreasing=T),]\nCANCER_diff_normUQ_level_tf <- CANCER_diff_normUQ_level_tf[abs(CANCER_diff_normUQ_level_tf$logFC) >= 1,]\n\nCANCER_diff_normUQ_level_tf_pubmed <- FindPubmedTFgene(tumorPubmed,CANCER_diff_normUQ_level_tf,topgenes=nrow(CANCER_diff_normUQ_level_tf))\n\nprint(paste(\"STEP6.. Pubmed for \", CancerName, \" completed.\"))\n\nans <- list(Data_CANCER = Data_CANCER, Data_CANCER_normUQ = Data_CANCER_normUQ,  Data_CANCER_normUQ_filt = Data_CANCER_normUQ_filt, CANCER_diff_normUQ = CANCER_diff_normUQ, CANCER_diff_normUQ_level = CANCER_diff_normUQ_level, CANCER_diff_normUQ_level_tf = CANCER_diff_normUQ_level_tf, CANCER_diff_normUQ_level_tf_pubmed = CANCER_diff_normUQ_level_tf_pubmed)\n}\n\nelse {\n  print(paste(\"Finding TR candidate with Top Expressed with perc \", perc, sep =\"\"))\n  CANCER_diff_normUQ_level_tf <- Data_CANCER_normUQ_filt[rownames(Data_CANCER_normUQ_filt) %in% IPA_transcription_factors$Gene,]\n  tmp <- sort(rowMeans(CANCER_diff_normUQ_level_tf),decreasing=T)\n  tmp <- as.matrix(tmp)\n  colnames(tmp)<-\"Tumor\"\n  tmp <- cbind(Gene = rownames(tmp),round(tmp))\n  tmp <- as.data.frame(tmp)\n  tmp$Tumor <-as.numeric( as.character(tmp$Tumor))\n  tmp <-tmp[ tmp$Tumor > quantile(as.numeric(tmp$Tumor),0.50),]\n\n  tmp2 <- FindPubmedTFgene2(tumorPubmed,tmp,topgenes=nrow(tmp))\n  #tmp <- cbind(tmp, Pubmed = tmp2)\n  CANCER_diff_normUQ_level_tf_pubmed <- tmp2\n\n  ans <- list(Data_CANCER = Data_CANCER, Data_CANCER_normUQ = Data_CANCER_normUQ,  Data_CANCER_normUQ_filt = Data_CANCER_normUQ_filt,CANCER_diff_normUQ_level_tf = CANCER_diff_normUQ_level_tf, CANCER_diff_normUQ_level_tf_pubmed = CANCER_diff_normUQ_level_tf_pubmed )\n\n}\n\nreturn(ans)\n}\n\n\n\nknnNet <- function(TumorName, k, nboot = 100, nGenesPerm = 100, analysisPath = \"\", TFlistDefined = 0){\n\n  toLoad <- paste(analysisPath, \"CancerPubmed_complete.RData\", sep = \"\")\n  load(toLoad)\n  toLoad <- list.files(path = analysisPath, pattern = \"Analysis\")\n  toLoad <- toLoad[sapply(strsplit(toLoad, \"_\"), function(x) x[1]) == TumorName]\n  toLoad <- paste(analysisPath, toLoad, sep = \"\")\n  load(toLoad)\n\n  if (length(TFlistDefined)==0){\n  tfList <- as.vector(CancerPubmed_complete[CancerPubmed_complete$CancerTCGA == TumorName, \"mRNA\"])\n  } else{ tfList <- TFlistDefined}\n\n  message(paste(\"Cancer \", TumorName, \" with n. sample \", ncol(Cancer_analysis$Data_CANCER_normUQ_filt), sep=\"\"))\n\n  message(\"Estimating Mutual Information\")\n  MI_tfgenes <- CreateMatrixMI_tf_gene(tfList, Cancer_analysis$Data_CANCER_normUQ_filt, kNum = k)\n\n  message(\"Calculating Mutual Information Threshold\")\n  TFthresh <- FindTFbootMIthresh(tfList, Cancer_analysis$Data_CANCER_normUQ_filt, nboot = nboot, nGenesPerm = nGenesPerm, Knum = k)\n\n  message(\"Creating Network Matrix\")\n  cytNet <- ConvertMI_to_Cytoscape_onlyNet(MI_tfgenes, TFthresh)\n  cytNet <- as.data.frame(cytNet, stringsAsFactors = F)\n  cytNet$MI <- round(as.numeric(cytNet$MI), 3)\n\n  ans <- list(MIAdjMat = MI_tfgenes, MITFThresh = TFthresh, Net = cytNet)\n  return(ans)\n}\n\n\nIPANet <- function(TumorName, genesToConsider, IPAfilesPath = \"\"){\n\n  load(\"/storage/ocfs2_vol1/PUBLIC/TCGA_panCancer/TCGA_Analysis/CancerPubmed_complete.RData\")\n\n  idx <- which(CancerPubmed_complete$CancerTCGA == TumorName)\n  tfList <- as.vector(CancerPubmed_complete[idx, \"mRNA\"])\n  cellType <- unique(as.vector(CancerPubmed_complete[idx, \"Cancer\"]))\n\n  toLoadComplete <- list.files(path = IPAfilesPath, pattern = \"complete\")\n  toLoadComplete <- toLoadComplete[sapply(strsplit(toLoadComplete, \"_\"), function(x) x[1]) %in% tfList]\n\n  tmp <- list.files(path = IPAfilesPath, pattern = cellType)\n  toLoadWeak <- tmp[grep(\"weak\", tmp)]\n  toLoadStrong <- tmp[grep(\"strong\", tmp)]\n\n  toLoadStrong <- paste(IPAfilesPath, toLoadStrong, sep = \"\")\n  toLoadWeak <- paste(IPAfilesPath, toLoadWeak, sep = \"\")\n  toLoadComplete <- paste(IPAfilesPath, toLoadComplete, sep = \"\")\n  toLoad <- list(toLoadStrong = toLoadStrong, toLoadWeak = toLoadWeak, toLoadComplete = toLoadComplete)\n\n  ans <- vector(\"list\", 3)\n  names(ans) <- c(\"strong\", \"weak\", \"complete\")\n  for(j in 1:length(ans)){\n    message(paste(names(ans)[j], \"net...\"))\n    for(i in toLoad[[j]]){\n      tmp <- read.delim(i, skip = 1, stringsAsFactors = F)\n\n      target <- geneList[toupper(geneList) %in% toupper(tmp$Symbol)]\n      toCheck <- tmp$Symbol[!(toupper(tmp$Symbol) %in% toupper(geneList))]\n      synonyms <- strsplit(tmp[tmp$Symbol %in% toCheck, \"Synonym.s.\"], \", \")\n      target <- sort(c(target, unlist(lapply(synonyms, function(x) geneList[toupper(geneList) %in% toupper(x)]))))\n\n      TF <- unlist(strsplit(i, \"/\"))\n      TF <- TF[length(TF)]\n      TF <- unlist(strsplit(TF, \"_\"))[1]\n      TF <- rep(TF, length(target))\n\n      Pairs <- paste( TF, target, sep=\",\")\n\n      Int <- rep(1, length(target))\n\n      ans[[j]] <- rbind(ans[[j]], data.frame(Pairs = Pairs, from = TF, to = target, Int = Int, stringsAsFactors = F))\n\n      print(TF[1])\n    }\n  }\n\n  return(ans)\n}\n\n\nPerformanceNET <- function(PredictedNET, ValidatedNET,geneList){\n\n  tfList <- names(table(PredictedNET$from))\n  tmp <- rep(tfList, rep(length(geneList), length(tfList)))\n  tmp2 <- rep(geneList, 20)\n  allpairs <- paste(tmp,tmp2, sep= \",\")\n  notvalpairs <- setdiff(allpairs, ValidatedNET$Pairs)\n  notpredpairs <- setdiff(allpairs, PredictedNET$Pairs)\n\n  tp <- length(intersect(PredictedNET$Pairs, ValidatedNET$Pairs))\n  fp <- length(intersect(PredictedNET$Pairs, notvalpairs ))\n  tn <-  length(intersect(notpredpairs, notvalpairs ))\n  fn <- length(intersect(notpredpairs, ValidatedNET$Pairs ))\n\n  nEdges <- tp + fp\n  recall <- tp/(tp + fn)\n  fpr <- fp/(fp + tn)\n  precision <- tp/(tp + fp)\n  precision[is.na(precision)] <- 0\n  accuracy <- (tp + tn)/(tp + fn + fp + tn)\n  Fscore <- 2*(precision*recall)/(precision + recall)\n  Fscore[is.na(Fscore)] <- 0\n\n  ans <- c(nEdges,  length(ValidatedNET$Pairs), tp, fp, fn, tn, recall, fpr, precision, accuracy, Fscore)\n  names(ans) <- c(\"PredPairs\" ,\"ValidPairs\", \"TP\", \"FP\", \"FN\", \"TN\", \"Recall\", \"FPR\", \"Precision\", \"Accuracy\", \"Fscore\")\n\n  return(round(ans,3))\n}\n\n\nGenie3Net <- function(DataCount, tfList) {\n  weight.matrix <- get.weight.matrix(DataCount,input.idx = tfList)\n  link.list <- get.link.list(weight.matrix)\n  ans <- list( MIAdjMat = weight.matrix, MITFThresh = NULL, Net = link.list)\n  return(ans)\n}\n\n\n\nCreateCorNetwork <- function(tfList,normCounts,ncpu){\n  rtniCancer <- new(\"TNI\", gexp = normCounts, transcriptionFactors = tfList)\n  rtniCancer <- tni.preprocess(rtniCancer, cvfilter = FALSE, verbose = TRUE)\n\n  options(cluster = makeCluster(ncpu, \"SOCK\"))\n  system.time(rtniPerm <- tni.permutation(rtniCancer, pValueCutoff = 0.005, pAdjustMethod = \"BH\", globalAdjustment = TRUE, estimator = \"spearman\", nPermutations = 1000, pooledNullDistribution = TRUE, parChunks = 10, verbose = TRUE)) #3963.860\n\n  stopCluster(getOption(\"cluster\"))\n  options(cluster = NULL)\n\n  options(cluster = makeCluster(ncpu, \"SOCK\"))\n  system.time(rtniBoot <- tni.bootstrap(rtniPerm, estimator = \"spearman\", nBootstraps = 100, consensus = 95, parChunks = 1, verbose = TRUE)) #593.051\n\n  stopCluster(getOption(\"cluster\"))\n  options(cluster = NULL)\n\n  options(cluster = makeCluster(ncpu, \"SOCK\"))\n  system.time(rtniDpi <- tni.dpi.filter(rtniBoot, eps = 0.05, verbose = TRUE)) #333.639\n\n  stopCluster(getOption(\"cluster\"))\n  options(cluster = NULL)\n\n  ans <- list(rtniCancer = rtniCancer, rtniPerm = rtniPerm, rtniBoot = rtniBoot, rtniDpi = rtniDpi )\n\n  return(ans)\n}\n\nTCGAQuery <- function(Tumor,siteTCGA){\n\n  TumorData <- matrix(0, 1, 8)\n  colnames(TumorData) <- c(\"Total\", \"Exome\", \"SNP\", \"Methylation\", \"mRNA\", \"miRNA\", \"Clinical\",\"Protein\")\n  rownames(TumorData) <- Tumor\n  LevelsPlatforms <- c(\"Level_1\", \"Level_2\", \"Level_3\")\n\n  #for ( i in 2: ncol(TumorData)){\n\n\n  i<-5\n  Type <-  colnames(TumorData)[i]\n  tmp <- PlatformAndAssociatedData[PlatformAndAssociatedData$Type%in% Type,]\n\n  tmp2a <- tmp[ grep(tolower(Tumor),tmp$Tumor),]\n\n  if( nrow(tmp2a)!=0){\n\n    Species <- unique(tmp2a$Species)\n\n\n\n  for( j in 1:length(Species)){\n    SpecieCurr <- Species[j]\n    tmp3 <- tmp2a[tmp2a$Species %in% SpecieCurr, ]\n    Centers <- unique(tmp3$Center)\n\n    for( k in 1:length(Centers)){\n      CenterCurr <- Centers[k]\n      tmp3b <- tmp3[tmp3$Center %in% CenterCurr,]\n\n      Platforms <- unique(tmp3b$Platform)\n\n      for( q in 1:length(Platforms)){\n\n        PlatformCurr <- Platforms[q]\n        tmp4 <- tmp3b[tmp3b$Platform %in% PlatformCurr, ]\n\n        key1<- paste(unique(tmp4$CenterType), unique(tmp4$Center), unique(tmp4$Platform), sep=\"/\")\n        Description <- paste(siteTCGA, tolower(Tumor), \"/\",key1, sep=\"\")\n\n        if( length(grep(\"agilentg4502a_07\",unique(tmp4$Platform))) > 0   || unique(tmp4$Platform) ==  \"ht_hg-u133a\" || unique(tmp4$Platform) ==  \"hg-u133_plus_2\" || unique(tmp4$Platform) ==  \"illuminaga_mrna_dge\" ){\n          Description <- paste(Description, \"/transcriptome/\", sep = \"\")\n          Description_i_ord <- paste(Description, \"?C=M;O=D\", sep = \"\")\n          x <- DownloadURL(Description_i_ord)\n\n\n\n          for( w in 1:length(LevelsPlatforms)){\n\n            siteNewLevel <- FindGrepSite(x,Key=LevelsPlatforms[w],Description)\n            tmp2 <- DownloadManifest(siteNewLevel)\n\n\n            if(length(grep(\"agilentg4502a_07\",unique(tmp4$Platform))) > 0){\n              NumberSample <- length(unique(substr(tmp2, 1, 23)))\n            }\n\n            if(unique(tmp4$Platform) ==  \"ht_hg-u133a\"){\n              NumberSample <- length(unique(substr(tmp2, 44, 58)))\n            }\n\n            if(unique(tmp4$Platform) ==  \"hg-u133_plus_2\" || unique(tmp4$Platform) ==  \"illuminaga_mrna_dge\"){\n              NumberSample <- length(unique(substr(tmp2, 1, 16)))\n            }\n\n            message <- paste(Type, \" \", SpecieCurr, \" \",   CenterCurr, \" \", unique(tmp4$Platform) , \" \" ,LevelsPlatforms[w] ,  \" .n samples \", NumberSample, sep=\"\")\n            print(message)\n\n          } #end for LevelsPlatform\n        } #end platform Exp-Gene\n\n\n        if(unique(tmp4$Platform) ==  \"huex-1_0-st-v2\"){\n          Description <- paste(Description, \"/exon/\", sep = \"\")\n          Description_i_ord <- paste(Description, \"?C=M;O=D\", sep = \"\")\n          x <- DownloadURL(Description_i_ord)\n          siteNewLevel <- FindGrepSite(x,Key=\"mage-tab\",Description)\n          siteNewLevelSdrf <- DownloadSdrf(siteNewLevel)\n          tmp2 <-  siteNewLevelSdrf$Comment..TCGA.Barcode.\n          tmp2 <- tmp2[grep(\"TCGA\",tmp2)]\n          NumberSample <- length(unique(substr(tmp2, 1, 16)))\n          message <- paste(Type, \" \", SpecieCurr, \" \",   CenterCurr, \" \", unique(tmp4$Platform) , \" \" , \" .n samples \", NumberSample, sep=\"\")\n          print(message)\n        }\n\n\n\n        if(unique(tmp4$Platform) ==  \"illuminahiseq_rnaseq\" || unique(tmp4$Platform) ==  \"illuminaga_rnaseq\"){\n          Description <- paste(Description, \"/rnaseq/\", sep = \"\")\n          Description_i_ord <- paste(Description, \"?C=M;O=D\", sep = \"\")\n          x <- DownloadURL(Description_i_ord)\n          siteNewLevel <- FindGrepSite(x,Key=LevelsPlatforms[3],Description)\n          tmp2 <- DownloadManifest(siteNewLevel)\n          NumberSample <- length(unique(substr(tmp2, 13, 29)))\n          message <- paste(Type, \" \", SpecieCurr, \" \",   CenterCurr, \" \", unique(tmp4$Platform) , \" \" ,LevelsPlatforms[3] ,  \" .n samples \", NumberSample, sep=\"\")\n          print(message)\n        }\n\n\n\n        if(unique(tmp4$Platform) ==  \"illuminahiseq_rnaseqv2\" || unique(tmp4$Platform) ==  \"illuminaga_rnaseqv2\" ){\n          Description <- paste(Description, \"/rnaseqv2/\", sep = \"\")\n          Description_i_ord <- paste(Description, \"?C=M;O=D\", sep = \"\")\n          x <- DownloadURL(Description_i_ord)\n          siteNewLevel <- FindGrepSite(x,Key=LevelsPlatforms[3],Description)\n          tmp2 <- DownloadManifest(siteNewLevel)\n\n          NumberSample <- length(unique(substr(tmp2, 13, 29)))\n          message <- paste(Type, \" \", SpecieCurr, \" \",   CenterCurr, \" \", unique(tmp4$Platform) , \" \" ,LevelsPlatforms[3] ,  \" .n samples \", NumberSample, sep=\"\")\n          print(message)\n        }\n\n\n        if(unique(tmp4$Platform) ==  \"illuminahiseq_totalrnaseqv2\"){\n          Description <- paste(Description, \"/totalrnaseqv2/\", sep = \"\")\n          Description_i_ord <- paste(Description, \"?C=M;O=D\", sep = \"\")\n          x <- DownloadURL(Description_i_ord)\n          siteNewLevel <- FindGrepSite(x,Key=LevelsPlatforms[3],Description)\n          tmp2 <- DownloadManifest(siteNewLevel)\n\n          NumberSample <- length(unique(substr(tmp2, 9, 44)))\n          message <- paste(Type, \" \", SpecieCurr, \" \",   CenterCurr, \" \", unique(tmp4$Platform) , \" \" ,LevelsPlatforms[3] ,  \" .n samples \", NumberSample, sep=\"\")\n          print(message)\n        }\n\n\n\n      } # end platform\n    } #end for Centers\n  } # end for species\n\n\n\n  #}\n  }\n\n}\n\nFindGrepSite <- function(x,Key,Description){\n  x2 <- x[grep(Key, x)]\n\n  if( Key != \"sdrf\"){ x2 <- x2 [- grep(\"tar.gz\", x2)][1] }\n\n\n  x2  <- as.matrix(sapply(strsplit(x2, \">\"), function(y) y[2]))\n  x2  <- as.matrix(sapply(strsplit(x2, \"<\"), function(y) y[1]))\n  site2 <- paste(Description, x2,sep=\"\" )\n  return(site2)\n}\n\nDownloadURL <- function(Site){\n  Site <- URLencode(Site)\n\n  if(interactive() && (\"ssl\" %in% names(curlVersion()$features)) && url.exists(Site)) {\n    x = tryCatch(getURL(Site, verbose = F, ftp.use.epsv = TRUE, dirlistonly = TRUE,ssl.verifypeer = FALSE ), error = function(e) {\n      getURL(Site, verbose = F, ftp.use.epsv = TRUE, dirlistonly = TRUE,ssl.verifypeer = FALSE) })\n  }\n  x <- unlist(strsplit(x,\"\\n\"))\n  return(x)\n}\n\nDownloadManifest <- function(siteNewLevel){\n  site3 <- paste(siteNewLevel, \"MANIFEST.txt\",sep=\"\")\n  x <- DownloadURL(site3)\n  writeLines(x, \"x2.txt\" )\n  tmp2 <- read.table(\"x2.txt\", quote=\"\\\"\", stringsAsFactors = F)[,2]\n  tmp2 <- tmp2[ nchar(tmp2) > 20 ]\n  return(tmp2)\n}\n\nDownloadSdrf <- function(siteNewLevel){\n  x <- DownloadURL(siteNewLevel)\n  x2 <- x[grep(\"sdrf\",x)]\n  x2  <- as.matrix(sapply(strsplit(x2, \">\"), function(y) y[2]))\n  x2  <- as.matrix(sapply(strsplit(x2, \"<\"), function(y) y[1]))\n  site3 <- paste(siteNewLevel, x2,sep=\"\" )\n\n  x <- DownloadURL(site3)\n  writeLines(x, \"x2.txt\" )\n  tmp2 <- as.data.frame(read.delim(\"x2.txt\",stringsAsFactors = F))\n  return(tmp2)\n}\n\n\nDownloadTypeFile <- function(siteNewLevel,keyDown){\n  x <- DownloadURL(siteNewLevel)\n  x2 <- x[grep(keyDown,x)]\n  x2  <- as.matrix(sapply(strsplit(x2, \">\"), function(y) y[2]))\n  x2  <- as.matrix(sapply(strsplit(x2, \"<\"), function(y) y[1]))\n  site3 <- paste(siteNewLevel, x2,sep=\"\" )\n\n  x <- DownloadURL(site3)\n  writeLines(x, \"x2.txt\" )\n  tmp2 <- as.data.frame(read.delim(\"x2.txt\",stringsAsFactors = F))\n  return(tmp2)\n}\n\n\nDownloaDmageTAB <- function(Description,TumorDataList, keySpecies,startK, stopK, typeProtein = F ){\nDescription2 <- paste(Description, keySpecies, sep = \"\")\nDescription_i_ord <- paste(Description2, \"?C=M;O=D\", sep = \"\")\nx <- DownloadURL(Description_i_ord)\nif(length(x)!=10){\nsiteNewLevel <- FindGrepSite(x,Key=\"mage-tab\",Description2)\nsiteNewLevelSdrf <- DownloadSdrf(siteNewLevel)\ntmp2 <-  siteNewLevelSdrf$Comment..TCGA.Barcode.\n\nif(typeProtein==T){\n  siteNewLevelDesign <- DownloadTypeFile(siteNewLevel,\"design\")\n  tmp2 <- siteNewLevelDesign$Sample.description\n}\n\ntmp2 <- tmp2[grep(\"TCGA\",tmp2)]\nNumberSample <- length(unique(substr(tmp2, startK, stopK)))\nmsgOUT <-  paste(Type, \" \", SpecieCurr, \" \",   CenterCurr, \" \", unique(tmp4$Platform) , \" \" ,  \" .n samples \", NumberSample, sep=\"\")\nprint(msgOUT)\nSampleTmp <- unique(substr(tmp2, startK, stopK))\nidx<- which(names(TumorDataList) == unique(tmp4$Platform))\nTumorDataList[[idx]] <- SampleTmp\n}\nreturn(TumorDataList)\n}\n\n\nDownloaDmageTAB_sdrf <- function(Description,keySpecies,KeyGrep1 = \"mage-tab\", KeyGrep2 = \"sdrf\"){\n  Description2 <- paste(Description, keySpecies, sep = \"\")\n  Description_i_ord <- paste(Description2, \"?C=M;O=D\", sep = \"\")\n  x <- DownloadURL(Description_i_ord)\n  if(length(x)!=10){\n    siteNewLevel <- FindGrepSite(x,Key=KeyGrep1,Description2)\n    x <- DownloadURL(siteNewLevel)\n    x2 <- x[grep(KeyGrep2,x)]\n\n  x2  <- as.matrix(sapply(strsplit(x2, \">\"), function(y) y[2]))\n  x2  <- as.matrix(sapply(strsplit(x2, \"<\"), function(y) y[1]))\n  site3 <- paste(siteNewLevel, x2,sep=\"\" )\n  #site4 <- paste(keySpecies,unlist(strsplit(site3,keySpecies))[2],sep=\"\")\n  site4 <- unlist(strsplit(site3,keySpecies))[2]\n\n  print(site4)\n  return(site4)\n  } else{return(\"\")}\n\n}\n\n\nConvertGeneSymbol <- function(GPLplatform,sigA,dupl = F, order=\"pvalue\"){\n\n  idx <- grep(\"///\", GPLplatform[, \"Gene.Symbol\"])\n  tmpNames <- matrix(0,length(idx),1)\n  for ( k in 1:length(idx)){\n    tmpNames[k]<-  unlist(strsplit(as.character(GPLplatform[idx[k],\"Gene.Symbol\" ]), \" /// \"))[1]\n  }\n  GPLplatform[idx, \"Gene.Symbol\"]<- as.character(tmpNames)\n  GPLplatform<- GPLplatform[order(GPLplatform$ID,decreasing=T),]\n\n\n  GeneSymbols<-as.character(GPLplatform$Gene.Symbol)\n  GeneID<-as.character(GPLplatform$ID)\n  hgu219_geneInfo <-as.data.frame(cbind(GeneSymbols,GeneID))\n  GeneSelected <- hgu219_geneInfo[which(hgu219_geneInfo$GeneID %in% rownames(sigA)),]\n  sigA<- sigA[order(rownames(sigA),decreasing=T),]\n  GeneSelected<- GeneSelected[order(GeneSelected$GeneID,decreasing=T),]\n  sigA<-cbind(GeneSelected,sigA)\n  sigA<-as.data.frame(sigA)\n\n  if(order == \"pvalue\"){ sigA<- sigA[order(sigA$adj.P.Val,decreasing=F),] }\n  if(order == \"logFC\"){     sigA<- sigA[order(abs(sigA$logFC),decreasing=T),]     }\n  if(dupl == T){ sigA <- sigA[!duplicated(sigA$GeneSymbols),]  }\n\n  rownames(sigA) <- sigA$GeneSymbols\n  sigA<-sigA[rownames(sigA)!=\"\",]\n  sigA<-sigA[rownames(sigA)!=\"---\",]\n\n  return(sigA)\n}\n\nCreateClusterHeatmap<-function(Table_Cancer_mRNA_normal_stageC,TFs_for_experiment,thresholdquantile=0.75){\n\nTablemRNA_MR <- Table_Cancer_mRNA_normal_stageC[TFs_for_experiment,]\n\nTablemRNA_MR[ TablemRNA_MR >= quantile(TablemRNA_MR,thresholdquantile)]<- quantile(TablemRNA_MR,thresholdquantile)\n\nDist_mRNA_samples <- dist(TablemRNA_MR)\nDist_mRNA_species <- dist(t(TablemRNA_MR))\n\nsHc  <- hclust(Dist_mRNA_samples, method = \"ward\")\ngHc  <- hclust(Dist_mRNA_species)\n\nheatmap(t(TablemRNA_MR),scale = \"none\",cexRow=0.7\n        , col = colorRampPalette(c(\"green\", \"red\"))(50)\n        , labCol = rownames(TablemRNA_MR), #labRow = rownames(TablemRNA_MR) # Symbol and CHR\n        , Colv =  as.dendrogram(sHc)\n        , Rowv =  as.dendrogram(gHc)\n        , RowSideColors = rep(c(\"blue\",\"red\",\"green\",\"yellow\",\"orange\",\"pink\"), c(ncol(TablemRNA_normal_sample), ncol(TablemRNA_groupI), ncol(TablemRNA_groupII),ncol(TablemRNA_groupIII),ncol(TablemRNA_groupIV),ncol(TablemRNA_groupV)))\n)\n}\n\n\n\nCreateSurvivalTable<-function(clinical_patient_ALD,Table_ALD_stageC_filtered,Table_Cancer_mRNA_normal_stageC,Table_ALD_normal_sample,Survresult){\n\n  cfu<-clinical_patient_ALD[clinical_patient_ALD[,\"bcr_patient_barcode\"] %in% colnames(Table_ALD_stageC_filtered),]\n  cfu <- as.data.frame(subset(cfu, select=c(\"bcr_patient_barcode\",\"Status.180.days.binary.\",\"Follow.up.at.180.days..days.\",\"Follow.up.at.180.days..days.\"))  )\n  colnames(cfu)   <- c(\"bcr_patient_barcode\",\"Dead\",\"days_to_death\",\"days_to_last_followup\")\n  cfu$Dead<-as.numeric(as.character(cfu$Dead))\n  cfu$days_to_death<-as.numeric(as.character(cfu$days_to_death))\n  cfu$days_to_last_followup<-as.numeric(as.character(cfu$days_to_last_followup))\n\n\n\n  cfu[which(cfu$Dead==0),\"days_to_death\"]<-\"-Inf\"\n  cfu[which(cfu$Dead==1),\"days_to_last_followup\"]<-\"-Inf\"\n\n  followUpLevel<-FALSE\n  Survresult<-FALSE\n\n  #FC_FDR_table_mRNA\n  mRNAselected_surv_results_Matrix<-matrix(0,nrow(as.matrix(rownames(Table_Cancer_mRNA_normal_stageC))),8)\n  colnames(mRNAselected_surv_results_Matrix)<-c(\"mRNA\",\"pvalue\",\"ALD Deaths\",\"ALD Deaths with Top\",\"ALD Deaths with Down\",\"Mean Tumor Top\",\"Mean Tumor Down\",\"Mean Normal\")\n\n  mRNAselected_surv_results_Matrix<-as.data.frame(mRNAselected_surv_results_Matrix)\n\n  cfu$days_to_death<-as.numeric(as.character(cfu$days_to_death))\n  cfu$days_to_last_followup<-as.numeric(as.character(cfu$days_to_last_followup))\n  rownames(cfu) <- cfu[, \"bcr_patient_barcode\" ] #mod1\n  cfu_complete<-cfu\n\n\n  #for( i in 1: 100)  {\n\n  for( i in 1: nrow(as.matrix(rownames(Table_Cancer_mRNA_normal_stageC))))  {\n    #print(i)\n    #i<-35\n    #################\n\n\n    #trasformazioni sulla natura (informatica) delle variabili\n    #wwho <- levels(cfu[, \"days_to_new_tumor_event_after_initial_treatment\"]) == \"[Not Available]\"\n    #levels(cfu[, \"days_to_new_tumor_event_after_initial_treatment\"])[wwho] <- \"Inf\"\n    #cfu[, \"days_to_new_tumor_event_after_initial_treatment\"] <-  as.numeric(levels(cfu[,\"days_to_new_tumor_event_after_initial_treatment\"])[as.numeric(cfu[,\"days_to_new_tumor_event_after_initial_treatment\"])])\n\n    #wwho <- levels(cfu[, \"days_to_death\"]) == \"[Not Applicable]\"\n    #levels(cfu[, \"days_to_death\"])[wwho] <- \"-Inf\"\n\n    #wwho <- levels(cfu[, \"days_to_death\"]) == \"[Not Available]\"\n    #levels(cfu[, \"days_to_death\"])[wwho] <- \"-Inf\"\n    #cfu[, \"days_to_death\"] <-  as.numeric(levels(cfu[,\"days_to_death\"])[as.numeric(cfu[,\"days_to_death\"])])\n\n    #  wwho <- levels(cfu[, \"days_to_last_followup\"]) == \"[Not Available]\"\n    # levels(cfu[, \"days_to_last_followup\"])[wwho] <- \"-Inf\"\n    #cfu[, \"days_to_last_followup\"] <-  as.numeric(levels(cfu[,\"days_to_last_followup\"])[as.numeric(cfu[,\"days_to_last_followup\"])])\n\n\n\n\n    mRNAselected<-as.matrix(rownames(Table_Cancer_mRNA_normal_stageC))[i]\n    #mRNAselected<-as.matrix(rownames(FC_FDR_table_mRNA))[i]\n    # mRNAselected<- \"CHAD\"\n\n    #message(paste(i, mRNAselected, \" of \",nrow(as.matrix(rownames(Table_Cancer_mRNA_normal_stageC))), sep=\"\" ))\n\n    #mRNAselected<-\"hsa-mRNA-210\"\n\n\n    mRNAselected_surv_results_Matrix[i,\"mRNA\"]<-mRNAselected\n    #############\n\n    mRNAselected_values<-Table_ALD_stageC_filtered[rownames(Table_ALD_stageC_filtered) == mRNAselected,]\n    mRNAselected_values_normal<-Table_ALD_normal_sample[rownames(Table_ALD_normal_sample) == mRNAselected,]\n\n\n\n    mRNAselected_values_ordered<-sort(mRNAselected_values,decreasing=TRUE)\n    mRNAselected_values_ordered_top<-as.numeric(quantile(mRNAselected_values_ordered,ThreshTop)[1])\n    mRNAselected_values_ordered_down<-as.numeric(quantile(mRNAselected_values_ordered,ThreshDown)[1])\n\n\n\n    mRNAselected_values_newvector<-mRNAselected_values\n\n\n    if (is.na(mRNAselected_values_ordered_top)!=1){\n\n\n      #samples_top_mRNA_selected<-rownames(as.matrix(which((mRNAselected_values_newvector) >= mRNAselected_values_ordered_top )))\n      #samples_down_mRNA_selected<-rownames(as.matrix(which((mRNAselected_values_newvector) <= mRNAselected_values_ordered_down )))\n\n      numberOfSamples<-nrow(as.matrix(mRNAselected_values_ordered))\n      lastelementTOP<-round(numberOfSamples/3)\n\n      firstelementDOWN<- numberOfSamples  - lastelementTOP\n\n      samples_top_mRNA_selected<-rownames( as.matrix(mRNAselected_values_ordered[1: (lastelementTOP-1)  ] ))\n      samples_down_mRNA_selected<-rownames( as.matrix(mRNAselected_values_ordered[ (firstelementDOWN+1) : numberOfSamples] ))\n\n      samples_UNCHANGED_mRNA_selected<-rownames(as.matrix(which((mRNAselected_values_newvector) > mRNAselected_values_ordered_down & mRNAselected_values_newvector < mRNAselected_values_ordered_top )))\n\n      cfu_onlyTOP<-cfu_complete[cfu_complete[,\"bcr_patient_barcode\"] %in% samples_top_mRNA_selected,]\n      cfu_onlyDOWN<-cfu_complete[cfu_complete[,\"bcr_patient_barcode\"] %in% samples_down_mRNA_selected,]\n      cfu_onlyUNCHANGED<-cfu_complete[cfu_complete[,\"bcr_patient_barcode\"] %in% samples_UNCHANGED_mRNA_selected,]\n\n\n\n\n      #if( followUpLevel == TRUE)\n      #{\n      # samplesTop_over_followUplevel<- !(cfu_onlyTOP[,\"days_to_death\"] < 0 &   cfu_onlyTOP[,\"days_to_last_followup\"] < Thresh_followUP)\n      #  cfu_onlyTOP<- cfu_onlyTOP[samplesTop_over_followUplevel,]\n      # samplesDown_over_followUplevel<- !(cfu_onlyDOWN[,\"days_to_death\"] < 0 &   cfu_onlyDOWN[,\"days_to_last_followup\"] < Thresh_followUP)\n      #cfu_onlyDOWN<- cfu_onlyDOWN[samplesDown_over_followUplevel,]\n      #print(paste(\"Processing ... with followUP level >\",Thresh_followUP,\" days and\",nrow(cfu),\"clinical samples\"))\n      #  }\n\n\n\n      # else {\n    #  print(paste(\"Processing ... without followUP level and\", nrow(as.matrix(cfu)),\"clinical samples\"))\n\n      #}\n      cfu_ordered<-NULL\n      cfu_ordered<-rbind(cfu_onlyTOP,cfu_onlyDOWN)\n      cfu<-cfu_ordered\n\n     # print(dim(cfu))\n\n      # } #end else with all samples\n\n\n\n\n\n\n      ttime <- as.numeric(cfu[, \"days_to_death\"])\n\n      #ttime <- cfu[, \"days_to_death\"]\n      sum(status <- ttime > 0) # morti\n      deads_complete <- sum(status <- ttime > 0)\n\n      ttime_only_top <- cfu_onlyTOP[, \"days_to_death\"]\n      deads_top<- sum(ttime_only_top > 0)\n\n\n      if(  dim(cfu_onlyDOWN)[1] >= 1) {\n        ttime_only_down <- cfu_onlyDOWN[, \"days_to_death\"]\n        deads_down<- sum(ttime_only_down > 0)\n      }\n\n      else {deads_down <-0 }\n\n\n      #print(paste(\"deaths =\",deads_complete))\n      mRNAselected_surv_results_Matrix[i,\"ALD Deaths\"]<-deads_complete\n      mRNAselected_surv_results_Matrix[i,\"ALD Deaths with Top\"]<- deads_top\n      mRNAselected_surv_results_Matrix[i,\"ALD Deaths with Down\"]<- deads_down\n\n      mRNAselected_surv_results_Matrix[i,\"Mean Normal\"]<-  format(mean(mRNAselected_values_normal),digits=3)\n\n\n\n\n\n      Table_ALD_stageC_filtered_onlyTop_sample<-Table_ALD_stageC_filtered[,samples_top_mRNA_selected]\n      Table_ALD_stageC_filtered_onlyTop_sample_mRNASelected<- Table_ALD_stageC_filtered_onlyTop_sample[rownames(Table_ALD_stageC_filtered_onlyTop_sample) == mRNAselected,]\n\n\n      Table_ALD_stageC_filtered_onlyDown_sample<-Table_ALD_stageC_filtered[,samples_down_mRNA_selected]\n      Table_ALD_stageC_filtered_onlyDown_sample_mRNASelected<- Table_ALD_stageC_filtered_onlyDown_sample[rownames(Table_ALD_stageC_filtered_onlyDown_sample) == mRNAselected,]\n\n\n      mRNAselected_surv_results_Matrix[i,\"Mean Tumor Top\"]<- format(as.numeric(mean(Table_ALD_stageC_filtered_onlyTop_sample_mRNASelected)),digits=3)\n      mRNAselected_surv_results_Matrix[i,\"Mean Tumor Down\"]<- format(as.numeric(mean(Table_ALD_stageC_filtered_onlyDown_sample_mRNASelected)),digits=3)\n\n      ttime[!status] <- as.numeric(cfu[!status, \"days_to_last_followup\"])\n      #ttime[!status] <- cfu[!status, \"days_to_last_followup\"]\n\n      ttime[which(ttime== -Inf)]<-0\n\n      library(survival)\n      ttime <- Surv(ttime, status)\n      rownames(ttime) <- rownames(cfu)\n      length(ttime)\n      #plot(survfit(ttime ~ 1))\n\n      #plot(survfit(ttime ~ c(rep(\"top\", nrow(cfu_onlyTOP)), rep(\"down\", nrow(cfu_onlyDOWN)), rep(\"unchanged\", nrow(cfu_onlyUNCHANGED)))), col = c(\"red\", \"green\",\"grey\"))\n\n      #   plot(survfit(ttime ~ c(rep(\"top\", nrow(cfu_onlyTOP)), rep(\"down\", nrow(cfu_onlyDOWN)))), col = c(\"red\", \"green\"),main= mRNAselected)\n\n\n\n\n\n      legendHigh<- paste(mRNAselected,\"High\")\n      legendLow<- paste(mRNAselected,\"Low\")\n\n\n\n\n\n\n      mRNAselected_surv_results<-survdiff(ttime  ~ c(rep(\"top\", nrow(cfu_onlyTOP)), rep(\"down\", nrow(cfu_onlyDOWN)) ))\n      mRNAselected_surv_results_chis<-unlist(mRNAselected_surv_results)$chisq\n\n      mRNAselected_surv_results_pvalue <- as.numeric(1 - pchisq(abs(mRNAselected_surv_results$chisq), df = 1))\n      #miRselected_surv_results_pvalue <- as.numeric(round(as.numeric(1 - pchisq(abs(miRselected_surv_results$chisq), df = 1)),6))\n\n      mRNAselected_surv_results_Matrix[i,\"pvalue\"]<-mRNAselected_surv_results_pvalue\n\n\n      #print(paste(i,\"....\",mRNAselected,\"pvalue=\",mRNAselected_surv_results_pvalue))\n\n      if (Survresult ==TRUE) {\n        titlePlot<- paste(\"Kaplan-Meier Survival analysis, pvalue=\",mRNAselected_surv_results_pvalue )\n\n\n        plot(survfit(ttime ~ c(rep(\"low\", nrow(cfu_onlyTOP)), rep(\"high\", nrow(cfu_onlyDOWN)))), col = c(\"green\", \"red\"),main= titlePlot,xlab=\"Days\",ylab=\"Survival\")\n\n\n        legend(100, 1, legend = c(legendLow,legendHigh), col = c(\"green\", \"red\"), text.col = c(\"green\", \"red\"), pch = 15)\n\n        print(mRNAselected_surv_results)\n      }\n    } #end if\n\n  } #end for\n  return(mRNAselected_surv_results_Matrix)\n}\n\n\nKaplanMeierSurvivalPlot3 <- function(mRNAselected,FC_FDR_table_mRNA, Table_ALD_stageC_filtered, Table_ALD_normal_sample,cfu_complete,Survresult,clinical_patient_ALD){\n\n\n  cfu<-clinical_patient_ALD[clinical_patient_ALD[,\"bcr_patient_barcode\"] %in% colnames(Table_ALD_stageC_filtered),]\n  cfu <- as.data.frame(subset(cfu, select=c(\"bcr_patient_barcode\",\"Status.180.days.binary.\",\"Follow.up.at.180.days..days.\",\"Follow.up.at.180.days..days.\"))  )\n  colnames(cfu)   <- c(\"bcr_patient_barcode\",\"Dead\",\"days_to_death\",\"days_to_last_followup\")\n  cfu$Dead<-as.numeric(as.character(cfu$Dead))\n  cfu$days_to_death<-as.numeric(as.character(cfu$days_to_death))\n  cfu$days_to_last_followup<-as.numeric(as.character(cfu$days_to_last_followup))\n\n\n\n  cfu[which(cfu$Dead==0),\"days_to_death\"]<-\"-Inf\"\n  cfu[which(cfu$Dead==1),\"days_to_last_followup\"]<-\"-Inf\"\n\n  followUpLevel<-FALSE\n  Survresult<-FALSE\n\n  #FC_FDR_table_mRNA\n  mRNAselected_surv_results_Matrix<-matrix(0,nrow(as.matrix(rownames(Table_Cancer_mRNA_normal_stageC))),8)\n  colnames(mRNAselected_surv_results_Matrix)<-c(\"mRNA\",\"pvalue\",\"ALD Deaths\",\"ALD Deaths with Top\",\"ALD Deaths with Down\",\"Mean Tumor Top\",\"Mean Tumor Down\",\"Mean Normal\")\n\n  mRNAselected_surv_results_Matrix<-as.data.frame(mRNAselected_surv_results_Matrix)\n\n  cfu$days_to_death<-as.numeric(as.character(cfu$days_to_death))\n  cfu$days_to_last_followup<-as.numeric(as.character(cfu$days_to_last_followup))\n  rownames(cfu) <- cfu[, \"bcr_patient_barcode\" ] #mod1\n  cfu_complete<-cfu\n\n\n  i<-1\n\n\n\n\n\n\n  mRNAselected_values<-Table_ALD_stageC_filtered[rownames(Table_ALD_stageC_filtered) == mRNAselected,]\n  mRNAselected_values_normal<-Table_ALD_normal_sample[rownames(Table_ALD_normal_sample) == mRNAselected,]\n\n  mRNAselected_values_ordered<-sort(mRNAselected_values,decreasing=TRUE)\n  mRNAselected_values_ordered_top<-as.numeric(quantile(mRNAselected_values_ordered,ThreshTop)[1])\n  mRNAselected_values_ordered_down<-as.numeric(quantile(mRNAselected_values_ordered,ThreshDown)[1])\n\n  mRNAselected_values_newvector<-mRNAselected_values\n\n\n  if (is.na(mRNAselected_values_ordered_top)!=1){\n\n    numberOfSamples<-nrow(as.matrix(mRNAselected_values_ordered))\n    lastelementTOP<-round(numberOfSamples/3)\n\n    firstelementDOWN<- numberOfSamples  - lastelementTOP\n\n    samples_top_mRNA_selected<-rownames( as.matrix(mRNAselected_values_ordered[1: (lastelementTOP-1)  ] ))\n    samples_down_mRNA_selected<-rownames( as.matrix(mRNAselected_values_ordered[ (firstelementDOWN+1) : numberOfSamples] ))\n\n    samples_UNCHANGED_mRNA_selected<-rownames(as.matrix(which((mRNAselected_values_newvector) > mRNAselected_values_ordered_down & mRNAselected_values_newvector < mRNAselected_values_ordered_top )))\n\n    cfu_onlyTOP<-cfu_complete[cfu_complete[,\"bcr_patient_barcode\"] %in% samples_top_mRNA_selected,]\n    cfu_onlyDOWN<-cfu_complete[cfu_complete[,\"bcr_patient_barcode\"] %in% samples_down_mRNA_selected,]\n    cfu_onlyUNCHANGED<-cfu_complete[cfu_complete[,\"bcr_patient_barcode\"] %in% samples_UNCHANGED_mRNA_selected,]\n\n\n\n\n    #if( followUpLevel == TRUE)\n    #{\n    # samplesTop_over_followUplevel<- !(cfu_onlyTOP[,\"days_to_death\"] < 0 &   cfu_onlyTOP[,\"days_to_last_followup\"] < Thresh_followUP)\n    #  cfu_onlyTOP<- cfu_onlyTOP[samplesTop_over_followUplevel,]\n    # samplesDown_over_followUplevel<- !(cfu_onlyDOWN[,\"days_to_death\"] < 0 &   cfu_onlyDOWN[,\"days_to_last_followup\"] < Thresh_followUP)\n    #cfu_onlyDOWN<- cfu_onlyDOWN[samplesDown_over_followUplevel,]\n    #print(paste(\"Processing ... with followUP level >\",Thresh_followUP,\" days and\",nrow(cfu),\"clinical samples\"))\n    #  }\n\n\n\n    # else {\n    print(paste(\"Processing \", mRNAselected, \" ... without followUP level and\", nrow(as.matrix(cfu)),\"clinical samples\"))\n\n    #}\n    cfu_ordered<-NULL\n    cfu_ordered<-rbind(cfu_onlyTOP,cfu_onlyDOWN)\n    cfu<-cfu_ordered\n\n    print(dim(cfu))\n\n    # } #end else with all samples\n\n\n\n\n\n\n    ttime <- as.numeric(cfu[, \"days_to_death\"])\n\n    #ttime <- cfu[, \"days_to_death\"]\n    sum(status <- ttime > 0) # morti\n    deads_complete <- sum(status <- ttime > 0)\n\n    ttime_only_top <- cfu_onlyTOP[, \"days_to_death\"]\n    deads_top<- sum(ttime_only_top > 0)\n\n\n    if(  dim(cfu_onlyDOWN)[1] >= 1) {\n      ttime_only_down <- cfu_onlyDOWN[, \"days_to_death\"]\n      deads_down<- sum(ttime_only_down > 0)\n    }\n\n    else {deads_down <-0 }\n\n\n    print(paste(\"deaths =\",deads_complete))\n    mRNAselected_surv_results_Matrix[i,\"ALD Deaths\"]<-deads_complete\n    mRNAselected_surv_results_Matrix[i,\"ALD Deaths with Top\"]<- deads_top\n    mRNAselected_surv_results_Matrix[i,\"ALD Deaths with Down\"]<- deads_down\n\n    mRNAselected_surv_results_Matrix[i,\"Mean Normal\"]<-  format(mean(mRNAselected_values_normal),digits=3)\n\n\n\n\n\n    Table_ALD_stageC_filtered_onlyTop_sample<-Table_ALD_stageC_filtered[,samples_top_mRNA_selected]\n    Table_ALD_stageC_filtered_onlyTop_sample_mRNASelected<- Table_ALD_stageC_filtered_onlyTop_sample[rownames(Table_ALD_stageC_filtered_onlyTop_sample) == mRNAselected,]\n\n\n    Table_ALD_stageC_filtered_onlyDown_sample<-Table_ALD_stageC_filtered[,samples_down_mRNA_selected]\n    Table_ALD_stageC_filtered_onlyDown_sample_mRNASelected<- Table_ALD_stageC_filtered_onlyDown_sample[rownames(Table_ALD_stageC_filtered_onlyDown_sample) == mRNAselected,]\n\n\n    mRNAselected_surv_results_Matrix[i,\"Mean Tumor Top\"]<- format(as.numeric(mean(Table_ALD_stageC_filtered_onlyTop_sample_mRNASelected)),digits=3)\n    mRNAselected_surv_results_Matrix[i,\"Mean Tumor Down\"]<- format(as.numeric(mean(Table_ALD_stageC_filtered_onlyDown_sample_mRNASelected)),digits=3)\n\n    ttime[!status] <- as.numeric(cfu[!status, \"days_to_last_followup\"])\n    #ttime[!status] <- cfu[!status, \"days_to_last_followup\"]\n\n    ttime[which(ttime== -Inf)]<-0\n\n    library(survival)\n    ttime <- Surv(ttime, status)\n    rownames(ttime) <- rownames(cfu)\n    length(ttime)\n    #plot(survfit(ttime ~ 1))\n\n    #plot(survfit(ttime ~ c(rep(\"top\", nrow(cfu_onlyTOP)), rep(\"down\", nrow(cfu_onlyDOWN)), rep(\"unchanged\", nrow(cfu_onlyUNCHANGED)))), col = c(\"red\", \"green\",\"grey\"))\n\n    #   plot(survfit(ttime ~ c(rep(\"top\", nrow(cfu_onlyTOP)), rep(\"down\", nrow(cfu_onlyDOWN)))), col = c(\"red\", \"green\"),main= mRNAselected)\n\n\n\n\n\n    legendHigh<- paste(mRNAselected,\"High\")\n    legendLow<- paste(mRNAselected,\"Low\")\n\n\n\n\n\n\n    mRNAselected_surv_results<-survdiff(ttime  ~ c(rep(\"top\", nrow(cfu_onlyTOP)), rep(\"down\", nrow(cfu_onlyDOWN)) ))\n    mRNAselected_surv_results_chis<-unlist(mRNAselected_surv_results)$chisq\n\n    mRNAselected_surv_results_pvalue <- as.numeric(1 - pchisq(abs(mRNAselected_surv_results$chisq), df = 1))\n    #miRselected_surv_results_pvalue <- as.numeric(round(as.numeric(1 - pchisq(abs(miRselected_surv_results$chisq), df = 1)),6))\n\n    mRNAselected_surv_results_Matrix[i,\"pvalue\"]<-mRNAselected_surv_results_pvalue\n\n\n    print(paste(i,\"....\",mRNAselected,\"pvalue=\",mRNAselected_surv_results_pvalue))\n\n    #if (Survresult ==TRUE) {\n      ProbeID<- as.character(FC_FDR_table_mRNA[mRNAselected,\"GeneID\"])\n      logFC_gene<-format(FC_FDR_table_mRNA[mRNAselected,\"logFC\"], digits=3)\n\n      titlePlot<- paste(\"ALD \", mRNAselected, \", \",ProbeID, \", logFC(RG) = \",logFC_gene,    \"\\n  Kaplan-Meier Survival analysis, pvalue = \",format(mRNAselected_surv_results_pvalue,digits=3,scientific=T ))\n\n\n      plot(survfit(ttime ~ c(rep(\"low\", nrow(cfu_onlyTOP)), rep(\"high\", nrow(cfu_onlyDOWN)))), col = c(\"green\", \"red\"),main= titlePlot,xlab=\"Days\",ylab=\"Survival\")\n\n\n      legend(100, 1, legend = c(legendLow,legendHigh), col = c(\"green\", \"red\"), text.col = c(\"green\", \"red\"), pch = 15)\n\n      print(mRNAselected_surv_results)\n   # }\n  } #end if\n}\n\n\n\n\nBoxplot_for_groups <- function(TumorName,mRNAselected,FC_FDR_table_mRNA,TablemRNA_normal_sample,TablemRNA_groupI,TablemRNA_groupII,TablemRNA_groupIII,TablemRNA_groupIV,TablemRNA_groupV,typePlot){\n\n\n  mRNAselected_values_normal<-sort(TablemRNA_normal_sample[rownames(TablemRNA_normal_sample) == mRNAselected,])\n  mRNAselected_values_groupI<-TablemRNA_groupI[rownames(TablemRNA_groupI) == mRNAselected,]\n  mRNAselected_values_groupII<-TablemRNA_groupII[rownames(TablemRNA_groupII) == mRNAselected,]\n  mRNAselected_values_groupIII<-TablemRNA_groupIII[rownames(TablemRNA_groupIII) == mRNAselected,]\n  mRNAselected_values_groupIV<-TablemRNA_groupIV[rownames(TablemRNA_groupIV) == mRNAselected,]\n  mRNAselected_values_groupV<-TablemRNA_groupV[rownames(TablemRNA_groupV) == mRNAselected,]\n\n\n  mRNAselected_logFC<-format( as.numeric(FC_FDR_table_mRNA[rownames(FC_FDR_table_mRNA) == mRNAselected,][,\"logFC\"]),digits=3)\n  mRNAselected_FDR<-format( as.numeric(FC_FDR_table_mRNA[rownames(FC_FDR_table_mRNA) == mRNAselected,][,\"FDR\"]),digits=3)\n\n\n  label_axis_y<-paste(\"Expression (Log2)\")\n\n  TitlePlot<-paste(TumorName,\" \",mRNAselected, \", logFC=\",mRNAselected_logFC,\", FDR =\",mRNAselected_FDR,sep=\"\")\n\n  plotnames<-c(paste(\"N (n=\",nrow(as.matrix(mRNAselected_values_normal)),\")\",sep=\"\"), paste(\"I (n=\",nrow(as.matrix(mRNAselected_values_groupI)),\")\",sep=\"\"),paste(\"II (n=\",nrow(as.matrix(mRNAselected_values_groupII)),\")\",sep=\"\"),paste(\"III (n=\",nrow(as.matrix(mRNAselected_values_groupIII)),\")\",sep=\"\"), paste(\"IV (n=\",nrow(as.matrix(mRNAselected_values_groupIV)),\")\",sep=\"\"), paste(\"V (n=\",nrow(as.matrix(mRNAselected_values_groupV)),\")\",sep=\"\"))\n\n  paste(\"mRNAselected_values_group\",c(\"I\",\"II\",\"III\",\"IV\",\"V\"),sep=\"\")\n\n  if( typePlot==\"LOG2boxplot\")\n  {\n    boxplot(log2(mRNAselected_values_normal+1), log2(mRNAselected_values_groupI+1),log2(mRNAselected_values_groupII+1),log2(mRNAselected_values_groupIII+1), main= TitlePlot, names =plotnames,ylab=label_axis_y, xlab =\"groups\",col =c(\"white\", \"pink\", \"plum\",\"powderblue\"),ylim =c(-1,2))\n  }\n\n  if( typePlot==\"boxplot\")\n  {\n    boxplot(mRNAselected_values_normal, mRNAselected_values_groupI,mRNAselected_values_groupII,mRNAselected_values_groupIII, mRNAselected_values_groupIV,mRNAselected_values_groupV,main= TitlePlot, names =plotnames,ylab=label_axis_y, xlab =\"groups\",col =c(\"blue\",\"red\", \"green\",\"yellow\", \"orange\",\"pink\")) #,  ylim =c(-1,2) ) #\n  }\n\n\n}\n\n\n\nCreateClusterHeatmap_for2group_ver2<- function(matFiltered,sample_tab,thresholdquantile=0.75,color1,color2,nsample1,nsample2, RegDiff,sigDiff,ntop,titlePlot){\n\n  if(RegDiff ==\"UP\"){\n    sigTab<-sigDiff[sigDiff$logFC >=1,]\n  }\n  if(RegDiff ==\"DOWN\"){\n    sigTab<-sigDiff[sigDiff$logFC <=1,]\n  }\n\n  if(nrow(sigDiff)!=1){\n    if(nrow(sigDiff) < ntop) {\n      ntop <- nrow(sigTab)\n    }\n\n\n    matcol1<-matFiltered[,paste(sample_tab[which(sample_tab$Color == color1),\"AROS.ID\"],\".CEL\",sep=\"\")]\n    matcol2<-matFiltered[,paste(sample_tab[which(sample_tab$Color == color2),\"AROS.ID\"],\".CEL\",sep=\"\")]\n    expr <-cbind(matcol1,matcol2)\n\n\n    tfSel<-rownames(sigTab)[1:ntop]\n\n    TablemRNA_MR <- expr[tfSel,]\n\n  TablemRNA_MR[ TablemRNA_MR >= quantile(TablemRNA_MR,thresholdquantile)]<- quantile(TablemRNA_MR,thresholdquantile)\n\n  Dist_mRNA_samples <- dist(TablemRNA_MR)\n  Dist_mRNA_species <- dist(t(TablemRNA_MR))\n\n  sHc  <- hclust(Dist_mRNA_samples, method = \"ward.D\")\n  #sHc  <- hclust(Dist_mRNA_samples, method = \"ward\")\n\n  gHc  <- hclust(Dist_mRNA_species)\n\n  heatmap(t(TablemRNA_MR),scale = \"none\",cexRow=0.7\n          , col = colorRampPalette(c(\"green\", \"red\"))(50)\n          , labCol = rownames(TablemRNA_MR), #labRow = rownames(TablemRNA_MR) # Symbol and CHR\n          , Colv =  as.dendrogram(sHc)\n          , Rowv =  as.dendrogram(gHc)\n          , RowSideColors = rep(c(color1,color2), c(nsample1, nsample2)),\n          main =titlePlot\n  )\n}\n}\n\n\n\n\nCreateClusterHeatmap_for2group_ver3<- function(matcol1,matcol2,thresholdquantile=0.75,color1,color2,nsample1,nsample2, RegDiff,sigDiff,ntop,titlePlot,mx,my,cexR, cexC){\n\n  if(RegDiff ==\"UP\"){\n    sigTab<-sigDiff[sigDiff$logFC >=1,]\n  }\n  if(RegDiff ==\"DOWN\"){\n    sigTab<-sigDiff[sigDiff$logFC <=1,]\n  }\n\n  if(RegDiff ==\"ALL\"){\n    sigTab<-sigDiff[abs(sigDiff$logFC) >=1,]\n  }\n\n\n  if(nrow(sigDiff)!=1){\n    if(nrow(sigDiff) < ntop) {\n      ntop <- nrow(sigTab)\n    }\n\n\n  #  matcol1<-matFiltered[,paste(sample_tab[which(sample_tab$Color == color1),\"AROS.ID\"],\".CEL\",sep=\"\")]\n  #  matcol2<-matFiltered[,paste(sample_tab[which(sample_tab$Color == color2),\"AROS.ID\"],\".CEL\",sep=\"\")]\n    expr <-cbind(matcol1,matcol2)\n\n\n\n\n    tfSel<-rownames(sigTab)[1:ntop]\n\n    TablemRNA_MR <- expr[tfSel,]\n\n\n\n\n\n    TablemRNA_MR[ TablemRNA_MR >= quantile(TablemRNA_MR,thresholdquantile)]<- quantile(TablemRNA_MR,thresholdquantile)\n\n    Dist_mRNA_samples <- dist(TablemRNA_MR)\n    Dist_mRNA_species <- dist(t(TablemRNA_MR))\n\n    sHc  <- hclust(Dist_mRNA_samples, method = \"ward.D\")\n    #sHc  <- hclust(Dist_mRNA_samples, method = \"ward\")\n\n    gHc  <- hclust(Dist_mRNA_species)\n # heatmap.2(exprs(esetSel), col=redgreen(75), scale=\"row\", ColSideColors=patientcolors,\n  #          key=TRUE, symkey=FALSE, density.info=\"none\", trace=\"none\", cexRow=0.5)\n\n\n #heatmap.2(as.matrix(mydata[,cn]), Colv=FALSE,\n  #         dendrogram=\"row\",trace=\"none\", margin=c(8,9),\n   #        hclust=hclustfunc,distfun=distfunc)\n\n    heatmap(t(TablemRNA_MR),scale = \"none\",cexRow=cexR, cexCol=cexC,\n            #, col = colorRampPalette(c(\"green\", \"red\"))(50),\n            , col = redgreen(75)\n            , labCol = paste(rownames(TablemRNA_MR), \" \", sigTab$Gene.symbol, \" with logFC = \", round(sigTab$logFC,3) ,sep=\"\"), #labRow = rownames(TablemRNA_MR) # Symbol and CHR\n            #, Colv =  as.dendrogram(sHc)\n            #dendrogram = NULL, Rowv = FALSE, Colv = FALSE\n            #, Rowv =  NULL\n            , Colv = FALSE, dendrogram=\"row\",trace=\"none\",\n          #  ,key=TRUE, symkey=FALSE, density.info=\"none\", trace=\"none\",\n           #, Rowv =  as.dendrogram(gHc)\n            , RowSideColors = rep(c(color1,color2), c(nsample1, nsample2)),margins = c(mx,my),\n            main =titlePlot\n    )\n  }\n}\n\nCreateClusterHeatmap_for2group_ver3_inv<- function(matcol1,matcol2,thresholdquantile=0.75,color1,color2,nsample1,nsample2, RegDiff,sigDiff,ntop,titlePlot,mx,my,cexR, cexC){\n\n  if(RegDiff ==\"UP\"){\n    sigTab<-sigDiff[sigDiff$logFC >=1,]\n  }\n  if(RegDiff ==\"DOWN\"){\n    sigTab<-sigDiff[sigDiff$logFC <=1,]\n  }\n\n  if(RegDiff ==\"ALL\"){\n    #sigTab<-sigDiff[abs(sigDiff$logFC) >=1,]\n    sigTab<-sigDiff\n  }\n\n\n  if(nrow(sigDiff)!=1){\n    if(nrow(sigDiff) < ntop) {\n      ntop <- nrow(sigTab)\n    }\n\n\n    #  matcol1<-matFiltered[,paste(sample_tab[which(sample_tab$Color == color1),\"AROS.ID\"],\".CEL\",sep=\"\")]\n    #  matcol2<-matFiltered[,paste(sample_tab[which(sample_tab$Color == color2),\"AROS.ID\"],\".CEL\",sep=\"\")]\n    expr <-cbind(matcol1,matcol2)\n\n\n\n\n    tfSel<-rownames(sigTab)[1:ntop]\n\n    TablemRNA_MR <- expr[tfSel,]\n\n\n\n\n\n    TablemRNA_MR[ TablemRNA_MR >= quantile(TablemRNA_MR,thresholdquantile)]<- quantile(TablemRNA_MR,thresholdquantile)\n\n    Dist_mRNA_samples <- dist(TablemRNA_MR)\n    Dist_mRNA_species <- dist(t(TablemRNA_MR))\n\n    sHc  <- hclust(Dist_mRNA_samples, method = \"ward.D\")\n    #sHc  <- hclust(Dist_mRNA_samples, method = \"ward\")\n\n    gHc  <- hclust(Dist_mRNA_species)\n    # heatmap.2(exprs(esetSel), col=redgreen(75), scale=\"row\", ColSideColors=patientcolors,\n    #          key=TRUE, symkey=FALSE, density.info=\"none\", trace=\"none\", cexRow=0.5)\n\n\n    #heatmap.2(as.matrix(mydata[,cn]), Colv=FALSE,\n    #         dendrogram=\"row\",trace=\"none\", margin=c(8,9),\n    #        hclust=hclustfunc,distfun=distfunc)\n\n    heatmap.2((TablemRNA_MR),scale = \"none\",cexRow=cexR, cexCol=cexC,\n            #, col = colorRampPalette(c(\"green\", \"red\"))(75),\n            , col = greenred(75)\n            ,Rowv = F #, dendrogram = \"none\"\n            , labRow = paste(rownames(TablemRNA_MR), \" \", sigTab$Gene.symbol, \" with logFC = \", round(sigTab$logFC,3) ,sep=\"\"), #labRow = rownames(TablemRNA_MR) # Symbol and CHR\n            #, Colv =  as.dendrogram(sHc)\n            #dendrogram = NULL, Rowv = FALSE, Colv = FALSE\n            #, Rowv =  NULL\n            , Colv = F , trace=\"none\"#dendrogram=\"row\",\n            #  ,key=TRUE, symkey=FALSE, density.info=\"none\", trace=\"none\",\n            #, Rowv =  as.dendrogram(gHc)\n            , ColSideColors = rep(c(color1,color2), c(nsample1, nsample2)),margins = c(mx,my),\n            main =titlePlot\n    )\n  }\n}\n\n\nCreateClusterHeatmap_for2group_ver4<- function(matcol1,matcol2,thresholdquantile=0.75,color1,color2, sigTab,ntop,titlePlot,mx,my,cexR, cexC){\n\n    nsample1 <- ncol(matcol1)\n    nsample2 <- ncol(matcol2)\n\n    expr <-cbind(matcol1,matcol2)\n    TablemRNA_MR <- expr[sigTab$ID,]\n\n    print(dim(TablemRNA_MR))\n    TablemRNA_MR[ TablemRNA_MR >= quantile(TablemRNA_MR,thresholdquantile)]<- quantile(TablemRNA_MR,thresholdquantile)\n    Dist_mRNA_samples <- dist(TablemRNA_MR)\n    Dist_mRNA_species <- dist(t(TablemRNA_MR))\n    sHc  <- hclust(Dist_mRNA_samples, method = \"ward.D\")\n    gHc  <- hclust(Dist_mRNA_species)\n\n    # heatmap.2(exprs(esetSel), col=redgreen(75), scale=\"row\", ColSideColors=patientcolors,\n    #          key=TRUE, symkey=FALSE, density.info=\"none\", trace=\"none\", cexRow=0.5)\n\n\n    #heatmap.2(as.matrix(mydata[,cn]), Colv=FALSE,\n    #         dendrogram=\"row\",trace=\"none\", margin=c(8,9),\n    #        hclust=hclustfunc,distfun=distfunc)\n\n\n\n\n    heatmap(t(TablemRNA_MR),cexRow=cexR, cexCol=cexC\n            , col = redgreen(75)   #, col = colorRampPalette(c(\"green\", \"red\"))(50),\n          #  , labCol = paste(rownames(TablemRNA_MR), \" \", sigTab$Gene.symbol, \" with logFC = \", round(sigTab$logFC,3) ,sep=\"\"),\n           # , RowSideColors = rep(c(color1,color2), c(nsample1, nsample2)),margins = c(mx,my)\n            #, main =titlePlot\n            #,dendrogram=\"row\"\n            #, col = colorRampPalette(c(\"green\", \"red\"))(50)\n            , labCol = rownames(TablemRNA_MR), #labRow = rownames(TablemRNA_MR) # Symbol and CHR\n            , Colv =  as.dendrogram(sHc)\n            , Rowv =  as.dendrogram(gHc)\n            , RowSideColors = rep(c(color1,color2), c(nsample1, nsample2)),\n            main =titlePlot\n\n\n            #, Colv =  FALSE # Colv =  as.dendrogram(sHc)\n            #, Rowv =  as.dendrogram(gHc)\n\n    )\n       #labRow = rownames(TablemRNA_MR) # Symbol and CHR\n\n            #dendrogram = NULL, Rowv = FALSE, Colv = FALSE\n            #, Rowv =  NULL\n            #, Colv = FALSE, dendrogram=\"row\",trace=\"none\",\n            #  ,key=TRUE, symkey=FALSE, density.info=\"none\", trace=\"none\",\n\n  }\n\n\n\nConvertMatProbeToGeneMat <- function(mat,GPL_platform){\n  mat<- mat[order(rownames(mat),decreasing=T),]\n  mat2<- mat\n  mat2 <-as.data.frame(cbind(GeneID =rownames(mat2),mat2))\n  mat2<- mat2[order(mat2$GeneID,decreasing=T),]\n\n  idx <- grep(\"///\", GPL_platform[, \"Gene.Symbol\"])\n  tmpNames <- matrix(0,length(idx),1)\n\n  for ( k in 1:length(idx)){\n    tmpNames[k]<-  unlist(strsplit(as.character(GPL_platform[idx[k],\"Gene.Symbol\" ]), \" /// \"))[1]\n  }\n  GPL_platform[idx, \"Gene.Symbol\"]<- as.character(tmpNames)\n  GPL_platform<- GPL_platform[order(GPL_platform$ID,decreasing=T),]\n  mat2<-cbind(GPL_platform, mat2)\n  #check on rownames\n  sum(rownames(mat)==mat2$ID)\n  MeanGenes <- rowMeans(mat)\n  mat2 <- cbind(MeanGenes,mat2)\n  mat2<- mat2[order(mat2$MeanGenes,decreasing=T),]\n  mat2 <- mat2[!duplicated(mat2$Gene.Symbol),]\n  matFiltered <- mat[mat2$ID,]\n return(matFiltered)\n}\n\n\nCreateBoxPlotDiffGenes <- function(matFiltered,sample_tab,col1,col2,RegDiff,sigDiff,ntop){\n\n\n  if(RegDiff ==\"UP\"){\n    sigTab<-sigDiff[sigDiff$logFC >=1,]\n  }\n  if(RegDiff ==\"DOWN\"){\n    sigTab<-sigDiff[sigDiff$logFC <=1,]\n  }\n\n  if(nrow(sigDiff)!=1){\n  if(nrow(sigDiff) < ntop) {\n    ntop <- nrow(sigTab)\n  }\n\n\nmatcol1<-matFiltered[,paste(sample_tab[which(sample_tab$Color == col1),\"AROS.ID\"],\".CEL\",sep=\"\")]\nmatcol2<-matFiltered[,paste(sample_tab[which(sample_tab$Color == col2),\"AROS.ID\"],\".CEL\",sep=\"\")]\nTitlePlot<-paste(\"ALD Top \", ntop,\" \", RegDiff, \" Diff.expr genes between  \\n\" , col1 ,  \" (n=\",ncol(as.matrix(matcol1)),\")\", \"and \", col2, \" (n=\",ncol(as.matrix(matcol2)),\")\" , \"groups\",sep=\"\")\n\nmRNAselected_values_col1<-matcol1[rownames(sigTab)[1:ntop],]\nmRNAselected_values_col2<-matcol2[rownames(sigTab)[1:ntop],]\n\nmaxvalue<-round(max(c(mRNAselected_values_col1,mRNAselected_values_col2)))+1\ngenelist <- as.character(rownames(sigTab)[1:ntop])\n\nboxplot(mRNAselected_values_col1~genelist,\n        at = 1:ntop - 0.1,boxwex = 0.25,col = col1,\n        xlim = c(0, ntop+1), ylim = c(0, maxvalue), yaxs = \"i\", xpd=TRUE, srt=45 )\nboxplot(mRNAselected_values_col2~genelist,at = 1:ntop + 0.1,col = col2,boxwex = 0.25,add = TRUE,\n        main = TitlePlot,names=rep(\"\",ntop),\n        xlab = \"Genes\",\n        ylab = \"Expression (Log2)\", xlim = c(0, ntop+1), ylim = c(0, maxvalue), yaxs = \"i\")\n\n}\n}\n\ncreateDirectory = function(base){\n  i=\"\";\n  while(file.exists(paste(base, i, sep=\"\"))){\n    if(i==\"\"){\n      i=1;\n    }else{\n      i=i+1;\n    }\n  }\n  toDir = paste(base, i, sep=\"\")\n  dir.create(toDir)\n\n  toDir\n}\n\nTCGADownload <- function(Tumor, Type, Species, PlatformAndAssociatedData, downloadFolder = \"\",PlatformType,nsample=0, listSample=0){\n  require(RCurl)\n  downloadFolder<-paste(downloadFolder,PlatformType,\"/\",sep=\"\")\n  createDirectory(PlatformType)\n  siteTCGA <- \"https://tcga-data.nci.nih.gov/tcgafiles/ftp_auth/distro_ftpusers/anonymous/tumor/\"\n  tmp <- PlatformAndAssociatedData[toupper(PlatformAndAssociatedData$Tumor) == toupper(Tumor)\n                                   & toupper(PlatformAndAssociatedData$Type) == toupper(Type)\n                                   & toupper(PlatformAndAssociatedData$Species) == toupper(Species)\n                                   & toupper(PlatformAndAssociatedData$Platform) == toupper(PlatformType), ]\n\n  key1a <- paste(unique(tmp$CenterType), unique(tmp$Center), unique(tmp$Platform), sep=\"/\")\n  Description <- paste(siteTCGA, tolower(tmp$Tumor), \"/\",key1a, sep=\"\")\n  key2a <- paste(\"/\",tmp$Folder,\"/\",sep=\"\")\n\n   if(PlatformType == \"illuminaga_dnaseq\"){\n    toDdl <- DownloaDmageTAB_sdrf(Description, keySpecies = key2a, KeyGrep1 = \"Level_2\", KeyGrep2 = \"somatic.maf\")\n    toDdl <- paste(Description, key2a, toDdl, sep = \"\")\n\n    x <- DownloadURL(toDdl)\n    x <- strsplit(x, \"\\t\")\n    x <- x[-1]\n    x <- matrix(unlist(x), nrow = length(x), byrow = T)\n    colnames(x) <- x[1, ]\n    x <- x[-1, ]\n\n    return(x)\n  }\n\n\n\n  toDdl <- DownloaDmageTAB_sdrf(Description, keySpecies = key2a, KeyGrep1 = \"Level_3\", KeyGrep2 = \"MANIFEST.txt\")\n  toDdl <- paste(Description, key2a, toDdl, sep = \"\")\n\n\n  x <- DownloadURL(toDdl)\n  x <- sapply(strsplit(x, \"  \"), function(y) y[2])\n\n  if(PlatformType == \"illuminahiseq_rnaseq\"){  x <- x[grep(\"gene.quantification\", x)] }\n  if(PlatformType == \"agilentg4502a_07_3\"){    x <- x[grep(\"tcga_level3\", x)]}\n  if(PlatformType == \"illuminahiseq_rnaseqv2\"){ x <- x[grep(\"rsem.genes.results\", x)] }\n  if(PlatformType == \"humanmethylation27\"){ x <- x[grep(\"HumanMethylation27\", x)] }\n  if(PlatformType == \"humanmethylation450\"){ x <- x[grep(\"HumanMethylation450\", x)] }\n  if(PlatformType == \"illuminaga_mirnaseq\"){ x <- x[grep(\"mirna.quantification\", x)] }\n  if(PlatformType == \"illuminahiseq_mirnaseq\"){ x <- x[grep(\"mirna.quantification\", x)] }\n\n\n  if(PlatformType == \"genome_wide_snp_6\"){ x <- x[grep(\"hg19.seg\", x)]\n                                           x <- x[-grep(\"nocnv\", x)]}\n\n  if(PlatformType == \"mda_rppa_core\"){  x <- x[grep(\"protein_expression\", x)] }\n\n\n\n\n  plt <- PlatformAndAssociatedData\n  plt2 <- plt[toupper(plt$Tumor) == toupper(Tumor) & plt$Platform == PlatformType,]\n\n  version <- gsub(Description,\"\",toDdl)\n  version <- gsub(key2a,\"\",version)\n  version <- gsub(\"MANIFEST.txt\",\"\",version)\n\n  print(paste(\"Found \", length(x), \" samples of \",Tumor, \"version: \", version, \"...\" ))\n  samplesList <- paste(gsub(\"MANIFEST.txt\", \"\", toDdl), x, sep = \"\")\n\n  if (nsample!=0){\n    samplesList <- samplesList[1:nsample]\n  }\n\n  if( listSample!=0){\n    samplesList <- samplesList[ grep(listSample,samplesList)]\n  }\n\n  for(i in 1:length(samplesList)){\n    tmp2 <- DownloadURL(samplesList[i])\n    filename <- paste(downloadFolder, x[i], sep = \"\")\n    writeLines(tmp2, filename)\n    print(paste(x[i], \" ... sample n. \", i, \" of \", length(samplesList), sep = \"\"))\n  }\n\n  lf <- list.files(downloadFolder)\n  lf1<-lf\n  lf <- paste(downloadFolder, lf, sep = \"\")\n\n  tmpData <- read.delim(lf[1], stringsAsFactors = FALSE)\n  geData <- matrix(0, nrow = nrow(tmpData), ncol = length(lf))\n\n\n  if(PlatformType == \"agilentg4502a_07_3\"){\n    tmpData <- tmpData[-1, ]\n    geData <- matrix(0, nrow = nrow(tmpData), ncol = length(lf))\n    rownames(geData) <- tmpData$Hybridization.REF\n    colNames <- rep(\"\", length(lf))\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      colNames[i] <- colnames(tmpData)[2]\n      tmpData <- tmpData[-1, 2]\n      tmpData[which(tmpData == \"null\")] <- NA\n      geData[, i] <- as.numeric(tmpData)\n      print(i)\n    }\n    colnames(geData) <- substr(gsub(\"\\\\.\", \"-\", colNames),1,16)\n  }\n\n  if(PlatformType == \"illuminahiseq_rnaseq\"){\n    rownames(geData) <- tmpData$gene\n    colnames(geData) <- substr(paste(\"TCGA\", sapply(strsplit(lf, \"TCGA\"), function(y) y[2]), sep = \"\"), 1, 28)\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      expr <- tmpData$raw_counts\n      geData[, i] <- expr\n      print(i)\n    }\n  }\n\n  if(PlatformType == \"illuminahiseq_rnaseqv2\"){\n    rownames(geData) <- tmpData$gene_id\n    path2 <- paste(Description, key2a,plt2$FileName,sep=\"\")\n    xpath <- DownloadURL(path2)\n    nc<-length(unlist(strsplit(xpath[1], \"\\t\")))\n    xmat <- matrix( unlist(strsplit(xpath, \"\\t\") ), ncol=nc,byrow=T)\n    colnames(xmat)<-gsub(\" \",\"_\",xmat[1,])\n\n    xmat<-xmat[-1,]\n    xmat <- as.data.frame(xmat,stringsAsFactors=F)\n    xmat2 <- xmat[grep(\"rsem.genes.results\",xmat$Derived_Data_File),]\n    xmat2 <- xmat[sapply(lf1,function(y) grep(y, xmat$Derived_Data_File)),]\n\n    colnames(geData)<-xmat2$'Comment_[TCGA_Barcode]'\n\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      expr <- tmpData$raw_count\n      geData[, i] <- expr\n      print(i)\n    }\n  }\n\n\n\n  if(PlatformType == \"humanmethylation27\" || PlatformType == \"humanmethylation450\" ){\n    tmpData <- tmpData[-1, ]\n    geData <- matrix(0, nrow = nrow(tmpData), ncol = length(lf))\n    rownames(geData) <- tmpData$Hybridization.REF\n    colNames <- rep(\"\", length(lf))\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      colNames[i] <- colnames(tmpData)[2]\n      tmpData <- tmpData[-1, 2]\n      tmpData[which(tmpData == \"null\")] <- NA\n      geData[, i] <- as.numeric(tmpData)\n      print(i)\n    }\n    colnames(geData) <- substr(gsub(\"\\\\.\", \"-\", colNames),1,28)\n  }\n\n\n\n  if(PlatformType == \"illuminaga_mirnaseq\" || PlatformType == \"illuminahiseq_mirnaseq\"){\n    rownames(geData) <- tmpData$miRNA_ID\n    colnames(geData) <- substr(paste(\"TCGA\", sapply(strsplit(lf, \"TCGA\"), function(y) y[2]), sep = \"\"), 1, 28)\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      expr <- tmpData$read_count\n      geData[, i] <- expr\n      print(i)\n    }\n  }\n\n  if(PlatformType == \"mda_rppa_core\"){\n    tmpData <- tmpData[-1, ]\n    geData <- matrix(0, nrow = nrow(tmpData), ncol = length(lf))\n    rownames(geData) <- tmpData$Sample.REF\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      tmpData <- tmpData[-1, 2]\n      tmpData[which(tmpData == \"null\")] <- NA\n      geData[, i] <- as.numeric(tmpData)\n      print(i)\n    }\n    colNames <- gsub(\".txt\", \"\", sapply(strsplit(lf1, \"Level_3.\"), function(x) x[2]))\n\n    toDdl <- DownloaDmageTAB_sdrf(Description, key2a, KeyGrep1 = \"mage-tab\", KeyGrep2 = \"array_design.txt\")\n    toDdl <- paste(Description, key2a, toDdl, sep = \"\")\n    x <- DownloadURL(toDdl)\n    x <- strsplit(x, \"\\t\")\n    x <- matrix(unlist(x), nrow = length(x), byrow = T)\n    x <- gsub(\"\\r\", \"\", x)\n    colnames(x) <- x[1, ]\n    x <- x[-1, ]\n    rownames(x) <- x[, \"UUID\"]\n\n    colnames(geData) <- x[colNames, \"Sample.barcode\"]\n  }\n\n\n  if(PlatformType == \"genome_wide_snp_6\"){\n\n    path2 <- paste(Description, key2a,plt2$FileName,sep=\"\")\n    xpath <- DownloadURL(path2)\n    nc<-length(unlist(strsplit(xpath[1], \"\\t\")))\n    xmat <- matrix( unlist(strsplit(xpath, \"\\t\") ), ncol=nc,byrow=T)\n    colnames(xmat)<-gsub(\" \",\"_\",xmat[1,])\n\n    xmat<-xmat[-1,]\n    xmat <- as.data.frame(xmat,stringsAsFactors=F)\n    lf2<-gsub(\"hg19\",\"hg18\",lf1)\n    lf3 <- intersect(lf2, xmat$Derived_Array_Data_File)\n\n    xmat2 <- xmat[sapply(lf3,function(y) grep(y, xmat$Derived_Array_Data_File)),]\n    #grep(lf2[5], xmat$Derived_Array_Data_File)\n\n    geData <- matrix(0, nrow = nrow(tmpData), ncol = length(lf3))\n    colnames(geData)<-xmat2$'Comment_[TCGA_Barcode]'\n\n   # rownames(geData) <- tmpData$gene\n   # colnames(geData) <- substr(paste(\"TCGA\", sapply(strsplit(lf, \"TCGA\"), function(y) y[2]), sep = \"\"), 1, 16)\n    for(i in 1:length(lf)){\n      tmpData <- read.delim(lf[i], stringsAsFactors = FALSE)\n      expr <- tmpData$Segment_Mean\n      geData[, i] <- expr\n      print(i)\n    }\n  }\n\n\n\n  return(geData)\n\n}\n\nTCGAVersion <- function(Tumor, PlatformType,PlatformAndAssociatedData){\n\n  require(RCurl)\n  #downloadFolder<-paste(downloadFolder,PlatformType,\"/\",sep=\"\")\n  #createDirectory(PlatformType)\n  siteTCGA <- \"https://tcga-data.nci.nih.gov/tcgafiles/ftp_auth/distro_ftpusers/anonymous/tumor/\"\n  tmp <- PlatformAndAssociatedData[toupper(PlatformAndAssociatedData$Tumor) == toupper(Tumor)\n                                   & toupper(PlatformAndAssociatedData$Platform) == toupper(PlatformType), ]\n\n  key1a <- paste(unique(tmp$CenterType), unique(tmp$Center), unique(tmp$Platform), sep=\"/\")\n  Description <- paste(siteTCGA, tolower(tmp$Tumor), \"/\",key1a, sep=\"\")\n  key2a <- paste(\"/\",tmp$Folder,\"/\",sep=\"\")\n\n  #toDdl <- DownloaDmageTAB_sdrf(Description, keySpecies = key2a, KeyGrep1 = \"Level_3\", KeyGrep2 = \"MANIFEST.txt\")\n  #toDdl <- paste(Description, key2a, toDdl, sep = \"\")\n  #x <- DownloadURL(toDdl)\n  #x <- sapply(strsplit(x, \"  \"), function(y) y[2])\n\n  toDdl <- paste(Description, key2a, sep = \"\")\n  x <- DownloadURL(toDdl)\n  xver <- x[grep(\"Level_3\",x)]\n  xver <- as.matrix(xver[-grep(\"tar.gz\",xver)])\n  xverMat <- as.data.frame(matrix(0,nrow(xver),2))\n  colnames(xverMat)<-c(\"Version\",\"Date\")\n\n  for( i in 1: nrow(xverMat)){\n    xtmp1 <- xver[i]\n    xver2 <- as.matrix(unlist(strsplit(xtmp1, \"  \")))\n    timeVer <- xver2[grep(\":\",xver2)]\n    Vers <- xver2[grep(\"Level_3\",xver2)]\n    Vers  <- as.matrix(sapply(strsplit(Vers, \">\"), function(y) y[2]))\n    Vers  <- as.matrix(sapply(strsplit(Vers, \"<\"), function(y) y[1]))\n    xverMat$Version[i]<- Vers\n    xverMat$Date[i]<-timeVer\n  }\n\n\n  xverMat <- cbind(xverMat, Samples = matrix(0, nrow(xverMat),1), SizeMbyte = matrix(0, nrow(xverMat),1))\n  print(paste(\"Found \", nrow(xverMat), \" Version of \", PlatformType,sep=\"\"))\n\n  for( i in 1: nrow(xverMat)){\n\n  todown1<- paste(Description,key2a,xverMat$Version[i],sep=\"\")\n  print(paste(\"Version \", i , \" of \", nrow(xverMat), \" \", xverMat$Version[i], \" ...done\",sep=\"\"))\n  x <- DownloadURL(todown1)\n\n  if(PlatformType == \"illuminahiseq_rnaseq\"){  x <- x[grep(\"gene.quantification\", x)] }\n  if(PlatformType == \"agilentg4502a_07_3\"){    x <- x[grep(\"tcga_level3\", x)]}\n  if(PlatformType == \"illuminahiseq_rnaseqv2\"){ x <- x[grep(\"rsem.genes.results\", x)] }\n  if(PlatformType == \"humanmethylation27\"){ x <- x[grep(\"HumanMethylation27\", x)] }\n  if(PlatformType == \"humanmethylation450\"){ x <- x[grep(\"HumanMethylation450\", x)] }\n  if(PlatformType == \"illuminaga_mirnaseq\"){ x <- x[grep(\"mirna.quantification\", x)] }\n  if(PlatformType == \"genome_wide_snp_6\"){ x <- x[grep(\"hg19.seg\", x)]}\n\n  x2<- sapply(strsplit(x, \":\"), function(y) y[2])\n  x3<- sapply(strsplit(x2, \" \"), function(y) y[3])\n  sizeK <- x3[grep(\"K\",x3)]\n  sizeM <- x3[grep(\"M\",x3)]\n  sizeK_1 <- as.numeric(gsub(\"K\",\"\",sizeK))\n  sizeM_1 <- as.numeric(gsub(\"M\",\"\",sizeM))\n  sizeK_2<- round(sum(sizeK_1)/1000)\n  sizeM_2<- sum(sizeM_1)\n  sizeTot<- sizeK_2+sizeM_2\n  xverMat$SizeMbyte[i]<-sizeTot\n  xverMat$Samples[i]<-length(x3)\n\n  }\n  return(xverMat)\n}\n\nlibrary(ROCR)\nRFclassif <- function(df,fmla,titleLabel,kfold=10){\n  classifiers <- list()\n  classif <- cv(df, fmla, k=kfold,\n                model_callback=function(fmla, data, class) {\n                  randomForest(fmla, data=data, probability=TRUE)\n                },\n                predict_callback=function(model, newdata, class) {\n                  prob <- predict(model, newdata=newdata, type=\"prob\")\n                  prediction(prob[,2], newdata[[class]])\n                }, ncores=1)\n  predictions <- as.vector(unlist(sapply(classif, function(x) x@predictions[[1]])))\n  truth <- as.vector(unlist(sapply(classif, function(x) x@labels[[1]])))\n\n  classifiers[[length(classifiers)+1]] <- list(label=titleLabel,\n                                               predictions=predictions,\n                                               truth=truth)\n  return(classifiers)\n\n}\n\n\n## Function to perform bagging (bootstrap aggregating)\n##\n## @param training    the training dataframe\n## @param testing     the testing dataframe/instance\n## @param fmla        a formula object correlating dependent and independent variable\n## @param B           number of new (training) dataset sampled with replacement from 'training'\n##\n## @return list       a list of ROCR prediction objects\nbagging <- function(training, testing, fmla, B, model_callback, predict_callback) {\n  predictions <- lapply(seq(1,B), function(i) {\n    instance.position <- sample(1:nrow(training), nrow(training), replace=TRUE)\n    bag <- training[instance.position,]\n    dependent.variable <- all.vars(fmla)[1] # retrieve the output variable\n\n    model <- model_callback(fmla, data=bag, class=dependent.variable)\n    pred <- predict_callback(model, newdata=testing, class=dependent.variable)\n    pred\n  })\n  predictions\n}\n\n## Cross validation function\n##\n## @require parallel\n## @require caret\n##\n## @param   df                  dataset\n## @param   fmla                a formula object correlating dependent and independent variable\n## @param   k                   number of folds in cv, set k=nrow(df) to have loo\n## @param   model_callback\n## @param   predict_callback\n## @param   B.set               number of new (training) dataset sampled with replacement from 'training'\n## @param   doBagging           whether or not use bagging during classification\n## @param   ncores              if ncores > 1 then it works in parallel\n##\n## @return  list       a (nested) list of ROCR prediction objects\ncv <- function(df, fmla, k=10, model_callback, predict_callback, doBagging=FALSE, B=NULL, ncores=1) {\n  require(parallel)\n  require(caret)\n\n  dependent.variable <- all.vars(fmla)[1] # one dependent variable at a time\n  folds <- createFolds(df[[dependent.variable]], k=k, list=TRUE, returnTrain=FALSE)\n  names(folds) <- NULL\n\n  res <- mclapply(folds, function(idx) {\n    testing <- df[idx,]\n    training <- df[-idx,]\n\n    ret <- NULL\n    if (doBagging) {\n      ret <- bagging(training=training, testing=testing, fmla=fmla, B=B,\n                     model_callback=model_callback, predict_callback=predict_callback)\n    } else {\n      model <- model_callback(fmla, data=training, class=dependent.variable)\n      pred <- predict_callback(model, newdata=testing, class=dependent.variable)\n      ret <- pred\n    }\n    ret\n  }, mc.cores=ncores)\n  res\n}\n\n## it returns a dataframe with auc performances\n##\n## @param   classifiers     a list, where each element contains three information\n##                          i) 'label': string representing the classifier used\n##                          ii) 'predictions': vector of numerical prediction\n##                          iii) 'truth': vector of true results\nauc <- function(classifiers, labels=NULL) {\n  if (is.null(labels)) {\n    labels <- sapply(classifiers, function(x) {x$label})\n  }\n\n  auc <- sapply(classifiers, function(x) {\n    pred <- prediction(x$predictions, x$truth)\n    perf <- performance(pred, \"auc\")\n    perf@y.values[[1]]\n  })\n  auc.df <- data.frame(auc=auc)\n  rownames(auc.df) <- labels\n  auc.df\n}\n\n## it plot ROC curves\n##\n## @param   classifiers     a list, where each element contains three information\n##                          i) 'label': string representing the classifier used\n##                          ii) 'predictions': vector of numerical prediction\n##                          iii) 'truth': vector of true results\nplot.roc <- function(classifiers, main=\"\", labels=NULL, xleg=0.5, yleg=0.5, numbercols=1 , fontcex=0.65, legtw, ...) {\n  if (is.null(labels)) {\n    labels <- sapply(classifiers, function(x) {x$label})\n  }\n\n  colorsLeg <- colors()\n # palette <- sample(colorsLeg, length(classifiers) )\n  palette <- as.matrix(rainbow(length(classifiers)))\n\n  #par(xpd=T, mar=par()$mar+c(0,0,0,4))\n\n\n  for(i in 1:length(classifiers)) {\n    pred <- prediction(classifiers[[i]]$predictions, classifiers[[i]]$truth)\n    perf <- performance(pred, \"tpr\", \"fpr\")\n\n    if (i > 1) {\n      plot(perf, col=palette[i], add=TRUE)\n    } else {\n      plot(perf, col=palette[i], main=main)\n    }\n  }\n  #pch = 3\n  #print(labels)\n\n  #legend(\"bottomright\", legend=labels,fill = 1:10 ,ncol = 1, cex = 0.45 , col=palette, horiz=FALSE, ...)\n #legend(0.4,0.6, legend=labels,ncol = 1, fill = 1:length(classifiers), cex = 0.45 , col = palette, horiz=FALSE)\n\n legend(xleg, yleg,  legend = labels, col = palette,cex = fontcex,pch = 15,ncol=numbercols,text.width = legtw)\n\n\n#legend(\"topright\", inset=c(xleg,yleg), legend = labels, col = palette,cex = 0.25,pch = 15)\n\n\n\n}\n\n\nplot.roc2 <- function(classifiers, main=\"\", labels=NULL, xleg=0.5, yleg=0.5, numbercols=1 , ...) {\n  if (is.null(labels)) {\n    labels <- sapply(classifiers, function(x) {x$label})\n  }\n\n  colorsLeg <- colors()\n  # palette <- sample(colorsLeg, length(classifiers) )\n  palette <- as.matrix(rainbow(length(classifiers)))\n\n  #par(xpd=T, mar=par()$mar+c(0,0,0,4))\n\n\n  for(i in 1:length(classifiers)) {\n    pred <- prediction(classifiers[[i]]$predictions, classifiers[[i]]$truth)\n    perf <- performance(pred, \"tpr\", \"fpr\")\n\n    if (i > 1) {\n      plot(perf, col=\"blue\", add=TRUE)\n    } else {\n      plot(perf, col=\"blue\", main=main)\n    }\n  }\n  #pch = 3\n  #print(labels)\n\n\n # xcoords <- c(0, 10, 30, 60)\n#  secondvector <- (1:length(labels))-1\n # textwidths <- xcoords/secondvector # this works for all but the first element\n#  textwidths[1] <- 0 # so replace element 1 with a finite number (any will do)\n\n\n  #legend(\"bottomright\", legend=labels,fill = 1:10 ,ncol = 1, cex = 0.45 , col=palette, horiz=FALSE, ...)\n  #legend(0.4,0.6, legend=labels,ncol = 1, fill = 1:length(classifiers), cex = 0.45 , col = palette, horiz=FALSE)\n  legend(xleg, yleg, legend = labels, col = \"blue\",cex = 0.55,pch = 15,ncol=numbercols)\n\n  #legend(\"topright\", inset=c(xleg,yleg), legend = labels, col = palette,cex = 0.25,pch = 15)\n\n\n\n}\n\n\n\nROC_curves_two_groups <- function(Comparison,sigDiff,RegDiff,ntop,TitlePlot,FontCexInput){\n\n\n  if(RegDiff ==\"UP\"){\n    sigTab<-sigDiff[sigDiff$logFC >=1,]\n  }\n  if(RegDiff ==\"DOWN\"){\n    sigTab<-sigDiff[sigDiff$logFC <=1,]\n  }\n\n  if(nrow(sigDiff)!=1){\n    if(nrow(sigDiff) < ntop) {\n      ntop <- nrow(sigTab)\n    }\n  }\n\n  sigTab <- sigTab[order(sigTab$adj.P.Val,decreasing=F),]\n\n  Genelist<-rownames(sigTab)[1:ntop]\n\n  library(devtools)\n  library(ggbiplot)\n\n  matFiltered<-cbind(TablemRNA_normal_sample,TablemRNA_groupI, TablemRNA_groupII,TablemRNA_groupIII,TablemRNA_groupIV, TablemRNA_groupV )\n  expr<-matFiltered\n  sample.colors<-c(rep(\"blue\", ncol(TablemRNA_normal_sample)), rep(\"red\", ncol(TablemRNA_groupI)), rep(\"green\",ncol(TablemRNA_groupII)),rep(\"yellow\",ncol(TablemRNA_groupIII)),rep(\"orange\",ncol(TablemRNA_groupIV)),rep(\"pink\",ncol(TablemRNA_groupV)))\n\n  tkColor <- as.matrix(unlist(strsplit(Comparison,\"-\")))\n\n  sample.colors1 <- sample.colors[grep(tkColor[1], sample.colors)]\n  sample.colors2 <- sample.colors[grep(tkColor[2], sample.colors)]\n  sample.colors <-c(sample.colors1,sample.colors2)\n\n  matFiltered1 <- matFiltered[,grep(tkColor[1], sample.colors)]\n  matFiltered2 <- matFiltered[,grep(tkColor[2], sample.colors)]\n\n  expr<-cbind(matFiltered1,matFiltered2)\n  names(sample.colors) <- colnames(expr)\n\n  expr2<-expr[Genelist,]\n  expr2_dd1 <- t(expr2)\n  event <- c(rep(0, ncol(matFiltered1)), rep(1, ncol(matFiltered2) ))\n  dd2 <- as.data.frame(cbind(event,expr2_dd1))\n\n  colnames(dd2) <- gsub(\"-\",\"_\",colnames(dd2))\n\n\n  classifiersMatrix <- list()\n  for( k in 1: ntop+1){\n    print(k)\n    df <- dd2[,c(1,k)]\n    df$event <- as.factor(df$event)\n    formulaComb= as.formula(\"event~.\")\n    print(formulaComb)\n    #titleLabel <- as.character(paste(k, \" genes\",sep=\"\"))\n    titleLabel <- gsub(\"event,\",\"\",paste(colnames(df),collapse=\",\"))\n    classifierList <- RFclassif(df,formulaComb,titleLabel,kfold = 10)\n    classifiersMatrix <- c(classifiersMatrix,classifierList)\n  }\n\n  #classtmp <- as.data.frame(auc(classifiersMatrix))\n  #plot(classtmp$auc,type= \"l\")\n  # random forest\n\n  tmp <- as.data.frame(auc(classifiersMatrix))\n  tmp$auc <- round(tmp$auc,3)\n  tmp <- as.data.frame(cbind( Label = rownames(tmp), AUC = tmp$auc))\n\n  tmp2 <- tmp\n  tmp2$Label <- as.character(tmp2$Label)\n  for ( i in 1: nrow(tmp)){\n\n    # if(i==1){tmp2$Label[i] <- as.character(paste(\"g.\",i, \" \", tmp$Label[i],\" and AUC=\", tmp$AUC[i], sep = \"\" )) }\n    #  else{tmp2$Label[i] <- as.character(paste(\"g.\",i, \" \", tmp$Label[i], \" and AUC=\", tmp$AUC[i], sep = \"\" ))\n    # }\n\n\n    if(i==1){tmp2$Label[i] <- as.character(paste(\"gene n.\",i, \" \", tmp$Label[i],\" with FC = \",round(sigTab[as.character(tmp$Label[i]),\"logFC\"],3)  , \", FDR = \",format(sigTab[as.character(tmp$Label[i]),\"adj.P.Val\"],digits= 3) , \" and AUC=\", tmp$AUC[i], sep = \"\" )) }\n    else{tmp2$Label[i] <- as.character(paste(\"gene n.\",i, \" \", tmp$Label[i],\" with FC = \",round(sigTab[as.character(tmp$Label[i]),\"logFC\"],3)  , \", FDR = \",format(sigTab[as.character(tmp$Label[i]),\"adj.P.Val\"],digits = 3) , \" and AUC=\", tmp$AUC[i], sep = \"\" ))\n    }\n\n  }\n\n\n\n\n  plot.roc(classifiersMatrix, labels=tmp2$Label,fontcex = FontCexInput, inset=.02, main = TitlePlot,xleg = 0.6, yleg = 0.4, numbercols = 1,legtw =NULL)\n\n\n}\n\n\n\n#sigDiff <- sigIbis\n#ntop = 20\n#RegDiff = \"UP\"\n\nAUC_values_two_groups <- function(Comparison,sigDiff,RegDiff,ntop,TitlePlot,FontCexInput){\n\n\n  if(RegDiff ==\"UP\"){\n    sigTab<-sigDiff[sigDiff$logFC >=1,]\n  }\n  if(RegDiff ==\"DOWN\"){\n    sigTab<-sigDiff[sigDiff$logFC <=1,]\n  }\n\n  if(nrow(sigDiff)!=1){\n    if(nrow(sigDiff) < ntop) {\n      ntop <- nrow(sigTab)\n    }\n  }\n\n  sigTab <- sigTab[order(sigTab$adj.P.Val,decreasing=F),]\n\n  Genelist<-rownames(sigTab)[1:ntop]\n\n  library(devtools)\n  library(ggbiplot)\n\n  matFiltered<-cbind(TablemRNA_normal_sample,TablemRNA_groupI, TablemRNA_groupII,TablemRNA_groupIII,TablemRNA_groupIV, TablemRNA_groupV )\n  expr<-matFiltered\n  sample.colors<-c(rep(\"blue\", ncol(TablemRNA_normal_sample)), rep(\"red\", ncol(TablemRNA_groupI)), rep(\"green\",ncol(TablemRNA_groupII)),rep(\"yellow\",ncol(TablemRNA_groupIII)),rep(\"orange\",ncol(TablemRNA_groupIV)),rep(\"pink\",ncol(TablemRNA_groupV)))\n\n  tkColor <- as.matrix(unlist(strsplit(Comparison,\"-\")))\n\n  sample.colors1 <- sample.colors[grep(tkColor[1], sample.colors)]\n  sample.colors2 <- sample.colors[grep(tkColor[2], sample.colors)]\n  sample.colors <-c(sample.colors1,sample.colors2)\n\n  matFiltered1 <- matFiltered[,grep(tkColor[1], sample.colors)]\n  matFiltered2 <- matFiltered[,grep(tkColor[2], sample.colors)]\n\n  expr<-cbind(matFiltered1,matFiltered2)\n  names(sample.colors) <- colnames(expr)\n\n  expr2<-expr[Genelist,]\n  expr2_dd1 <- t(expr2)\n  event <- c(rep(0, ncol(matFiltered1)), rep(1, ncol(matFiltered2) ))\n  dd2 <- as.data.frame(cbind(event,expr2_dd1))\n\n  colnames(dd2) <- gsub(\"-\",\"_\",colnames(dd2))\n\n\n  classifiersMatrix <- list()\n  for( k in 1: ntop+1){\n    print(k)\n    df <- dd2[,c(1,k)]\n    df$event <- as.factor(df$event)\n    formulaComb= as.formula(\"event~.\")\n    print(formulaComb)\n    #titleLabel <- as.character(paste(k, \" genes\",sep=\"\"))\n    titleLabel <- gsub(\"event,\",\"\",paste(colnames(df),collapse=\",\"))\n    classifierList <- RFclassif(df,formulaComb,titleLabel,kfold = 10)\n    classifiersMatrix <- c(classifiersMatrix,classifierList)\n  }\n\n  #classtmp <- as.data.frame(auc(classifiersMatrix))\n  #plot(classtmp$auc,type= \"l\")\n  # random forest\n\n  tmp <- as.data.frame(auc(classifiersMatrix))\n  tmp$auc <- round(tmp$auc,3)\n  tmp <- as.data.frame(cbind( Label = rownames(tmp), AUC = tmp$auc))\n\n  tmp2 <- tmp\n  tmp2$Label <- as.character(tmp2$Label)\n  for ( i in 1: nrow(tmp)){\n\n    # if(i==1){tmp2$Label[i] <- as.character(paste(\"g.\",i, \" \", tmp$Label[i],\" and AUC=\", tmp$AUC[i], sep = \"\" )) }\n    #  else{tmp2$Label[i] <- as.character(paste(\"g.\",i, \" \", tmp$Label[i], \" and AUC=\", tmp$AUC[i], sep = \"\" ))\n    # }\n\n\n    if(i==1){tmp2$Label[i] <- as.character(paste(\"gene n.\",i, \" \", tmp$Label[i],\" with FC = \",round(sigTab[as.character(tmp$Label[i]),\"logFC\"],3)  , \", FDR = \",format(sigTab[as.character(tmp$Label[i]),\"adj.P.Val\"],digits= 3) , \" and AUC=\", tmp$AUC[i], sep = \"\" )) }\n    else{tmp2$Label[i] <- as.character(paste(\"gene n.\",i, \" \", tmp$Label[i],\" with FC = \",round(sigTab[as.character(tmp$Label[i]),\"logFC\"],3)  , \", FDR = \",format(sigTab[as.character(tmp$Label[i]),\"adj.P.Val\"],digits = 3) , \" and AUC=\", tmp$AUC[i], sep = \"\" ))\n    }\n\n  }\n\n\n\n\n  plot.roc(classifiersMatrix, labels=tmp2$Label,fontcex = FontCexInput, inset=.02, main = TitlePlot,xleg = 0.6, yleg = 0.4, numbercols = 1,legtw =NULL)\n\n\n}\n\nAUC_values_two_groups2 <- function(Comparison,sigTab,TablemRNA_normal_sample,TablemRNA_groupI, TablemRNA_groupII,TablemRNA_groupIII,TablemRNA_groupIV, TablemRNA_groupV){\n  sigTab <- sigTab[order(sigTab$adj.P.Val,decreasing=F),]\n  Genelist<-rownames(sigTab)\n  library(devtools)\n  library(ggbiplot)\n\n  matFiltered<-cbind(TablemRNA_normal_sample,TablemRNA_groupI, TablemRNA_groupII,TablemRNA_groupIII,TablemRNA_groupIV, TablemRNA_groupV )\n  expr<-matFiltered\n  sample.colors<-c(rep(\"blue\", ncol(TablemRNA_normal_sample)), rep(\"red\", ncol(TablemRNA_groupI)), rep(\"green\",ncol(TablemRNA_groupII)),rep(\"yellow\",ncol(TablemRNA_groupIII)),rep(\"orange\",ncol(TablemRNA_groupIV)),rep(\"pink\",ncol(TablemRNA_groupV)))\n\n  tkColor <- as.matrix(unlist(strsplit(Comparison,\"-\")))\n\n  sample.colors1 <- sample.colors[grep(tkColor[1], sample.colors)]\n  sample.colors2 <- sample.colors[grep(tkColor[2], sample.colors)]\n  sample.colors <-c(sample.colors1,sample.colors2)\n\n  matFiltered1 <- matFiltered[,grep(tkColor[1], sample.colors)]\n  matFiltered2 <- matFiltered[,grep(tkColor[2], sample.colors)]\n\n  expr<-cbind(matFiltered1,matFiltered2)\n  names(sample.colors) <- colnames(expr)\n\n  expr2<-expr[Genelist,]\n  expr2_dd1 <- t(expr2)\n  event <- c(rep(0, ncol(matFiltered1)), rep(1, ncol(matFiltered2) ))\n  dd2 <- as.data.frame(cbind(event,expr2_dd1))\n\n  colnames(dd2) <- gsub(\"-\",\"_\",colnames(dd2))\n  colnames(dd2) <- gsub(\"@\",\"at\",colnames(dd2))\n  colnames(dd2) <- gsub(\" \",\"_\",colnames(dd2))\n  colnames(dd2) <- gsub(\"/\",\"_\",colnames(dd2))\n\n  classifiersMatrix <- list()\n  for( k in 1: length(Genelist)+1){\n    print(k)\n    df <- dd2[,c(1,k)]\n    df$event <- as.factor(df$event)\n    formulaComb= as.formula(\"event~.\")\n    print(formulaComb)\n    #titleLabel <- as.character(paste(k, \" genes\",sep=\"\"))\n    titleLabel <- gsub(\"event,\",\"\",paste(colnames(df),collapse=\",\"))\n    classifierList <- RFclassif(df,formulaComb,titleLabel,kfold = 10)\n    classifiersMatrix <- c(classifiersMatrix,classifierList)\n  }\n\n  # random forest\n  tmp <- as.data.frame(auc(classifiersMatrix))\n  tmp$auc <- round(tmp$auc,3)\n\n  tmp <- cbind(GeneSymbols = rownames(tmp), tmp)\n  return(tmp)\n\n}\n\n\n\n\n\nConvertPlatform_probe_toGeneSymbol <- function(mat, GPLplatform,typeSplit =\"///\"){\n\n  GPLplatform <- GPLplatform[order(GPLplatform$ID,decreasing=F),]\n  mat <- as.data.frame(mat)\n  mat <- cbind(Mean = rowMeans(mat), mat)\n  mat <- cbind(GeneSymbol = matrix(0,nrow(mat),1),mat)\n  mat_ordered <- mat[order(rownames(mat),decreasing=F),]\n  print(sum(GPLplatform$ID == rownames(mat_ordered) )) #check on order\n  mat_ordered$GeneSymbol <- as.character(GPLplatform$Gene.Symbol)\n\n  idx<-grep(\"///\",mat_ordered$GeneSymbol)\n\n  tmpNames <- matrix(0,length(idx),1)\n  for ( k in 1:length(idx)){\n    tmpNames[k]<-  unlist(strsplit(as.character(mat_ordered[idx[k],\"GeneSymbol\" ]), \" /// \"))[1]\n    if(typeSplit==\"///\"){\n      tmpNames[k]<-  unlist(strsplit(as.character(mat_ordered[idx[k],\"GeneSymbol\" ]), \"///\"))[1]\n    }\n  }\n  mat_ordered[idx,\"GeneSymbol\"] <- tmpNames\n  mat_ordered <- mat_ordered[order(mat_ordered$Mean, decreasing=T),]\n  mat_ordered <- mat_ordered[!duplicated(mat_ordered$GeneSymbol),]\n  mat_ordered <- mat_ordered[mat_ordered$GeneSymbol!=\"\",]\n  mat_ordered <- mat_ordered[mat_ordered$GeneSymbol!=\"---\",]\n  #length(intersect(mat_ordered$GeneSymbol, rownames(matFiltered)))\n  mat_ordered_filt <- mat_ordered\n  rownames(mat_ordered_filt) <- mat_ordered_filt$GeneSymbol\n  mat_ordered_filt <- mat_ordered_filt[,-c(1,2)]\n  return(mat_ordered_filt)\n\n}\n\n\nConvertPlatform_probe_toGeneSymbol2 <- function(mat, GPLplatform,typeSplit =\"///\"){\n\n  mat[is.na(mat)]<-0\n  #GPLplatform <- GPLplatform[order(GPLplatform$ID,decreasing=F),]\n  mat <- as.data.frame(mat)\n  mat <- cbind(Mean = rowMeans(mat), mat)\n  mat <- cbind(GeneSymbol = matrix(0,nrow(mat),1),mat)\n  #mat_ordered <- mat[order(as.numeric(rownames(mat)),decreasing=F),]\n  mat_ordered<-mat[GPLplatform$ID,]\n  #rownames(mat_ordered)<-as.character(rownames(mat_ordered))\n  print(sum(GPLplatform$ID == rownames(mat_ordered) )) #check on order\n  mat_ordered$GeneSymbol <- as.character(GPLplatform$Gene.Symbol)\n\n  idx<-grep(\"///\",mat_ordered$GeneSymbol)\n\n  tmpNames <- matrix(0,length(idx),1)\n  for ( k in 1:length(idx)){\n    tmpNames[k]<-  unlist(strsplit(as.character(mat_ordered[idx[k],\"GeneSymbol\" ]), \" /// \"))[1]\n    if(typeSplit==\"///\"){\n      tmpNames[k]<-  unlist(strsplit(as.character(mat_ordered[idx[k],\"GeneSymbol\" ]), \"///\"))[1]\n    }\n  }\n  mat_ordered[idx,\"GeneSymbol\"] <- tmpNames\n  mat_ordered <- mat_ordered[order(mat_ordered$Mean, decreasing=T),]\n  mat_ordered <- mat_ordered[!duplicated(mat_ordered$GeneSymbol),]\n  mat_ordered <- mat_ordered[mat_ordered$GeneSymbol!=\"\",]\n  mat_ordered <- mat_ordered[mat_ordered$GeneSymbol!=\"---\",]\n  #length(intersect(mat_ordered$GeneSymbol, rownames(matFiltered)))\n  mat_ordered_filt <- mat_ordered\n  rownames(mat_ordered_filt) <- mat_ordered_filt$GeneSymbol\n  mat_ordered_filt <- mat_ordered_filt[,-c(1,2)]\n  return(mat_ordered_filt)\n\n}\n",
    "created" : 1429879424020.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "5|47|19|0|\n28|97|79|0|\n81|66|100|0|\n102|67|123|0|\n147|73|158|0|\n160|33|163|0|\n165|63|181|0|\n204|67|224|0|\n227|70|248|0|\n250|75|271|0|\n273|65|379|0|\n416|66|452|0|\n454|38|464|0|\n466|54|494|0|\n496|109|529|0|\n556|45|575|0|\n671|43|709|0|\n711|31|715|0|\n717|32|722|0|\n724|52|736|0|\n739|30|749|0|\n751|52|776|0|\n778|26|812|0|\n814|66|840|0|\n843|82|858|0|\n861|87|904|0|\n906|133|1017|0|\n1019|41|1023|0|\n1025|75|1098|0|\n1100|74|1135|0|\n1137|275|1315|0|\n1317|35|1323|0|\n1325|104|1367|0|\n1369|71|1415|0|\n1417|275|1601|0|\n1603|93|1662|0|\n1664|106|1747|0|\n1749|37|1759|0|\n1761|190|1814|0|\n1816|215|1842|0|\n1844|94|1889|0|\n1891|65|1942|0|\n1948|71|2005|0|\n2007|90|2063|0|\n2065|51|2070|0|\n2072|59|2100|0|\n2102|134|2158|0|\n2104|61|2131|2|\n2104|61|2131|2|\n2160|77|2234|0|\n2161|38|2181|2|\n2161|38|2181|2|\n2236|82|2271|0|\n2237|35|2244|2|\n2237|35|2244|2|\n2273|135|2335|0|\n2337|44|2353|0|\n2355|89|2370|0|\n2372|85|2392|0|\n2394|71|2471|0|\n2473|60|2492|0|\n2497|73|2509|0|\n2511|82|2530|0|\n2532|87|2551|0|\n2553|85|2609|0|\n2611|89|2679|0|\n2681|64|2708|0|\n2710|75|2723|0|\n2711|31|2716|2|\n2711|31|2716|2|\n2725|78|2740|0|\n2726|31|2731|2|\n2726|31|2731|2|\n2742|61|2748|0|\n2750|51|2755|0|\n2757|54|2785|0|\n2787|58|2803|0|\n2805|67|2896|0|\n2898|76|2916|0|\n2918|40|2930|0|\n2932|44|2946|0|\n2948|69|2982|0|\n2984|52|3024|0|\n3026|53|3072|0|\n3077|43|3097|0|\n3099|57|3136|0|\n3138|79|3161|0|\n3163|66|3219|0|\n3221|41|3235|0|\n3237|73|3270|0|\n3273|76|3295|0|\n3299|102|3354|0|\n3357|97|3412|0|\n3419|79|3494|0|\n3433|151|3434|115|\n3433|151|3434|115|\n3496|47|3507|0|\n3520|55|3521|46|\n3571|73|3654|0|\n3589|55|3590|46|\n3589|55|3590|46|\n3803|64|3830|0|\n3833|42|3838|0|\n3842|53|3867|0|\n3869|38|4006|0|\n4020|30|4029|0|\n4024|130|4025|96|\n4024|130|4025|96|\n4031|43|4038|0|\n4040|39|4051|0|\n4054|51|4065|0|\n4068|99|4091|0|\n4094|98|4113|0|\n4116|73|4145|0|\n4147|106|4166|0|\n4170|145|4396|0|\n4399|166|4586|0|\n4591|195|4625|0|\n4629|158|4672|0|\n4677|168|4743|0|\n4745|172|4813|0|\n4816|141|4867|2|\n4871|55|4894|0|\n4897|90|4932|0|\n4934|33|4947|0|\n4949|132|5177|0|\n5179|71|5247|0|\n5250|51|5268|0|\n5253|60|5255|16|\n5256|66|5259|16|\n5253|60|5255|16|\n5256|66|5259|16|\n5279|83|5290|0|\n5307|101|5331|0|\n5339|43|5352|0|\n5360|118|5395|0|\n5398|98|5438|0|\n5442|90|5531|0|\n5539|90|5628|0|\n5630|169|5682|0|\n5688|82|5718|0|\n5721|83|5754|0|\n",
    "hash" : "1180905684",
    "id" : "85AF3B21",
    "lastKnownWriteTime" : 1429191360,
    "path" : "~/Downloads/DIFF_network_functions36.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}