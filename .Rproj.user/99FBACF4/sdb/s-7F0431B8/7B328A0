{
    "contents" : "#' @title TCGA query\n#'\n#' @description  Crossfinding of file locations for downloading (TCGADownload)\n#' @param tumor tumor code between \"acc\"  \"blca\" \"brca\" \"cesc\" \"chol\" \"cntl\" \"coad\" \"dlbc\" \"esca\" \"fppp\" \"gbm\"\n#'                                 \"hnsc\" \"kich\" \"kirc\" \"kirp\" \"laml\" \"lcml\" \"lgg\"  \"lihc\" \"lnnh\" \"luad\" \"lusc\"\n#'                                 \"meso\" \"misc\" \"ov\"   \"paad\" \"pcpg\" \"prad\" \"read\" \"sarc\" \"skcm\" \"stad\" \"tgct\"\n#'                                 \"thca\" \"thym\" \"ucec\" \"ucs\"  \"uvm\"\n#'\n#' @param centerType type code between \"bcr\"  \"cgcc\" \"gsc\"\n#'\n#' @param center center code between \"biotab\"                  \"nationwidechildrens.org\"\n#'                                   \"bcgsc.ca\"                \"broad.mit.edu\"\n#'                                   \"jhu-usc.edu\"             \"mdanderson.org\"\n#'                                   \"unc.edu\"                 \"hgsc.bcm.edu\"\n#'                                   \"hms.harvard.edu\"         \"genome.wustl.edu\"\n#'                                   \"ucsc.edu\"                \"intgen.org\"\n#'                                   \"hudsonalpha.org\"         \"lbl.gov\"\n#'                                   \"mskcc.org\"               \"supplemental\"\n#'\n#' @param platform platform code between  \"clin\"                                \"bio\"\n#'                                        \"biotab\"                              \"diagnostic_images\"\n#'                                        \"pathology_reports\"                   \"tissue_images\"\n#'                                        \"illuminahiseq_mirnaseq\"              \"genome_wide_snp_6\"\n#'                                        \"humanmethylation450\"                 \"mda_rppa_core\"\n#'                                        \"illuminahiseq_rnaseqv2\"              \"illuminaga_dnaseq_curated\"\n#'                                        \"illuminaga_dnaseq_automated\"         \"illuminaga_dnaseq_cont_automated\"\n#'                                        \"mixed_dnaseq_curated\"                \"illuminaga_mirnaseq\"\n#'                                        \"illuminahiseq_dnaseqc\"               \"illuminahiseq_wgbs\"\n#'                                        \"illuminahiseq_rnaseq\"                \"illuminahiseq_totalrnaseqv2\"\n#'                                        \"illuminaga_dnaseq\"                   \"humanmethylation27\"\n#'                                        \"agilentg4502a_07_3\"                  \"illuminahiseq_dnaseq_automated\"\n#'                                        \"illuminahiseq_dnaseq_cont_automated\" \"miRNASeq\"\n#'                                        \"microsat_i\"                          \"illuminaga_rnaseq\"\n#'                                        \"illuminaga_rnaseqv2\"                 \"RNASeq\"\n#'                                        \"solid_dnaseq\"                        \"mixed_dnaseq_automated\"\n#'                                        \"minbio\"                              \"abi\"\n#'                                        \"ht_hg-u133a\"                         \"hg-cgh-244a\"\n#'                                        \"hg-cgh-415k_g4124a\"                  \"humanhap550\"\n#'                                        \"illuminadnamethylation_oma002_cpi\"   \"illuminadnamethylation_oma003_cpi\"\n#'                                        \"huex-1_0-st-v2\"                      \"agilentg4502a_07_1\"\n#'                                        \"agilentg4502a_07_2\"                  \"h-mirna_8x15k\"\n#'                                        \"h-mirna_8x15kv2\"                     \"mixed_dnaseq_cont\"\n#'                                        \"mixed_dnaseq\"                        \"mixed_dnaseq_cont_curated\"\n#'                                        \"hg-u133_plus_2\"                      \" \"\n#'                                        \"human1mduo\"                          \"cgh-1x1m_g4447a\"\n#'                                        \"illuminaga_mrna_dge\"                 \"solid_dnaseq_curated\"\n#'\n#' @param level level 1 2 3\n#'\n#' @param version version code -TO DO-\n#'\n#' @param file - link reference data matrix\n#'\n#' @param qOutput place where the query is saved to be downloaded automatically.\n#'        The folder can be specified in both TCGAQuery and TCGADownload\n#'\n#' @examples\n#' \\dontrun{\n#'   TCGAQuery(tumor = \"all\",centerType = \"all\",center = \"all\",\n#'             platform = \"all\",level = \"all\",version = \"all\",\n#'             i = F,file = \"data/dataFolders.rda\",\n#'             qOutput = \"data/query/\")\n#' }\n#'\n#' @author Davide Garolini\n#' @seealso TCGADownload\n#' @export\n#' @import downloader\n#' @import stringr RCurl\nTCGAQuery <- function(tumor = \"all\",\n                      centerType = \"all\",\n                      center = \"all\",\n                      platform = \"all\",\n                      level = \"all\",\n                      version = \"all\",\n                      metadata = F,\n                      file = system.file(\"extdata/dataFolders.rda\",\n                                         package=\"TCGAbiolinks\"),\n                      qOutput = \"data/query/\"){\n\n  # laod tcga info if not done\n  if(!exists(\"dataFolders\")) load(file)\n  dataFolders <- get(\"dataFolders\", envir=environment())\n\n  dir.create(path = qOutput, showWarnings = F, recursive = T)\n\n    ifelse(tumor != \"all\",x <- subset(dataFolders, dataFolders[,\"Tumor\"] == tolower(tumor)),x<-dataFolders)\n\n    if(centerType != \"all\" && is.null(nrow(x))) x <- subset(x, x[\"CenterType\"] == tolower(centerType))\n    if(centerType != \"all\" && !is.null(nrow(x))) x <- subset(x, x[,\"CenterType\"] == tolower(centerType))\n\n    if(center != \"all\" && is.null(nrow(x)))  x <- subset(x, x[\"Center\"] == tolower(center))\n    if(center != \"all\" && !is.null(nrow(x)))  x <- subset(x, x[,\"Center\"] == tolower(center))\n\n\n    if(platform != \"all\" && is.null(nrow(x)))  x <- subset(x, x[\"Platform\"] == tolower(platform))\n    if(platform != \"all\" && !is.null(nrow(x))) x <- subset(x, x[,\"Platform\"] == tolower(platform))\n\n    if(metadata){\n      if(!is.null(nrow(x))){\n        magetab <- x[grep(\"mage-tab\", x[,\"Folder\"]),]\n      }else{\n        magetab <- x[grep(\"mage-tab\", x[\"Folder\"]),]\n      }\n    }\n\n    if(!is.null(nrow(x))){\n      x <- x[grep(\"Level_\",   x[,\"Folder\"]),]\n    }else{\n      x <- x[grep(\"Level_\",   x[\"Folder\"]),]\n    }\n\n\n    if(level != \"all\"){\n      if(is.null(nrow(x))){\n        l <- grep(paste(\"Level_\", as.character(level),sep=\"\"), x[\"Folder\"])\n        if(length(l)==0) x <- NULL\n      }else{\n        l <- grep(paste(\"Level_\", as.character(level),sep=\"\"), x[,\"Folder\"])\n        x <- x[l,]\n      }\n    }\n    #     if(version != \"all\"){ #something smarter could be done (maybe \"lastUp\" as keyword)\n    #       if(is.null(nrow(x)))l <- grep(paste(\"Level_\",as.character(version),sep=\"\"),x[\"Folder\"])\n    #       if(!is.null(nrow(x)))l <- grep(paste(\"Level_\",as.character(version),sep=\"\"),x[,\"Folder\"])\n    #       if(length(l)>1) x<-x[l,]\n    #       if(length(l)==0)x<-NULL\n    #     }\n\n    if(length(x)==0){\n      stop(\"Nothing found. Check the proper spelling in the documentation.\")\n    }else if(is.null(nrow(x))) {\n      print(\"Found: 1 folder. Start downloading filenames and preparing to download files...\")\n    }else{\n      print(paste(\"Found:\", length(x[,1]), \"folders. Preparing filenames:\",sep=\" \"))\n    }\n\n\n\n    if(metadata && length(magetab)!=0 ) {\n      print(\"Found magetab metadata. Downloading..\")\n      for(k in 1:length(magetab[,\"Manifest\"])){ #add the possibility of only one magetab\n        if(RCurl::url.exists(dirname(magetab[,\"Manifest\"][k]))){\n          mt <- DownloadHTML(dirname(magetab[,\"Manifest\"][k]))\n        }else{\n          message(paste0(\"ERROR: \", dirname(magetab[,\"Manifest\"][k]),\" not found\"))\n        }\n        mt <- as.matrix(unlist(strsplit(mt, \"  \")))\n        mt <- str_trim(mt[mt != \"\"])\n        mt <- mt[grep(\".sdrf.txt\",mt)]\n        mt <- sapply(strsplit(mt, \">\"), function(y) y[1])\n        mt <- sapply(strsplit(mt, \"=\"), function(y) y[2])\n        mt <- sub('\\\"','',mt)\n        mt <- sub('\\\"','',mt)\n        mt <- paste(dirname(magetab[,\"Manifest\"][k]),mt, sep = \"/\")\n        download(mt,\n                 destfile = paste0(qOutput,\n                                   paste0(unlist(strsplit(dirname(magetab[,\"Manifest\"][k]), split = '/', fixed = TRUE))[14],\n                                          \".sdrf.txt\")),\n                 mode = \"w\",\n                 quiet = 1)\n        print(paste(\"Downloaded\",k,\" metadata out of\",length(magetab[,\"Manifest\"]), sep = \" \"))\n      }\n    }else if(metadata){\n      \n     #if .maf exists take it\n     #else print no metadata found\n\n    }\n\n\n\n\n    queryURI = NULL\n    if(is.null(nrow(x))){\n      fails <- 0\n      if(RCurl::url.exists(x[\"Manifest\"])){\n        download(x[\"Manifest\"],\n                 destfile = paste0(qOutput,\"/filenames.txt\"),\n                 mode=\"w\",\n                 quiet = 1)\n        queryURI <- paste(unlist(strsplit(x[\"Manifest\"], split='MANIFEST.txt', fixed=TRUE)),\n                          as.character(read.table(file = paste0(qOutput,\"/filenames.txt\"))[2]$V2),sep=\"\")\n        print(\"Donwloaded.\")\n      }else{\n        message(paste0(\"ERROR: \", x[\"Manifest\"],\" not found\"))\n        fails <- 1\n      }\n    }else{\n      fails <- 0\n      for(j in 1:length(x[,\"Tumor\"])){\n\n        if(RCurl::url.exists(x[,\"Manifest\"][j])){\n          download(x[,\"Manifest\"][j],\n                 destfile = paste0(qOutput,\"/filenames.txt\"),\n                 mode=\"w\",\n                 quiet = 1) #character. The mode with which to write the file.\n                            #Useful values are \"w\", \"wb\" (binary), \"a\" (append) and \"ab\".\n                            #Only used for the \"internal\" method.\n\n        print(paste(\"Downloaded file names from the folder\",j,\"out of\",length(x[,\"Tumor\"]),sep=\" \"))\n\n        queryURI<-c(queryURI,paste(unlist(strsplit(x[,\"Manifest\"][j], split='MANIFEST.txt', fixed=TRUE)),\n                                   as.character(read.table(file = paste(qOutput,\"/filenames.txt\",sep=\"\"))[2]$V2),sep=\"\"))\n        unlink(paste0(qOutput,\"/filenames.txt\"))\n        }\n        else{\n          message(paste0(\"ERROR: \", x[,\"Manifest\"][j] ,\" not found\"))\n          fails <- fails + 1\n        }\n      }\n    }\n  \n  print(paste(\"We found\",length(queryURI) - fails ,\"files\",sep=\" \"))\n\n  if(metadata && length(magetab)!=0){\n    print(\"Returning metadata as .sdrf files\")\n    n<-list.files(path = qOutput)\n    n<-n[grep(\".sdrf\",n)]\n    u <- NULL\n    for(i in 1:length(n)){\n      if(!is.null(u)) u<-rbind(u,read.delim(paste(qOutput,n[i],sep= \"/\"),sep = \"\\t\"))\n      else u<-read.delim(paste(qOutput,n[i],sep= \"/\"),sep = \"\\t\")\n      #unlink(paste(qOutput,n[i],sep= \"/\"))\n    }\n  }else if(metadata){\n    print(\"Returning metadata as .maf files\")\n  }\n  save(queryURI, file = paste0(qOutput,\"/fileURLs.rda\"))\n  #todo - add the showing of the result in a human readable way\n  #if(metadata) return(u)\n}\n\n",
    "created" : 1431527490267.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "424899810",
    "id" : "7B328A0",
    "lastKnownWriteTime" : 1431529817,
    "path" : "~/Desktop/gitHubTCGA/TCGAbiolinks/R/TCGAQuery.R",
    "project_path" : "R/TCGAQuery.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}