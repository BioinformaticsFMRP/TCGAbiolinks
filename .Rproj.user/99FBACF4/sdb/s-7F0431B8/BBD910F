{
    "contents" : "\n\nCreateMatrixMI_tf_gene <- function(TFs, normCounts,kNum) {\n  \n  \n  \n  library(parmigene)\n  MRcandidates <- intersect(rownames(normCounts),TFs)\n  \n  # Mutual information between TF and genes\n  sampleNames <- colnames(normCounts)\n  geneNames <- rownames(normCounts)\n  \n  messageMI_TFgenes <- paste(\"Estimation of MI among [\", length(MRcandidates), \" TRs and \", nrow(normCounts), \" genes].....\", sep = \"\")\n  timeEstimatedMI_TFgenes1 <- length(MRcandidates)*nrow(normCounts)/1000\n  timeEstimatedMI_TFgenes <- format(timeEstimatedMI_TFgenes1*ncol(normCounts)/17000, digits = 2)\n  messageEstimation <- print(paste(\"I Need about \", timeEstimatedMI_TFgenes, \"seconds for this MI estimation. [Processing 17000k elements /s]  \"))\n  \n  TimeUse(miTFGenes <- knnmi.cross(normCounts[MRcandidates, ], normCounts, k = kNum))\n  \n  return(miTFGenes)\n  \n}\n\nFindTFbootMIthresh <- function(tfListCancer,normCounts,nboot,nGenesPerm,Knum) {\n  \n  tfListCancer <- intersect(tfListCancer,rownames(normCounts))\n  \n  #normCounts<-normCounts[,SampleS]\n  \n  maxmi<-rep(0,length(tfListCancer))\n  Cancer_null_distr<-matrix(0,length(tfListCancer),nboot)\n  rownames(Cancer_null_distr)<-tfListCancer\n  #toSave <- NULL\n  for ( i in 1: nboot){\n    cat(paste( (nboot-i),\".\",sep=\"\"))\n    SampleS <- sample(1:ncol(normCounts))\n    #SampleTF <- sample(1:ncol(normCounts)) #toRemove\n    g <- sample(1:nrow(normCounts), nGenesPerm)\n    #TimeUse(mi <- knnmi.cross(normCounts[tfListCancer, ], normCounts[g, SampleS], k = Knum))\n    if(i == 1) TimeUse(mi <- knnmi.cross(normCounts[tfListCancer, ], normCounts[g, SampleS], k = Knum)) else\n      mi <- knnmi.cross(normCounts[tfListCancer, ], normCounts[g, SampleS], k = Knum)\n    \n    maxmiCurr <- apply(mi,1, max)\n    Cancer_null_distr[,i]<-maxmiCurr\n    index<- maxmi < maxmiCurr\n    maxmi[index]<- maxmiCurr[index]\n    \n    ####\n    #if(length(which(maxmi > 3)) > 1){\n    #  tmp <- which(maxmi > 3)[1] ok\n    #  toSave <- rbind(toSave, rbind(normCounts[tfListCancer[tmp], , drop = F], normCounts[g[tmp], SampleS, drop = F]))\n    #}\n  }\n  names(maxmi) <- rownames(Cancer_null_distr)\n  return(maxmi)\n  #return(list(maxmi = maxmi, toSave = toSave)) #toRemove\n}\n\n\nConvertMI_to_Cytoscape_onlyNet <-function(miTFGenes, thresh, outPrint = T){\n  cytNet <- NULL\n  for(i in 1:nrow(miTFGenes)){\n    #if(length(thresh) == 1) MI <- round(miTFGenes[i, miTFGenes[i, ] > thresh, drop = FALSE], 2) else\n    #  MI <- round(miTFGenes[i, miTFGenes[i, ] > thresh[i], drop = FALSE], 2)\n    if(length(thresh) == 1) MI <- miTFGenes[i, miTFGenes[i, ] >= thresh, drop = FALSE] else\n      MI <- miTFGenes[i, miTFGenes[i, ] >= thresh[i], drop = FALSE]\n    to <- colnames(MI)\n    if( length(to)>=1){\n      from <- rep(rownames(miTFGenes)[i], length(MI))\n      tmp <- cbind(from, to, MI = as.numeric(MI))\n      if(outPrint == T)\n        print(paste(\"TF: \", from[1], \" n. \",i,\" of \",nrow(miTFGenes),\"...Genes in regulon\",\": \", nrow(tmp), sep = \"\"))\n      cytNet <- rbind(cytNet, tmp)\n    }\n  }\n  rownames(cytNet) <- NULL\n  return (cytNet )\n}\n\nCreateTabLevel<-function(TF_enriched,FC_FDR_table_mRNA,typeCond1,typeCond2,TableCond1,TableCond2,typeOrder) {\n  \n  TableLevel<-matrix(0,nrow(TF_enriched),6)\n  TableLevel <- as.data.frame(TableLevel)\n  \n  colnames(TableLevel)<-c(\"mRNA\",\"logFC\",\"FDR\",typeCond1,typeCond2,\"Delta\")\n  \n  \n  TableLevel[,\"mRNA\"]<-TF_enriched\n  Tabfilt<-FC_FDR_table_mRNA[which( rownames(FC_FDR_table_mRNA) %in% TF_enriched),]\n  TableLevel[,\"logFC\"]<- as.numeric(Tabfilt[TF_enriched,][,\"logFC\"])\n  TableLevel[,\"FDR\"]<- as.numeric(Tabfilt[TF_enriched,][,\"FDR\"])\n  \n  \n  MeanTumor<-matrix(0,nrow(TF_enriched),1)\n  MeanDiffTumorNormal<-matrix(0,nrow(TF_enriched),1)\n  \n  \n  for( i in 1:nrow(TF_enriched)) {\n    #print(paste(i, \"of\", nrow(TF_enriched),TF_enriched[i]))\n    TableLevel[i,typeCond1]<- mean(TableCond1[rownames(TableCond1) %in%  TF_enriched[i] , ])\n    TableLevel[i,typeCond2]<- mean(TableCond2[rownames(TableCond2) %in%  TF_enriched[i] , ])\n  }\n  \n  \n  TableLevel[,\"Delta\"] <- as.numeric(abs(TableLevel[,\"logFC\"]) * TableLevel[,typeCond1]  )\n  \n  TableLevel<-TableLevel[order( as.numeric(TableLevel[,\"Delta\"]),decreasing=typeOrder),]\n  \n  rownames(TableLevel) <-  TableLevel[,\"mRNA\"]\n  \n  \n  return(TableLevel)\n}\n\n\nSelectedSample <- function(Dataset,typesample){\n  if( typesample ==\"tumor\"){\n    Dataset <- Dataset[,which( as.numeric(substr(colnames(Dataset), 14, 15)) < 10) ]\n  }\n  \n  if( typesample ==\"normal\"){\n    Dataset <- Dataset[,which( as.numeric(substr(colnames(Dataset), 14, 15)) >=10) ]\n  }\n  \n  return(Dataset)\n  \n}\n",
    "created" : 1429884216167.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3210272169",
    "id" : "BBD910F",
    "lastKnownWriteTime" : 1429885469,
    "path" : "~/Dropbox/OrganBiomarkers/RScripts/NetworkFunctions.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}